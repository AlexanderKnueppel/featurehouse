/* Generated By:JavaCC: Do not edit this line. QueryLanguageParser.java */
package modification.queryLanguageParser;

import java.io.Reader;
import java.io.StringReader;
import java.util.List;
import java.util.LinkedList;

import modification.queryLanguageParser.addressManagement.NameTypePatternToken;
import modification.queryLanguageParser.addressManagement.TreeAddress;
import modification.queryLanguageParser.addressManagement.TreeAddressToken;
import modification.queryLanguageParser.addressManagement.WildcardToken;

import de.ovgu.cide.fstgen.ast.FSTNode;

public class QueryLanguageParser implements QueryLanguageParserConstants {
        /**    *     */
        private FSTNode root = null;

        /**	*	*/
        private static final String JAVA_REGEX_PATTERN_STRING_WILDCARD = "(.)*";

        /**    *     */
    public List<FSTNode> parse() throws ParseException {
                return expression();
    }

        /**    *     */
    public QueryLanguageParser(String query, FSTNode root) {
                this((Reader) (new StringReader(query)));
                this.root=root;
    }

    /**    *     */
    private List<FSTNode> minus(List<FSTNode> a, List<FSTNode> b) {
        List<FSTNode> result = new LinkedList<FSTNode>(a);
                result.removeAll(b);
        return result;
    }

    /**    *     */
    private List<FSTNode> and(List<FSTNode> a, List<FSTNode> b) {
                List<FSTNode> result = new LinkedList<FSTNode>(a);
                result.retainAll(b);
        return result;
    }

    /**    *     */
    private List<FSTNode> or(List<FSTNode> a, List<FSTNode> b) {
        List<FSTNode> result = new LinkedList<FSTNode>(a);
                result.removeAll(b);
                result.addAll(b);
        return result;
    }

/*** independent expression*/
  final public List<FSTNode> expression() throws ParseException {
    trace_call("expression");
    try {
        List<FSTNode> nodeListOp1 = new LinkedList<FSTNode>();
        List<FSTNode> nodeListOp2 = new LinkedList<FSTNode>();
        List<FSTNode> nodeListRes = new LinkedList<FSTNode>();
      nodeListOp1 = queryTerm();
                nodeListRes = nodeListOp1;
      label_1:
      while (true) {
        if (jj_2_1(5)) {
          ;
        } else {
          break label_1;
        }
        if (jj_2_2(5)) {
          jj_consume_token(UNION);
          nodeListOp2 = queryTerm();
                        nodeListRes = nodeListOp1 = or(nodeListOp1, nodeListOp2);
        } else if (jj_2_3(5)) {
          jj_consume_token(INTERSECTION);
          nodeListOp2 = queryTerm();
                        nodeListRes = nodeListOp1 = and(nodeListOp1, nodeListOp2);
        } else if (jj_2_4(5)) {
          jj_consume_token(MINUS);
          nodeListOp2 = queryTerm();
                        nodeListRes = nodeListOp1 = minus(nodeListOp1, nodeListOp2);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
                {if (true) return nodeListRes;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expression");
    }
  }

/*** query term without operators outside braces*/
  final public List<FSTNode> queryTerm() throws ParseException {
    trace_call("queryTerm");
    try {
        List<FSTNode> nodeList;
        TreeAddress treeAddress;
      if (jj_2_5(5)) {
        jj_consume_token(LEFT_BRACE);
        nodeList = expression();
        jj_consume_token(RIGHT_BRACE);
                {if (true) return nodeList;}
      } else if (jj_2_6(5)) {
        treeAddress = treeAddress();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                {if (true) return treeAddress.resolve(root);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("queryTerm");
    }
  }

/*** single tree address without operators*/
  final public TreeAddress treeAddress() throws ParseException {
    trace_call("treeAddress");
    try {
        List<TreeAddressToken> tokenList = new LinkedList<TreeAddressToken>();
        List<TreeAddressToken> tempTokenList;
      if (jj_2_9(5)) {
        tempTokenList = literalAddress();
                         tokenList.addAll(tempTokenList);
        label_2:
        while (true) {
          if (jj_2_7(5)) {
            ;
          } else {
            break label_2;
          }
          jj_consume_token(ADDRESS_WILDCARD);
                                 tokenList.add(new WildcardToken());
          tempTokenList = literalAddress();
                                 tokenList.addAll(tempTokenList);
        }
      } else if (jj_2_10(5)) {
        label_3:
        while (true) {
          jj_consume_token(ADDRESS_WILDCARD);
                         tokenList.add(new WildcardToken());
          tempTokenList = literalAddress();
                         tokenList.addAll(tempTokenList);
          if (jj_2_8(5)) {
            ;
          } else {
            break label_3;
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
         {if (true) return new TreeAddress(tokenList);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("treeAddress");
    }
  }

/*** */
  final public List<TreeAddressToken> literalAddress() throws ParseException {
    trace_call("literalAddress");
    try {
        List<TreeAddressToken> tokenList = new LinkedList<TreeAddressToken>();
        TreeAddressToken token;
      token = nameTypePatternToken();
         tokenList.add(token);
      label_4:
      while (true) {
        if (jj_2_11(5)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(ADDRESS_DIVIDER);
        token = nameTypePatternToken();
                 tokenList.add(token);
      }
         {if (true) return tokenList;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("literalAddress");
    }
  }

/*** tokens split by <ADDRESS_DIVIDER>*/
  final public TreeAddressToken nameTypePatternToken() throws ParseException {
    trace_call("nameTypePatternToken");
    try {
        String name;
        String type;
      name = name();
      jj_consume_token(TYPE_DIVIDER);
      type = type();
                {if (true) return new NameTypePatternToken(name,type);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("nameTypePatternToken");
    }
  }

/*** */
  final public String name() throws ParseException {
    trace_call("name");
    try {
        String name;
      name = stringWithWildcards();
                {if (true) return name;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("name");
    }
  }

/*** */
  final public String type() throws ParseException {
    trace_call("type");
    try {
        String type;
      type = stringWithWildcards();
                {if (true) return type;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("type");
    }
  }

/*** */
  final public String stringWithWildcards() throws ParseException {
    trace_call("stringWithWildcards");
    try {
        String result = "";
        Token t;
        String s;
      if (jj_2_16(5)) {
        jj_consume_token(STRING_WILDCARD);
         result = result.concat(JAVA_REGEX_PATTERN_STRING_WILDCARD);
        label_5:
        while (true) {
          if (jj_2_12(5)) {
            ;
          } else {
            break label_5;
          }
          s = word();
         result = result.concat(s.toString());
          jj_consume_token(STRING_WILDCARD);
         result = result.concat(JAVA_REGEX_PATTERN_STRING_WILDCARD);
        }
        if (jj_2_13(5)) {
          s = word();
         result = result.concat(s.toString());
        } else {
          ;
        }
      } else if (jj_2_17(5)) {
        s = word();
         result = result.concat(s.toString());
        label_6:
        while (true) {
          if (jj_2_14(5)) {
            ;
          } else {
            break label_6;
          }
          jj_consume_token(STRING_WILDCARD);
         result = result.concat(JAVA_REGEX_PATTERN_STRING_WILDCARD);
          s = word();
         result = result.concat(s.toString());
        }
        if (jj_2_15(5)) {
          jj_consume_token(STRING_WILDCARD);
         result = result.concat(JAVA_REGEX_PATTERN_STRING_WILDCARD);
        } else {
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
         {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("stringWithWildcards");
    }
  }

  final public String word() throws ParseException {
    trace_call("word");
    try {
        String m;
        String s = "";
        Token t;
      label_7:
      while (true) {
        if (jj_2_18(5)) {
          t = jj_consume_token(SMALL_CHARACTER);
         s = s.concat(t.toString());
        } else if (jj_2_19(5)) {
          t = jj_consume_token(GREAT_CHARACTER);
                 s = s.concat(t.toString());
        } else if (jj_2_20(5)) {
          t = jj_consume_token(NUMBER);
                 s = s.concat(t.toString());
        } else if (jj_2_21(5)) {
          m = specialCharacter();
                 s = s.concat(m);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_22(5)) {
          ;
        } else {
          break label_7;
        }
      }
         {if (true) return s;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("word");
    }
  }

  final public String specialCharacter() throws ParseException {
    trace_call("specialCharacter");
    try {
        String s = "";
        Token t;
      jj_consume_token(17);
      if (jj_2_23(5)) {
        t = jj_consume_token(UNION);
                 s = s.concat(t.toString());
      } else if (jj_2_24(5)) {
        t = jj_consume_token(INTERSECTION);
                 s = s.concat(t.toString());
      } else if (jj_2_25(5)) {
        t = jj_consume_token(MINUS);
                 s = s.concat(t.toString());
      } else if (jj_2_26(5)) {
        t = jj_consume_token(ADDRESS_DIVIDER);
                 s = s.concat("\\.");
      } else if (jj_2_27(5)) {
        t = jj_consume_token(TYPE_DIVIDER);
                 s = s.concat(t.toString());
      } else if (jj_2_28(5)) {
        t = jj_consume_token(STRING_WILDCARD);
                 s = s.concat(t.toString());
      } else if (jj_2_29(5)) {
        t = jj_consume_token(LEFT_BRACE);
                 s = s.concat(t.toString());
      } else if (jj_2_30(5)) {
        t = jj_consume_token(RIGHT_BRACE);
                 s = s.concat(t.toString());
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
         {if (true) return s;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("specialCharacter");
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  final private boolean jj_3_10() {
    Token xsp;
    if (jj_3_8()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(STRING_WILDCARD)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_11()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_13()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_13()) return true;
    if (jj_scan_token(STRING_WILDCARD)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(STRING_WILDCARD)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_scan_token(RIGHT_BRACE)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  final private boolean jj_3_29() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(STRING_WILDCARD)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_scan_token(TYPE_DIVIDER)) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(ADDRESS_DIVIDER)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(INTERSECTION)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(INTERSECTION)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(UNION)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(17)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(TYPE_DIVIDER)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_8()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(0)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(GREAT_CHARACTER)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(ADDRESS_DIVIDER)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(SMALL_CHARACTER)) return true;
    return false;
  }

  final private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    if (jj_3_22()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(ADDRESS_WILDCARD)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(ADDRESS_WILDCARD)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(STRING_WILDCARD)) return true;
    return false;
  }

  public QueryLanguageParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[30];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public QueryLanguageParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public QueryLanguageParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public QueryLanguageParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QueryLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public QueryLanguageParser(QueryLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(QueryLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[18];
    for (int i = 0; i < 18; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

  final public void enable_tracing() {
    trace_enabled = true;
  }

  final public void disable_tracing() {
    trace_enabled = false;
  }

  final private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  final private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  final private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  final private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 30; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
