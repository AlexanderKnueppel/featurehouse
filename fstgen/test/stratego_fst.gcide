options {
	STATIC = false;
}

PARSER_BEGIN(StrategoParser)
package tmp.generated_stratego;

/* Wird glaub ich nicht benötigt! 
import java.io.*;
import java.util.*; 
*/

import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class StrategoParser extends AbstractFSTParser 
{
	public StrategoParser(){}
}

PARSER_END(StrategoParser)

/*****************************************************************************
 * WHITE SPACE                                                               *
 *****************************************************************************/
SPECIAL_TOKEN : 
	{ " " | 
      "\t" | 
      "\n" | 
      "\r" | 
      "\f" 
    }

/*****************************************************************************
 * COMMENTS                                                                  *
 *****************************************************************************/
MORE : 
	{ "//" : IN_SINGLE_LINE_COMMENT |
      <"/**" ~["/"]> 
      	{ input_stream.backup(1); } : IN_FORMAL_COMMENT |
      "/*" : IN_MULTI_LINE_COMMENT
	}

<IN_SINGLE_LINE_COMMENT>
	SPECIAL_TOKEN : 
		{ <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT }

<IN_FORMAL_COMMENT>
	SPECIAL_TOKEN :
		{ <FORMAL_COMMENT: "*/" > : DEFAULT }

<IN_MULTI_LINE_COMMENT>
	SPECIAL_TOKEN : 
		{ <MULTI_LINE_COMMENT: "*/" > : DEFAULT }

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
	MORE :
	{ < ~[] > }

/*****************************************************************************
 * RESERVED KEYWORDS AND LITERALS                                            *
 *****************************************************************************/
TOKEN:
	{ < ALL: "all" > | 
	  < CONSTRUCTORS: "constructors" > | 
	  < FAIL: "fail" > |
	  < ID: "id" > | 
	  < IN: "in" > | 
	  < LET: "let" > |
	  < MODULE: "module" > |
	  < NOT: "not" > | 
	  < ONE: "one" > |
	  < ON: "on" > |
	  < CALL: "call" > |
	  < PROCEED: "proceed" > |
	  < SIGNATURES: "signatures" > |
	  < SPECIFICATION: "specification" > |
	  < WITH: "with" > |
	  < OVERLAYS: "overlays" > | 
	  < PRIM: "prim" > |
	  < RULES: "rules" > | 
	  < SCRIPT: "script" > | 
	  < SIGNATURE: "signature" > | 
	  < SOME: "some" > | 
	  < SORTS: "sorts" > | 
	  < STRATEGIES: "strategies" > | 
	  < STRATEGO: "stratego" > | 
	  < TEST: "test" > | 
	  < WHERE: "where" > | 
	  < IMPORTTERM: "import-term" > | 
	  < IMPORTS: "imports" > | 
	  < EXPORTS: "exports" > |
	  < CASE: "case" > |
	  < ELSE: "else" > | 
	  < END: "end" > | 
	  < EXTERNAL: "external" > | 
	  < IF: "if" > |
	  < OTHERWISE: "otherwise" > | 
	  < REC: "rec" > | 
	  < SWITCH: "switch" > | 
	  < THEN: "then" > | 
	  < EXTEND: "extend" > | 
	  < OVERRIDE: "override" > |
	  < INTERNAL: "internal" > | 
	  < SEALED: "sealed" > | 
	  < EXTENSIBLE: "extensible" > |
	  < OVERRIDABLE: "overrideable" >
	}

/*****************************************************************************
 * LITERALS                                                                  *
 *****************************************************************************/
TOKEN :
	{ < INTEGER_LITERAL:
		<DECIMAL_LITERAL> (["l","L"])? | 
	  	<HEX_LITERAL> (["l","L"])? | 
	  	<OCTAL_LITERAL> (["l","L"])? > |
	  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* > |
	  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ > |
	  < #OCTAL_LITERAL: "0" (["0"-"7"])* > |
	  < FLOATING_POINT_LITERAL:
    	(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | 
    	"." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | 
    	(["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | 
    	(["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"] > |
	  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > |
	  < CHARACTER_LITERAL:
	  	"'" ( (~["'","\\","\n","\r"]) | 
			("\\"
				( ["n","t","b","r","f","u","\\","'","\""] | 
				  ["0"-"7"] ( ["0"-"7"] )? | 
				  ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) ) "'" > |
	  < STRING_LITERAL:
    	"\"" ( (~["\"","\\","\n","\r"]) | 
			("\\"
				( ["n","t","b","r","f","u","\\","'","\""] | 
				  ["0"-"7"] ( ["0"-"7"] )? | 
				  ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "\"" >
	}

/*****************************************************************************
 * IDENTIFIERS                                                               *
 *****************************************************************************/
TOKEN :
	{ < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* > |
	  < LETTER: <LCCHAR>|<UCCHAR>|<APOSTROPHE>|<DOT>|<LOWLINE>|<MINUS> > |
	  < LCCHAR: [ "\u0061"-"\u007a" ] > |
	  < UCCHAR: [ "\u0041"-"\u005a" ] > |
	  < APOSTROPHE: [ "\u0027" ] > |
	  < DOT: [ "\u002e" ] > |
	  < LOWLINE: [ "\u005f" ] > |
	  < MINUS: [ "\u002d" ] > |
	  < DIGIT: [ "\u0030"-"\u0039" ] >
	}

/*****************************************************************************
 * SEPARATORS                                                                *
 *****************************************************************************/
TOKEN :
	{ < LPAREN: "(" > | 
	  < RPAREN: ")" > | 
	  < LBRACE: "{" > | 
	  < RBRACE: "}" > | 
	  < LBRACKET: "[" > | 
	  < RBRACKET: "]" > | 
	  < COMMA: "," > 
	}

/*****************************************************************************
 * OPERATORS                                                                *
 *****************************************************************************/
TOKEN :
	{ < PLUS: "+" > |
	  < STAR : "*" > |
	  < SLASH: "/" >
	}

/*****************************************************************************
 * THE STRATEGO LANGUAGE GRAMMAR STARTS HERE                                 *
 *****************************************************************************/
GRAMMARSTART
 
/*****************************************************************************
 * MAIN PRODUCTION                                                           *
 *****************************************************************************/
Module : 
	ModuleContent 
	<EOF> ;


ModuleContent : 
	"module" ModName ( Decl )* |
	"specification" ( Decl )* ;

ModName :
	ModNamePart ( LOOK_AHEAD(2) "/" ModNamePart )* ;

ModNamePart : 
	Id ;

ImportModName : 
	ModName ;

NatInteger : 
	<INTEGER_LITERAL> ;

RealDigit: 
	<INTEGER_LITERAL> <DOT> <INTEGER_LITERAL> ;

Int : 
	[<MINUS>] NatInteger ;

Real : 
	[<MINUS>] RealDigit ;

String : 
	<STRING_LITERAL> ;

Char :
	<CHARACTER_LITERAL> ;

Decl : 
	"imports" ( ImportModName )* |
	"strategies" ( Def )* |
	"exports" ( Sdecl )* |
	"signatures" ( Sdecl )* |
	"rules" ( Def )* |
	"overlays" ( Overlay )* ;

Overlay :
	LOOK_AHEAD(2)
	Id "=" Term |
	Id "(" (Id ",")* ")" "=" Term ;

Def :
	LOOK_AHEAD(2)
	StrategyDef |
	LOOK_AHEAD(3)
	( Anno )+ StrategyDef |
	( Anno )+ RuleDef |
	RuleDef ;

RuleDef :
	LOOK_AHEAD(2)
	Id ":" Rule |
	Id "(" (Typedid ",")* ")" ":" Rule |
	"|" (Typedid ",")* ")" ":" Rule ;

Rule :
	LOOK_AHEAD(3)
	Term "->" Term |
	LOOK_AHEAD(3)
	Term "->" Term "where" Strategy |
	Term "->" Term ( RuleCond )+ ;

RuleCond :
	"where" Strategy |
	"with" Strategy ;

Sdecl : 
	"sorts" ( Sort )* |
	"constructors" ( Opdecl )* ;

Opdecl : 
	LOOK_AHEAD(2)
	[External] Id ":" Type |
	LOOK_AHEAD(2)
	[External] String ":" Type |
	[External] ":" Type ;

External:
	"external" ;

Id :
	<IDENTIFIER> ;

SVar : 
	Id ;

Var : 
	Id ;

Sort :
	Id [Sorts] ;

Sorts :
	"(" (Sort ",")* ")" |
	LOOK_AHEAD(3)
	"[" (Sort ",")* "]" |
	"[" (Sort ",")* "|" Sort "]";

EmptyId :
	<NONE> ;

StrategyDef : 
	LOOK_AHEAD(2)
	Id "=" Strategy |
	LOOK_AHEAD(3)
	Id "(" (Typedid ",")* ")" "=" Strategy |
	Id "(" (Typedid ",")* "|" (Typedid ",")* ")" "=" Strategy |
	LOOK_AHEAD(3)
	"external" Id "(" (Typedid ",")* "|" (Typedid ",")* ")" "=" Strategy |
	LOOK_AHEAD(2)
	"external" Id "(" (Typedid ",")* "|" (Typedid ",")* ")" |
	"external" EmptyId "(" (Typedid ",")* "|" (Typedid ",")* ")" ;

Anno : 
	"extend" | 
	"override" |
	"internal" ;

Typedid :
	Id ":" Type ;

Type :
	LOOK_AHEAD(3)
	FunType | 
	ConstType ;

FunType :
	(ArgType "*")+ "->" RetType ;

ArgType :
	"(" Type ")" |
	ConstType ;

RetType :
	Type ;

ConstType :
	Sort ;

Strategy :
	"let" ( Def )* "in" Strategy "end" |
	LOOK_AHEAD(3)
	SVar "(" (Strategy ",")* "|" (Term ",")* ")" |
	LOOK_AHEAD(2)
	SVar "(" (Strategy ",")* ")" |
	"call" "(" Term "|" (Strategy ",")* "|" (Term ",")* ")" |
	LOOK_AHEAD(2)
	"proceed" "(" (Strategy ",")* "|" (Term ",")* ")" |
	LOOK_AHEAD(2)
	"proceed" "(" (Strategy ",")+ ")" |
	"fail" |
	"id" |
	"proceed" |
	"?" Term |
	"!" Term |
	LOOK_AHEAD(3)
	"{" (Id ",")* ":" Strategy "}" |
	LOOK_AHEAD(2)
	"(" Strategy ")" |
	LOOK_AHEAD(2)
	"(" Strategy "," (Strategy ",")+ ")" |
	LOOK_AHEAD(2)
	"(" <NONE> ")" |
	"{" Strategy "}" |
	LOOK_AHEAD(3)
	"[" (Strategy ",")* "]" |
	LOOK_AHEAD(3)
	"[" (Strategy ",")* "|" Strategy "]" |
	LOOK_AHEAD(3)
	"<" Strategy ">" |
	LOOK_AHEAD(3)
	"<" Strategy ">" Term |
	LOOK_AHEAD(3)
	"prim" "(" String "," (Strategy ",")* "|" (Term ",")* ")" |
	LOOK_AHEAD(3)
	"prim" "(" String "," (Term ",")* ")" |
	"some" "(" Strategy ")" |
	"one" "(" Strategy ")" |
	"all" "(" Strategy ")" |
	"rec" Id "(" Strategy ")" |
	"not" "(" Strategy ")" |
	"where" "(" Strategy ")" |
	"with" "(" Strategy ")" |
	"test" "(" Strategy ")" |
	"prim" "(" Strategy ")" |
	"import-term" "(" ModName ")" |
	LOOK_AHEAD(2)
	String |
	LOOK_AHEAD(3)
	Int |
	LOOK_AHEAD(3)
	Real |
	Char |
	LOOK_AHEAD(2)
	SVar |
	"\\" Rule "\\" |
	LOOK_AHEAD(3)
	"(" Rule ")" |
	LOOK_AHEAD(3)
	String "(" (Strategy ",")* ")" |
	LOOK_AHEAD(3)
	"if" Strategy "then" Strategy "else" Strategy "end" |
	"if" Strategy "then" Strategy "end" |
	LOOK_AHEAD(3)
	"switch" Strategy ( SwitchCase )* "end" |
	"switch" Strategy ( SwitchCase )* "otherwise" ":" Strategy "end" |
	Term ":=" Term |
	"{|" ScopeLabels ":" Strategy "|}" |
	"rules" "(" ( DynRuleDef )* ")" |
	"/" RuleNames "\\*"  Strategy ;
	/* Linksrekursion: muss umgeschrieben werden!
	Strategy ";" Strategy |
	Strategy "<" StrategyMid "+" Strategy |
	Strategy "{" Strategy "}" |
	Strategy "#" "(" Strategy ")" |
	Strategy "+" Strategy |
	Strategy "+>" Strategy |
	Strategy "=>" Term |
	Strategy "<+" Strategy |
	Strategy "/" RuleNames "\\" Strategy |
	Strategy "\\" RuleNames "/" Strategy |
	Strategy "/" RuleNames "\\" RuleNames "/" Strategy ;*/

RuleNames : 
	(Id ",")+ | 
	"~" Term ;

DynRuleDef : 
	LOOK_AHEAD(3)
	Id "+" Term |
	LOOK_AHEAD(3)
	DynRuleId ":-" Term |
	LOOK_AHEAD(3)
	DynRuleId ":" Rule |
	LOOK_AHEAD(3)
	DynRuleId ":+" Rule |
	LOOK_AHEAD(3)
	DynRuleId ":" Term |
	LOOK_AHEAD(3)
	DynRuleId ":=" Term |
	LOOK_AHEAD(3)
	DynRuleId ":+=" Term |
	DynRuleId ":" Rule "depends " "on" Term ;

DynRuleId : 
	LOOK_AHEAD(3)
	RuleDec <DOT> Term |
	LOOK_AHEAD(3)
	RuleDec "+" Term |
	RuleDec ;

RuleDec : 
	LOOK_AHEAD(3)
	Id |
	LOOK_AHEAD(3)
	Id "(" (Typedid ",")* ")" |
	Id "(" (Typedid ",")* "|" (Typedid ",")* ")" ;

ScopeLabels : 
	(DynRuleScopeId ",")+ | 
	"~" Term ;

DynRuleScopeId :
	LOOK_AHEAD(2)
	Id <DOT> Term | 
	Id ;

SwitchCase : 
	"case" Strategy ":" Strategy ;

StrategyMid :
	Strategy ;

Term :
	LOOK_AHEAD(2)
	Var |
	LOOK_AHEAD(2)
	Wld |
	LOOK_AHEAD(2)
	PreTerm "{^" PreTerm "}" |
	LOOK_AHEAD(3)
	PreTerm "{" (Term ",")* "}" |
	LOOK_AHEAD(2)
	PreTerm |
	Var "@" Term |
	<LOWLINE> Term |
	LOOK_AHEAD(3)
	"<" Strategy ">" Term |
	"<" Strategy ">" ;

PreTerm :
	LOOK_AHEAD(3)
	Int |
	Real |
	LOOK_AHEAD(2)
	String |
	LOOK_AHEAD(2)
	Id "(" (Term ",")* ")" |
	String "(" (Term ",")* ")" |
	"(" (Term ",")* ")" |
	LOOK_AHEAD(3)
	"[" (Term ",")* "]" |
	"[" (Term ",")* "|" Term "]" ;
	/* Linksrekursion: muss umgeschrieben werden!
	Term "#" "(" Term ")" ;*/

Wld :
	<LOWLINE> ;

Strat : 
	Id "(" (Strat ",")* ")" ;