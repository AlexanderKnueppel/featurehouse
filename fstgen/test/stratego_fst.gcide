options {
	STATIC = false;
}

PARSER_BEGIN(StrategoParser)
package tmp.generated_stratego;

/* Wird glaub ich nicht benötigt! 
import java.io.*;
import java.util.*; 
*/

import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class StrategoParser extends AbstractFSTParser 
{
	public StrategoParser(){}
}

PARSER_END(StrategoParser)

/* WHITE SPACE */
SPECIAL_TOKEN : 
	{ " " | 
      "\t" | 
      "\n" | 
      "\r" | 
      "\f" 
    }

/* COMMENTS */
MORE : 
	{ "//" : IN_SINGLE_LINE_COMMENT |
      <"/**" ~["/"]> 
      	{ input_stream.backup(1); } : IN_FORMAL_COMMENT |
      "/*" : IN_MULTI_LINE_COMMENT
	}

<IN_SINGLE_LINE_COMMENT>
	SPECIAL_TOKEN : 
		{ <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT }

<IN_FORMAL_COMMENT>
	SPECIAL_TOKEN :
		{ <FORMAL_COMMENT: "*/" > : DEFAULT }

<IN_MULTI_LINE_COMMENT>
	SPECIAL_TOKEN : 
		{ <MULTI_LINE_COMMENT: "*/" > : DEFAULT }

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
	MORE :
	{ < ~[] > }

/* Reserved words and literals*/
TOKEN:
	{ < ALL: "all" > | 
	  < CONSTRUCTORS: "constructors" > | 
	  < FAIL: "fail" > |
	  < ID: "id" > | 
	  < IN: "in" > | 
	  < LET: "let" > |
	  < MODULE: "module" > |
	  < NOT: "not" > | 
	  < ONE: "one" > | 
	  < OVERLAYS: "overlays" > | 
	  < PRIM: "prim" > |
	  < RULES: "rules" > | 
	  < SCRIPT: "script" > | 
	  < SIGNATURE: "signature" > | 
	  < SOME: "some" > | 
	  < SORTS: "sorts" > | 
	  < STRATEGIES: "strategies" > | 
	  < STRATEGO: "stratego" > | 
	  < TEST: "test" > | 
	  < WHERE: "where" > | 
      < IMPORTTERM: "import-term" > | 
      < IMPORTS: "imports" > | 
      < CASE: "case" > |
	  < ELSE: "else" > | 
	  < END: "end" > | 
	  < EXTERNAL: "external" > | 
	  < IF: "if" > |
	  < OTHERWISE: "otherwise" > | 
	  < REC: "rec" > | 
	  < SWITCH: "switch" > | 
	  < THEN: "then" > | 
	  < EXTEND: "extend" > | 
	  < OVERRIDE: "override" > |
	  < INTERNAL: "internal" > | 
	  < SEALED: "sealed" > | 
	  < EXTENSIBLE: "extensible" > |
	  < OVERRIDABLE: "overrideable" >
	}

/* LITERALS */
TOKEN :
	{ < INTEGER_LITERAL:
		<DECIMAL_LITERAL> (["l","L"])? | 
	  	<HEX_LITERAL> (["l","L"])? | 
	  	<OCTAL_LITERAL> (["l","L"])? > |
	  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* > |
	  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ > |
	  < #OCTAL_LITERAL: "0" (["0"-"7"])* > |
	  < FLOATING_POINT_LITERAL:
    	(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | 
    	"." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | 
    	(["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | 
    	(["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"] > |
	  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > |
	  < CHARACTER_LITERAL:
	  	"'" ( 
	  		(~["'","\\","\n","\r"]) | 
				("\\"
					( ["n","t","b","r","f","u","\\","'","\""] | 
					  ["0"-"7"] ( ["0"-"7"] )? | 
			          ["0"-"3"] ["0"-"7"] ["0"-"7"]
					)
				)
    		)
    	"'" > |
	  < STRING_LITERAL:
    	"\"" (
    		(~["\"","\\","\n","\r"]) | 
				("\\"
					( ["n","t","b","r","f","u","\\","'","\""] | 
					  ["0"-"7"] ( ["0"-"7"] )? | 
					  ["0"-"3"] ["0"-"7"] ["0"-"7"]
            		)
        		)
    		)*
    	"\"" >
	}

/* IDENTIFIERS */
TOKEN :
	{ < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* > |
	  < #LETTER:
	  	[ "\u0024",
	  	  "\u0027",
    	  "\u0041"-"\u005a",
    	  "\u005f",
    	  "\u0061"-"\u007a",
    	  "\u00c0"-"\u00d6",
    	  "\u00d8"-"\u00f6",
    	  "\u00f8"-"\u00ff",
    	  "\u0100"-"\u1fff",
    	  "\u3040"-"\u318f",
    	  "\u3300"-"\u337f",
    	  "\u3400"-"\u3d2d",
    	  "\u4e00"-"\u9fff",
    	  "\uf900"-"\ufaff"
    	] > |
	  < #DIGIT:
    	[ "\u0030"-"\u0039",
		  "\u0660"-"\u0669",
    	  "\u06f0"-"\u06f9",
    	  "\u0966"-"\u096f",
    	  "\u09e6"-"\u09ef",
    	  "\u0a66"-"\u0a6f",
    	  "\u0ae6"-"\u0aef",
    	  "\u0b66"-"\u0b6f",
    	  "\u0be7"-"\u0bef",
    	  "\u0c66"-"\u0c6f",
    	  "\u0ce6"-"\u0cef",
    	  "\u0d66"-"\u0d6f",
    	  "\u0e50"-"\u0e59",
    	  "\u0ed0"-"\u0ed9",
    	  "\u1040"-"\u1049"
    	] >
	}

/* SEPARATORS */
TOKEN :
	{ < LPAREN: "(" > | 
	  < RPAREN: ")" > | 
	  < LBRACE: "{" > | 
	  < RBRACE: "}" > | 
	  < LBRACKET: "[" > | 
	  < RBRACKET: "]" > | 
	  < COMMA: "," > | 
	  < DOT: "." >
	}

/* OPERATORS */
TOKEN :
	{ < PLUS: "+" > | 
	  < MINUS: "-" > | 
	  < STAR : "*" > | 
	  < SLASH: "/" >
	}

GRAMMARSTART
/*****************************************************************************
 * THE STRATEGO LANGUAGE GRAMMAR STARTS HERE                                 *
 *****************************************************************************/
   
/* Stratego-Core-Constants */
Digit : "0" | "1" | "2"| "3"| "4"| "5"| "6"| "7"| "8" | "9";
NatInteger : <INTEGER_LITERAL> ;
RealDigit: <INTEGER_LITERAL> "." <INTEGER_LITERAL> ;

Int : "-" NatInteger | NatInteger ;
Real : "-" RealDigit | RealDigit ;
String : <STRING_LITERAL> ;

/* Stratego-Core-Identifiers */
lowerLetter : "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | 
              "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | 
              "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
upperLetter : "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | 
              "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | 
              "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;

CharClass1 : lowerLetter | 
			 upperLetter | 
			 "." | 
			 "_" ;

CharClass2 : lowerLetter |
			 upperLetter |
			 Digit |
			 "'" |
			 "." |
			 "-" |
			 "_" ;
			 
CharClass3 : lowerLetter | 
			 upperLetter | 
			 "_" ;			 
			 
CharClass4 : lowerLetter |
			 upperLetter |
			 Digit |
			 "'" |
			 "-" |
			 "_" ;			 
				 
/* ModNamePart : CharClass1 CharClass2* ; */				 
ModNamePart : CharClass1 ( CharClass2 )* ;

ModName : (ModNamePart "/")+ ;

Id : CharClass3 ( CharClass4 )* |
     "'" ( lowerLetter )+ ;	
	 
LId : CharClass3 ( CharClass4 )* "*" ;

LCID : lowerLetter ( CharClass4 )* ;
UCID : upperLetter ( CharClass4 )* ;

/* Stratego-Core-Terms */
Var : Id | LId ;
ID : Id | LId ;
Wld : "_" ;

Term : Var |
       Wld |
	   PreTerm "{^" PreTerm "}" |
	   Var "@" Term | 
	   "_" Term |
       PreTerm "{" (Term ",")* "}" |
	   PreTerm |
	   StrategyAngle Term |
	   StrategyAngle |
	   Var "@" Term ;

PreTerm : Var | 
          Wld | 
		  Int | 
		  Real | 
		  String | 
		  Var "@" PreTerm | 
		  Id "(" (Term ",")* ")" |
		  String "(" (Term ",")* ")" |		   
		  "_" PreTerm |
		  StrategyAngle Term |
		  StrategyAngle |
		  "(" (Term ",")* ")" |
		  "[" (Term ",")* "]" |
		  "[" (Term ",")* "|" Term "]" ;
		  /*Term "#" "(" Term ")" */ 

/* Stratego-Core-Signatures */
Sort : LCID |
       UCID |
	   Id "(" (Sort ",")* ")" | 
	   "[" (Sort ",")* "]" |
	   "[" (Sort ",")* "|" Sort "]" |
	   "(" (Sort ",")* ")";
	   
Opdecl : Id ":" Type |
         String ":" Type |
		 ":" Type |
		 "external" Id ":" Type |
		 "external" String ":" Type |
		 "external" ":" Type ;	   
		 
Sdecl : "sorts" ( Sort )* |
		"constructors" ( Opdecl )* ;
		
Type : FunType | ConstType ;		
ConstType : Sort ;
ArgType : "(" Type ")" |
		  ConstType ;
RetType : Type ;		  
FunType : (ArgType "*")+ "->" RetType ;		

/* Stratego-Core-Modules */
Module : "module" ModName ( Decl )* |
         "specification" ( Decl )* ;
		 
ImportModName : ModName ;		 
		 
Decl : "imports" ( ImportModName )* |
       "strategies" ( Def )* |
	   "signatures" ( Sdecl )* |
	   "rules" ( Def )* |
	   "overlays" ( Overlay )* ;		 

/* Stratego-Core-Strategies */
Def : StrategyDef |
      ( Anno )+ StrategyDef |
      RuleDef | 
      ( Anno )+ RuleDef ; 
SVar : Id ;

Strategy : "let" ( Def )* "in" Strategy "end" |
		   SVar "(" (Strategy ",")* "|" (Term ",")* ")" |
		   "call" "(" Term "|" (Strategy ",")* "|" (Term ",")* ")" |
		   "fail" |
		   "id" |
		   "proceed" "(" (Strategy ",")* "|" (Term ",")* ")" |
		   "proceed" |
		   "?" Term |
		   "!" Term |
		   "{" (ID ",")* ":" Strategy "}" |
		   
		   /* Linksrekursion (muss irgendwie umgeschrieben werden!) 
		   Strategy ";" Strategy |
		   Strategy "<" StrategyMid "+" Strategy |
		   Strategy "<+" Strategy |
		   Strategy StrategyCurly |
		   Strategy "+" Strategy |
		   Strategy "+>" Strategy |
		   Strategy "=>" Term |
		   Strategy "/" RuleNames "\\" Strategy |
		   Strategy "\\" RuleNames "/" Strategy */
		   
		   "prim" "(" String "," (Strategy ",")* "|" (Term ",")* ")" |
		   "some" "(" Strategy ")" |
		   "one" "(" Strategy ")" |
		   "all" "(" Strategy ")" |
		   "import-term" "(" ModName ")" |		   
		   SVar "(" (Strategy ",")* ")" |
		   "{" Strategy "}" |
		   StrategyAngle Term |		   
		   "rec" Id "(" Strategy ")" |
		   "not" "(" Strategy ")" |
		   "where" "(" Strategy ")" |
		   "with" "(" Strategy ")" |
		   "test" "(" Strategy ")" |
		   "prim" "(" String ")" |
		   "prim" "(" String "," (Term ",")* ")" |
		   String | Int | Real | 
		   String "(" (Strategy ",")* ")" |
		   "(" Strategy ")" |
		   "(" Strategy "," (Strategy ",")+ ")" |
		   "[" (Strategy ",")* "]" |
		   "[" (Strategy ",")* "|" Strategy "]" |
		   SVar |
		   "\\" Rule "\\" |
		   "(" Rule ")" |
		   "proceed" "(" (Strategy ",")+ ")" |
		   "if" Strategy "then" Strategy "else" Strategy "end" |
		   "if" Strategy "then" Strategy "end" |
		   "switch" Strategy ( SwitchCase )* "end" |
		   "switch" Strategy ( SwitchCase )* "otherwise" ":" Strategy "end" |
		   Term ":=" Term |
		   "{|" ScopeLabels ":" Strategy "|}" |
           "rules" "(" ( DynRuleDef )* ")" 
		   "/" RuleNames "\\*"  Strategy ;		   
		   
StrategyMid : Strategy ;		   
		   
StrategyDef : Id "(" (Typedid ",")* "|" (Typedid ",")* ")" "=" Strategy |
              "external" Id "(" (Typedid ",")* "|" (Typedid ",")* ")" "=" Strategy |
			  "external" Id "(" (Typedid ",")* "|" (Typedid ",")* ")" |
			  "external" EmptyId "(" (Typedid ",")* "|" (Typedid ",")* ")" | 
			  Id "=" Strategy |
			  Id "(" (Typedid ",")* ")" "=" Strategy ;  

EmptyId : <NONE> ;
Typedid : ID ":" Type | ID ;
Anno : "extend" | 
       "override" |
       "internal" ;	   

/* Stratego-Amb */
Strat : Id "(" (Strat ",")* ")" ;

/* Stratego-Sugar-Constants */
/* Char : "'" CharChar "'" ;
CharChar : "\" "'" |
           "\" "n" |
		   "\" "t" |
		   "\" "r" |
		   "\" " " ; */
		     
/* Stratego-Sugar-Overlays */
Overlay : Id "=" Term |
          Id "(" (Id ",")* ")" "=" Term ;

/* Stratego-Sugar-Rules */
RuleDef : Id ":" Rule |
	      Id "(" (Typedid ",")* ")" ":" Rule |
		  Id "(" (Typedid ",")* "|" (Typedid ",")* ")" ":" Rule ;		  

/* Def : ( Anno )+ RuleDef ;*/

Rule : Term "->" Term |
	   Term "->" Term "where" Strategy |
	   Term "->" Term ( RuleCond )+ ;
	   
RuleCond : "where" Strategy |
		   "with" Strategy ;
		   
/* Stratego-Sugar-Signatures */
Kind : "*" | "**" ;

/* Stratego-Sugar-Strategies */
StrategyAngle :  "<" Strategy ">" ;

StrategyCurly :  "{" Strategy "}" ;

SwitchCase : "case" Strategy ":" Strategy ;
		   
/* Stratego-Sugar-DynamicRules */		   
ScopeLabels : (DynRuleScopeId ",")* | "~" Term ;
			  
DynRuleScopeId : Id "." Term | Id ;

RuleNames : (Id ",")* | "~" Term ;

RuleDec : Id |
		  Id "(" (Typedid ",")* ")" |
		  Id "(" (Typedid ",")* "|" (Typedid ",")* ")" ;
		  
DynRuleId : RuleDec "." Term |
			RuleDec "+" Term |
			RuleDec ;
			
DynRuleDef : Id "+" Term |
			 DynRuleId ":-" Term |
			 DynRuleId ":" Rule |
			 DynRuleId ":+" Rule |
			 DynRuleId ":" Term |
			 DynRuleId ":=" Term |
			 DynRuleId ":+=" Term |
			 DynRuleId ":" Rule "depends " "on" Term ;		   

