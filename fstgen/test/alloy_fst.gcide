options {
  STATIC = false;
}

PARSER_BEGIN(AlloyParser)

import cide.gast.*;
import cide.gparser.*;


public class AlloyParser extends AbstractFSTParser
{
 	public AlloyParser(){}
}

PARSER_END(AlloyParser)

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{


      < LARROW: "->"> | < INT: "int"> | < INTT: "Int"> | < AND: "&">  | < COLON: ":" >

 	  | < AT: "@" >| < IN: "in" > | < EXACTLY: "exactly" > | < EXPECT: "expect" >

      | < ALL: "all" > | < NO: "no" > | < LONE: "lone" > | < SOME: "SOME" >

      | < ONE: "one" > | < SET: "set" > | < OPEN: "open" > | < AS: "as" >

      | < ABSTRACT: "abstract"> | < SIG: "sig"> | < EXTENDS: "extends">

      | < ENUM: "enum" > | < FACT: "fact" > | < ASSERT: "assert" > | < UNIV: "univ" >

      | < THIS: "this" > | < SEQINT: "seq/Int" > | < PRIVATE: "private" > | < DISJ: "disj" >

      | < FUN: "fun" >  | < PRED: "pred" > | < FOR: "for" > | < BUT: "but" > | < RUN: "run" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
}

GRAMMARSTART

DigitNo0 : "1" | "2" |  "3" | "4" |"5" |"6" |"7" |"8" | "9" ;

Digit : DigitNo0 | "0" ;

NatInteger : DigitNo0 (Digit)* ;

Integer : "-" DigitNo0 (NatInteger)* | DigitNo0 (NatInteger)*;

Specification : 
	[Module] 
	(Open)* 
	(Paragraph)*
	<EOF>
	;

Module : "module" Name  [ ExactlyClause ] ;

ExactlyClause : "["  [<EXACTLY>] Name  (ExactlyClauseListElement)* "]" ;

ExactlyClauseListElement : "," [<EXACTLY>] NatInteger ;

Open : [<PRIVATE>] <OPEN>  Name  [RefClause]  [ AsClause ] ;

RefClause :  "[" Ref ( "," Ref )+ "]" ;

AsClause : "as" Name ;

Paragraph : FactDecl | AssertDecl | FunDecl | CmdDecl | EnumDecl | SigDecl ;

FactDecl : "fact" [Name] Block ;

AssertDecl : "assert" [Name] Block ;

FunDecl : [<PRIVATE>] "fun" [Ref "."] Name "(" Decl ("," Decl)* ")" ":" Expr Block
         |[<PRIVATE>] "fun" [Ref "."] Name ":" Expr Block
         |[<PRIVATE>] "pred" [Ref "."] Name "(" Decl ("," Decl)* ")" Block
         |[<PRIVATE>] "pred" [Ref "."] Name Block ;

CmdDecl :[ Name ":" ] [ RunOrCheck ] [ NameOrBlock ] Scope ;

RunOrCheck : "run" | "check" ;

NameOrBlock : Name | Block ;

Scope :  "for" NatInteger [ <EXPECT> ]
       | "for" NatInteger "but" TypeScope ("," TypeScope)+ [ <EXPECT> ]
       | "for" TypeScope ("," TypeScope)+ [ <EXPECT> ]
       | [ <EXPECT> ] ;

TypeScope : [ <EXACTLY> ] NatInteger [ TypeScopeClause ] ;

TypeScopeClause : Name | "int" | "seq" ;

SigDecl : (SigQual)* "sig" Name (Name ",")+ [SigExt] "{" Decl ("," Decl)* "}" [Block] ;

EnumDecl : "enum" Name "{" Name  ( "," Name )*  "}" ;

SigQual : "abstract" | "lone" | "one" | "some" | "private" ;

SigExt : "extends" Ref | "in" Ref ( "+" Ref )* ;

Expr : "let" LetDecl ("," LetDecl)+ BlockOrBar
       | Quant Decl ("," Decl)+ BlockOrBar
       | UnOp Expr
       | Expr BinOp   Expr
       | Expr ArrowOp Expr
       | Expr [ NotClause ] "?" CompareOp Expr
       | Expr [ ImpliesClause ] Expr "else" Expr
       | Expr "[" Expr ("," Expr)* "]"
       | NatInteger
       | "-" NatInteger
       | "none"
       | "iden"
       | "univ"
       | "Int"
       | "seq/Int"
       | "(" Expr ")"
       | [<AT>] Name
       | Block
       | "{" Decl ("," Decl)+ BlockOrBar "}" ;

NotClause : "!" | "not" ;

ImpliesClause : "=>" | "implies" ;
Decl : [ <PRIVATE> ] [ <DISJ> ] Name ("," Name)+ ":" [ <DISJ> ] Expr ;

LetDecl : Name "=" Expr ;

Quant : "all" | "no" | "some" | "lone" | "one" | "sum" ;

BinOp : "||" | "or" | "&&" | "and" | "&" | "<=>" | "iff"
        | "=>" | "implies" | "+" | "-" | "++" | "<:" | ":>" | "." | "<<" | ">>" | ">>>" ;

ArrowOp :  [ArrowOpClause] "->" [ArrowOpClause] ;

ArrowOpClause : "some" | "one" | "lone" | "set" ;

CompareOp : "=" | "in" | "<" | ">" | "=<" | ">=" ;

UnOp : "!" | "not" | "no" | "some" | "lone" | "one" | "set" | "seq" | "#" | "~" | "*" | "^" ;

Block : "{" (Expr)* "}" ;

BlockOrBar : Block | "|" Expr ;

Name : [ NameClause ] ( "/" <IDENTIFIER> )* ;

NameClause : "this" | <IDENTIFIER> ;

Ref : Name | "univ" | "Int" | "seq/Int" ;
