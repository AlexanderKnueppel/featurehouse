/* Generated By:JavaCC: Do not edit this line. PHaskellParser.java */
package tmp.generated_phaskell;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.AbstractFSTParser;

  public class PHaskellParser  extends AbstractFSTParser implements PHaskellParserConstants {

        /**
	 * Append the given {@link Token} and any preceding special tokens to a
	 * given {@link StringBuffer}.
	 * 
	 * @param token
	 *            the given JavaCC {@link Token} object
	 * @param buffer
	 *            the buffer to which to append <code>token</code>
	 */
        final private static void accumulate(Token token, StringBuffer buffer) {

                // Append preceding special tokens to <code>buffer</code>:
                //
                Token special = firstSpecial(token);
                if (special != token)
                        while (special != null) {
                                buffer.append(special.toString());
                                special = special.next;
                        }

                // Finally, append the token itself:
                //
                buffer.append(token.toString());
        }

        /**
	 * Accumulate {@list Token} objects from the token stream, respecting nested
	 * code inside <code>open</code> and <code>close</code> pairs, until an
	 * unmatched <code>close</code> is the next token in the stream. This
	 * method assumes that an <code>open</code> token has just been read from
	 * the stream so the initial nesting level is 1. The method returns when a
	 * matching <code>close</code> token is the next token in the token
	 * stream. <em>The <code>close</code> token is left in the stream!</em>
	 * 
	 * @return the accumulated tokens as a {@link String}.
	 * 
	 * @throws ParseException
	 *             if an end-of-file is found before an unmatched
	 *             <code>close</code> token.
	 */
        final private Token accumulateNestedRegion(int open, int close)
                        throws ParseException {

                StringBuffer buffer = new StringBuffer();
                Token token = getToken(1);

                // Initialize result with known information (starting position, etc.):
                //
                Token result = Token.newToken(UNANTICIPATED_SYMBOL);
                result.specialToken = null;

                Token startToken = firstSpecial(token);
                result.beginColumn = startToken.beginColumn;
                result.beginLine = startToken.beginLine;
                result.offset=startToken.offset;

                // Accumulate tokens until a <code>close</code> token is found:
                //
                for (int nesting = 1; nesting > 0;) {


                        if (token.kind == EOF)
                                throw new ParseException("accumulating from line "
                                                + result.beginLine + " at column " + result.beginColumn
                                                + ": EOF reached before ending " + tokenImage[close]
                                                + " found");

                        if (token.kind == open)
                                ++nesting;
                        else if (token.kind == close) {
                                if (nesting == 1)
                                        break;
                                --nesting;
                        }

                        // Update information in result:
                        //
                        result.endColumn = token.endColumn;
                        result.endLine = token.endLine;
                        result.length=(token.offset-result.offset)+token.length;
                        result.next = token.next;

                        accumulate(token, buffer);
                        getNextToken();
                        token = getToken(1);
                }

                result.image = buffer.toString();
                return result;
        }


        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind) throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind });
        }

        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind1, int endTokenKind2) throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
                                endTokenKind2 });
        }

        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind1, int endTokenKind2, int endTokenKind3)
                        throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
                                endTokenKind2, endTokenKind3 });
        }
        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int endTokenKind1, int endTokenKind2, int endTokenKind3, int endTokenKind4)
                        throws ParseException {
                return accumulateUntil(considerInnerBlocks, new int[] { endTokenKind1,
                                endTokenKind2, endTokenKind3, endTokenKind4 });
        }

        final private boolean isNot(int kind) {
                return getToken(1).kind != kind;
        }

        final private boolean isNot(int k1, int k2) {
                return isNot(k1) && isNot(k2);
        }

        final private boolean isNot(int k1, int k2, int k3) {
                return isNot(k1, k2) && isNot(k3);
        }
        final private boolean isNot(int k1, int k2, int k3, int k4) {
                return isNot(k1, k2, k3) && isNot(k4);
        }

        /** returns true if the CONTEXT_ARROW is found before the SEMICOLON **/
        final private boolean isContext() throws ParseException {
                int lookahead=1;
                while (true) {
                        Token t = getToken(lookahead);
                        if (t.kind==EOF) throw new ParseException("EOF found before ; or =>  (line " + token.beginLine
                                                + ", column " + token.beginColumn
                                                + ")");
                        if (t.kind==SEMICOLON) return false;
                        if (t.kind==CONTEXT_ARROW) return true;
                        lookahead++;
                }
        }

        /**
	 * Accumulate {@link Token} objects from the token stream until a token
	 * matching <code>tokenKind</code> is consumed from the stream. The tokens
	 * are accumulated in <code>buffer</code>, NOT including the terminating
	 * token.
	 * 
	 * @return a {@link Token} formed by concatenating all intervening tokens
	 *         and special tokens.
	 */
        final private Token accumulateUntil(boolean considerInnerBlocks,
                        int[] endTokenKinds) throws ParseException {

                StringBuffer buffer = new StringBuffer();
                Token token = getToken(1);

                // Initialize result with known information (starting position, etc.):
                //
                Token result = Token.newToken(UNANTICIPATED_SYMBOL);
                result.specialToken = null;

                Token startToken = firstSpecial(token);
                result.beginColumn = startToken.beginColumn;
                result.beginLine = startToken.beginLine;
                result.offset=startToken.offset;

                // Accumulate tokens until a <code>tokenKind</code> token is found:
                //
                int nesting=0;
                while (!contains(endTokenKinds, token.kind) || nesting >0) {
                        // Update information in result:
                        //
                        result.endColumn = token.endColumn;
                        result.endLine = token.endLine;
                        result.next = token.next;
                        result.length=(token.offset-result.offset)+token.length;

                        if (token.kind == EOF)
                                throw new ParseException("from line " + result.beginLine
                                                + " at column " + result.beginColumn
                                                + ": EOF reached before " + images(endTokenKinds)
                                                + " found");

                        if (considerInnerBlocks && token.kind == LEFT_CURLY)
                                ++nesting;
                        else if (considerInnerBlocks && token.kind == RIGHT_CURLY) {
                                --nesting;
                        }

                        accumulate(token, buffer);
                        getNextToken();
                        token = getToken(1);
                }

                if (buffer.length() == 0)
                        throw new ParseException("syntax error - empty pseudo-match (line " + result.beginLine
                                                + ", column " + result.beginColumn
                                                + ")");

                result.image = buffer.toString();
                return result;
        }

        private String images(int[] endTokenKinds) {
                String result = "";
                for (int i : endTokenKinds)
                        result += tokenImage[i] + " ";
                return result;
        }

        private boolean contains(int[] endTokenKinds, int kind) {
                for (int i : endTokenKinds)
                        if (i == kind)
                                return true;
                return false;
        }

    /**
     * Finds the first token, special or otherwise, in the list of special
     * tokens preceding this {@link Token}.  If this list is non-empty, the
     * result will be a special token.  Otherwise, it will be the starting
     * token.
     *
     * @param token the given {@link Token}.
     * @return the first special token preceding <code>token</code>.
     **/
    final private static Token firstSpecial (Token token) {

        while (token.specialToken != null)
            token = token.specialToken ;

        return token ;
    }

  Token findListContent() throws ParseException {
    return accumulateNestedRegion(LEFT_PAREN, RIGHT_PAREN) ;
  }

  Token findBlockContent() throws ParseException {
    return accumulateNestedRegion (LEFT_CURLY, RIGHT_CURLY) ;
  }

  Token findConRest() throws ParseException {
        //(block | ~(SEMICOLON|ALT|RIGHT_CURLY))*
    return accumulateUntil(true,SEMICOLON,ALT,RIGHT_CURLY,DERIVING) ;
  }

  Token findNonstddeclRest() throws ParseException {
        //(block | ~(SEMICOLON|RIGHT_CURLY))+
    return accumulateUntil(true,SEMICOLON,RIGHT_CURLY) ;
  }

  Token findUntilSemiOrCCB() throws ParseException {
        //~(SEMICOLON | RIGHT_CURLY)*
    return accumulateUntil(false,SEMICOLON,RIGHT_CURLY) ;
  }

  Token findUntilSemiOrContextArrow() throws ParseException {
        //(~(CONTEXT_ARROW|SEMICOLON))*;
    return accumulateUntil(false,CONTEXT_ARROW,SEMICOLON) ;
  }

  Token findUntilSemiOrEquals() throws ParseException {
        //~(EQUALS|SEMICOLON))*
    return accumulateUntil(false,SEMICOLON,EQUALS) ;
  }

  Token findUntilEquals() throws ParseException {
        //~(EQUALS))*
    return accumulateUntil(false,EQUALS) ;
  }

  final public FSTInfo module(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(MODULE);
    n = modid(true);
                                replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      n = exports(true);
                                                                   replaceName(n);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(WHERE);
    n = body(true);
                                                                                                           replaceName(n);
    jj_consume_token(0);
                                                                                                                                   {if (true) return productionEndTerminal("module","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qconid(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CONSTRUCTOR_ID);
                          {if (true) return productionEndTerminal("qconid","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exports(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LEFT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case LEFT_PAREN:
      n = exportsList(true);
                                  replaceName(n);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_PAREN);
                                                                {if (true) return productionEndTerminal("exports","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo exportsList(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = export(true);
                        replaceName(n);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(COMMA);
      n = export(true);
                                                                           replaceName(n);
    }
                                                                                               {if (true) return productionEndTerminal("exportsList","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo export(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE_ID:
    case LEFT_PAREN:
      n = qvar(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("export1","-","-","Replacement",first,token);}
      break;
    case CONSTRUCTOR_ID:
      n = qtyconorcls(true);
                             replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        n = details(true);
                                                                replaceName(n);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
                                                                                   {if (true) return productionEndTerminal("export2","-","-","Replacement",first,token);}
      break;
    case MODULE:
      jj_consume_token(MODULE);
      n = modid(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("export3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo details(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_2(2)) {
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(VARSYM);
      jj_consume_token(RIGHT_PAREN);
                                        {if (true) return productionEndTerminal("details1","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        jj_consume_token(LEFT_PAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR_ID:
        case VARIABLE_ID:
          n = cnamelist(true);
                                replaceName(n);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(RIGHT_PAREN);
                                                       {if (true) return productionEndTerminal("details2","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo cnamelist(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = cname(true);
                       replaceName(n);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      n = cname(true);
                                                            replaceName(n);
    }
                                                                                {if (true) return productionEndTerminal("cnamelist","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qtyconorcls(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = qconid(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("qtyconorcls","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo cname(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE_ID:
      jj_consume_token(VARIABLE_ID);
                       {if (true) return productionEndTerminal("cname1","-","-","Replacement",first,token);}
      break;
    case CONSTRUCTOR_ID:
      jj_consume_token(CONSTRUCTOR_ID);
                          {if (true) return productionEndTerminal("cname2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qvar(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE_ID:
      n = qvarid(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("qvar1","-","-","Replacement",first,token);}
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      n = qvarsym(true);
                             replaceName(n);
      jj_consume_token(RIGHT_PAREN);
                                                   {if (true) return productionEndTerminal("qvar2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qvarid(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(VARIABLE_ID);
                       {if (true) return productionEndTerminal("qvarid","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo qvarsym(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(VARSYM);
                  {if (true) return productionEndTerminal("qvarsym","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo modid(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = qconid(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("modid","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo conid(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CONSTRUCTOR_ID);
                          {if (true) return productionEndTerminal("conid","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo body(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_3(2)) {
      jj_consume_token(LEFT_CURLY);
      n = impdecls(true);
                                           replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        n = topdecls(true);
                                                                                   replaceName(n);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(RIGHT_CURLY);
                                                                                                          {if (true) return productionEndTerminal("body1","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_CURLY:
        jj_consume_token(LEFT_CURLY);
        n = topdecls(true);
                              replaceName(n);
        jj_consume_token(RIGHT_CURLY);
                                                    {if (true) return productionEndTerminal("body2","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo impdecls(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = impdecl(true);
                         replaceName(n);
    label_3:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(SEMICOLON);
      n = impdecl(true);
                                                                             replaceName(n);
    }
                                                                                                 {if (true) return productionEndTerminal("impdecls","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo impdecl(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT:
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUALIFIED:
        jj_consume_token(QUALIFIED);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      n = modid(true);
                                               replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        n = modid(true);
                                                                                     replaceName(n);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HIDING:
      case LEFT_PAREN:
        n = impspec(true);
                                                                                                                         replaceName(n);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
                                                                                                                                            {if (true) return productionEndTerminal("impdecl1","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[15] = jj_gen;
          {if (true) return productionEndTerminal("impdecl2","-","-","Replacement",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo impspec(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HIDING:
      jj_consume_token(HIDING);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(LEFT_PAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRUCTOR_ID:
    case VARIABLE_ID:
    case LEFT_PAREN:
      n = imports(true);
                                          replaceName(n);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(RIGHT_PAREN);
                                                                 {if (true) return productionEndTerminal("impspec","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo imports(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = imp(true);
                     replaceName(n);
    label_4:
    while (true) {
      if (jj_2_5(2147483647)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(COMMA);
      n = imp(true);
                                                                             replaceName(n);
    }
                                                                                                 {if (true) return productionEndTerminal("imports","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo imp(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE_ID:
    case LEFT_PAREN:
      n = var(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("imp1","-","-","Replacement",first,token);}
      break;
    case CONSTRUCTOR_ID:
      n = tyconorcls(true);
                            replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        n = list(true);
                                                            replaceName(n);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
                                                                               {if (true) return productionEndTerminal("imp2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo tyconorcls(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = conid(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("tyconorcls","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo topdecls(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = topdecl(true);
                         replaceName(n);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
      jj_consume_token(SEMICOLON);
      n = topdecl(true);
                                                                replaceName(n);
    }
                                                                                    {if (true) return productionEndTerminal("topdecls","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo topdecl(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      jj_consume_token(TYPE);
      n = simpletype(true);
                                   replaceName(n);
      n = declrhs(true);
                                                                     replaceName(n);
                                                                                       {if (true) return productionEndTerminal("typedecl","-","-","Replacement",first,token);}
      break;
    case DATA:
      jj_consume_token(DATA);
      n = optContext(true);
                                   replaceName(n);
      n = simpletype(true);
                                                                        replaceName(n);
      jj_consume_token(EQUALS);
      n = constrs(true);
                                                                                                              replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DERIVING:
        n = deriving(true);
                                                                                                                                                  replaceName(n);
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
                                                                                                                                                                     {if (true) return productionEndTerminal("datadecl","-","-","Replacement",first,token);}
      break;
    case NEWTYPE:
      jj_consume_token(NEWTYPE);
      n = optContext(true);
                                      replaceName(n);
      n = simpletype(true);
                                                                           replaceName(n);
      n = declrhs(true);
                                                                                                             replaceName(n);
                                                                                                                               {if (true) return productionEndTerminal("newtypedecl","-","-","Replacement",first,token);}
      break;
    case CLASS:
      jj_consume_token(CLASS);
      n = optContext(true);
                                    replaceName(n);
      n = conid(true);
                                                                    replaceName(n);
      n = tyvar(true);
                                                                                                    replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        n = cdecls(true);
                                                                                                                                              replaceName(n);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
                                                                                                                                                                 {if (true) return productionEndTerminal("classdecl","-","-","Replacement",first,token);}
      break;
    case INSTANCE:
      jj_consume_token(INSTANCE);
      n = optContext(true);
                                       replaceName(n);
      n = qconid(true);
                                                                        replaceName(n);
      n = inst(true);
                                                                                                       replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        n = block(true);
                                                                                                                                                replaceName(n);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
                                                                                                                                                                   {if (true) return productionEndTerminal("instancedecl","-","-","Replacement",first,token);}
      break;
    case DEFAULTTOKEN:
      jj_consume_token(DEFAULTTOKEN);
      n = list(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("defaultdecl","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[24] = jj_gen;
      n = decl(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("declaration","-","-","Replacement",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo decl(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_6(2147483647)) {
      n = signdecl(true);
                                                 replaceName(n);
                                                                   {if (true) return productionEndTerminal("typeSignature","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INFIXL:
      case INFIXR:
      case INFIX:
        n = fixdecl(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("fixityDeclaration","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[25] = jj_gen;
        if (jj_2_7(2147483647)) {
          n = valdef(true);
                                                replaceName(n);
                                                                  {if (true) return productionEndTerminal("valueDeclaration","-","-","Replacement",first,token);}
        } else {
          n = nonstddecl(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("nonStandardDeclaration","-","-","Replacement",first,token);}
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo declrhs(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EQUALS);
    if (isNot(SEMICOLON,RIGHT_CURLY)) {
      findNonstddeclRest();
    } else {
      ;
    }
                                                                              {if (true) return productionEndTerminal("declrhs","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo optContext(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (isContext()) {
      n = context(true);
                                                   replaceName(n);
      jj_consume_token(CONTEXT_ARROW);
    } else {
      ;
    }
                                                                           {if (true) return productionEndTerminal("optContext","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo deriving(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DERIVING);
    findNonstddeclRest();
                                         {if (true) return productionEndTerminal("deriving","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo constrs(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = constr(true);
                        replaceName(n);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALT:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_6;
      }
      jj_consume_token(ALT);
      n = constr(true);
                                                              replaceName(n);
    }
                                                                                  {if (true) return productionEndTerminal("constrs","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo constr(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = conP(true);
                      replaceName(n);
    if (isNot(SEMICOLON,ALT,RIGHT_CURLY,DERIVING)) {
      findConRest();
    } else {
      ;
    }
                                                                                                               {if (true) return productionEndTerminal("constr","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo inst(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRUCTOR_ID:
      n = gtycon(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("inst1","-","-","Replacement",first,token);}
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      n = gtycon(true);
                            replaceName(n);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE_ID:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_7;
        }
        n = tyvar(true);
                                                             replaceName(n);
      }
      jj_consume_token(RIGHT_PAREN);
                                                                                     {if (true) return productionEndTerminal("inst2","-","-","Replacement",first,token);}
      break;
    case LEFT_BRACKET:
      jj_consume_token(LEFT_BRACKET);
      n = conid(true);
                           replaceName(n);
      jj_consume_token(RIGHT_BRACKET);
                                                 {if (true) return productionEndTerminal("inst3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo gtycon(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = qtyconorcls(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("gtycon","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo cdecls(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LEFT_CURLY);
    n = cdeclsI(true);
                              replaceName(n);
    jj_consume_token(RIGHT_CURLY);
                                                     {if (true) return productionEndTerminal("cdecls","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo cdeclsI(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = cdecl(true);
                       replaceName(n);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_8;
      }
      jj_consume_token(SEMICOLON);
      n = cdecl(true);
                                                            replaceName(n);
    }
                                                                                {if (true) return productionEndTerminal("cdeclsI","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo cdecl(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_8(2147483647)) {
      n = signdecl(true);
                                                 replaceName(n);
                                                                   {if (true) return productionEndTerminal("cdecl1","-","-","Replacement",first,token);}
    } else {
      n = nonstddecl(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("cdecl2","-","-","Replacement",first,token);}
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo context(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (isNot(SEMICOLON,CONTEXT_ARROW)) {
      findUntilSemiOrContextArrow();
    } else {
      ;
    }
                                                                                     {if (true) return productionEndTerminal("context","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo simpletype(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CONSTRUCTOR_ID);
    if (isNot(EQUALS)) {
      findUntilEquals();
    } else {
      ;
    }
                                                                         {if (true) return productionEndTerminal("simpletype","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo nonstddecl(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    findNonstddeclRest();
                              {if (true) return productionEndTerminal("nonstddecl","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo valdef(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = funlhs(true);
                        replaceName(n);
    n = declrhs(true);
                                                          replaceName(n);
                                                                            {if (true) return productionEndTerminal("valdef","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo fixdecl(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = fixity(true);
                        replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    n = ops(true);
                                                                  replaceName(n);
                                                                                    {if (true) return productionEndTerminal("fixdecl","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo fixity(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INFIXL:
      jj_consume_token(INFIXL);
                   {if (true) return productionEndTerminal("fixity1","-","-","Replacement",first,token);}
      break;
    case INFIXR:
      jj_consume_token(INFIXR);
                   {if (true) return productionEndTerminal("fixity2","-","-","Replacement",first,token);}
      break;
    case INFIX:
      jj_consume_token(INFIX);
                  {if (true) return productionEndTerminal("fixity3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ops(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = op(true);
                    replaceName(n);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      n = op(true);
                                                      replaceName(n);
    }
                                                                          {if (true) return productionEndTerminal("ops","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo signdecl(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = vars(true);
                      replaceName(n);
    jj_consume_token(OFTYPE);
    if (isNot(SEMICOLON,RIGHT_CURLY)) {
      findUntilSemiOrCCB();
    } else {
      ;
    }
                                                                                                              {if (true) return productionEndTerminal("signdecl","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo vars(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = var(true);
                     replaceName(n);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMMA);
      n = var(true);
                                                        replaceName(n);
    }
                                                                            {if (true) return productionEndTerminal("vars","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo var(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE_ID:
      jj_consume_token(VARIABLE_ID);
                       {if (true) return productionEndTerminal("var1","-","-","Replacement",first,token);}
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(VARSYM);
      jj_consume_token(RIGHT_PAREN);
                          {if (true) return productionEndTerminal("var2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo conP(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSTRUCTOR_ID:
      jj_consume_token(CONSTRUCTOR_ID);
                          {if (true) return productionEndTerminal("conP1","-","-","Replacement",first,token);}
      break;
    case LEFT_PAREN:
      jj_consume_token(LEFT_PAREN);
      jj_consume_token(CONSYM);
      jj_consume_token(RIGHT_PAREN);
                          {if (true) return productionEndTerminal("conP2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo tyvar(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(VARIABLE_ID);
                       {if (true) return productionEndTerminal("tyvar","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo funlhs(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = funlhsL(true);
                         replaceName(n);
    if (isNot(SEMICOLON,EQUALS,LEFT_CURLY)) {
      n = funlhsR(true);
                                                                                                            replaceName(n);
    } else {
      ;
    }
                                                                                                                               {if (true) return productionEndTerminal("funlhs","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo funlhsL(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_9(2147483647)) {
      jj_consume_token(VARIABLE_ID);
      n = varop(true);
                                                                      replaceName(n);
                                                                                        {if (true) return productionEndTerminal("funlhsL1","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE_ID:
      case LEFT_PAREN:
        n = var(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("funlhsL2","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo funlhsR(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_CURLY:
      n = block(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("funlhsR1","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[37] = jj_gen;
      if (isNot(SEMICOLON,EQUALS)) {
        findUntilSemiOrEquals();
                                                                      {if (true) return productionEndTerminal("funlhsR2","-","-","Replacement",first,token);}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo varop(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARSYM:
      jj_consume_token(VARSYM);
                  {if (true) return productionEndTerminal("varop1","-","-","Replacement",first,token);}
      break;
    case INFIX_QUOTE:
      jj_consume_token(INFIX_QUOTE);
      jj_consume_token(VARIABLE_ID);
      jj_consume_token(INFIX_QUOTE);
                               {if (true) return productionEndTerminal("varop2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo conop(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONSYM:
      jj_consume_token(CONSYM);
                  {if (true) return productionEndTerminal("conop1","-","-","Replacement",first,token);}
      break;
    case INFIX_QUOTE:
      jj_consume_token(INFIX_QUOTE);
      jj_consume_token(CONSTRUCTOR_ID);
      jj_consume_token(INFIX_QUOTE);
                                  {if (true) return productionEndTerminal("conop2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo op(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_10(2)) {
      n = varop(true);
                                    replaceName(n);
                                                      {if (true) return productionEndTerminal("op1","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INFIX_QUOTE:
      case CONSYM:
        n = conop(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("op2","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo block(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LEFT_CURLY);
    if (isNot(RIGHT_CURLY)) {
      findBlockContent();
    } else {
      ;
    }
    jj_consume_token(RIGHT_CURLY);
                                                                      {if (true) return productionEndTerminal("block","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo list(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LEFT_PAREN);
    if (isNot(RIGHT_PAREN)) {
      findListContent();
    } else {
      ;
    }
    jj_consume_token(RIGHT_PAREN);
                                                                     {if (true) return productionEndTerminal("list","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_3_10() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(INFIX_QUOTE)) return true;
    if (jj_scan_token(VARIABLE_ID)) return true;
    if (jj_scan_token(INFIX_QUOTE)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(VARSYM)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(OFTYPE)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isNot(SEMICOLON,EQUALS);
    lookingAhead = false;
    if (!jj_semLA || jj_3R_47()) return true;
    }
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(VARSYM)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(MODULE)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_scan_token(VARSYM)) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(VARIABLE_ID)) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_23() {
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_scan_token(IMPORT)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(CONSTRUCTOR_ID)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(LEFT_CURLY)) return true;
    if (jj_3R_12()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(CONSTRUCTOR_ID)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(LEFT_CURLY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_CURLY)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_16()) return true;
    if (jj_scan_token(OFTYPE)) return true;
    return false;
  }

  public PHaskellParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[41];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0xc0000002,0x0,0x0,0xc0000002,0xc0000000,0x0,0x0,0xc0000000,0x80000000,0x0,0x0,0x10,0x40,0x80,0x8,0x80,0xc0000000,0x0,0xc0000000,0x0,0x20,0x4,0x4,0x3f00,0xe0000,0x400000,0x80000000,0x40000000,0x0,0x0,0xe0000,0x0,0x0,0x80000000,0x40000000,0x80000000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x80000,0x80000,0x800000,0x80000,0x80000,0x0,0x80000,0x800000,0x0,0x80000,0x40000,0x10000,0x0,0x0,0x80000,0x0,0x0,0x80000,0x80000,0x80000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x280000,0x40000,0x1,0x0,0x800000,0x800000,0x80000,0x80000,0x80000,0x10000,0x3000000,0x5000000,0x5000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[10];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PHaskellParser(CharStream stream) {
    token_source = new PHaskellParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PHaskellParser(PHaskellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PHaskellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 41; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[62];
    for (int i = 0; i < 62; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 41; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
