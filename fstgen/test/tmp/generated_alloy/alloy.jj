options {
  STATIC = false;
}

PARSER_BEGIN(AlloyParser)

import cide.gast.*;
import cide.gparser.*;


public class AlloyParser extends AbstractFSTParser
{
 	public AlloyParser(){}
}

PARSER_END(AlloyParser)

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{


      < LARROW: "->"> | < INT: "int"> | < INTT: "Int"> | < AND: "&">  | < COLON: ":" >

 	  | < AT: "@" >| < IN: "in" > | < EXACTLY: "exactly" > | < EXPECT: "expect" >

      | < ALL: "all" > | < NO: "no" > | < LONE: "lone" > | < SOME: "SOME" >

      | < ONE: "one" > | < SET: "set" > | < OPEN: "open" > | < AS: "as" >

      | < ABSTRACT: "abstract"> | < SIG: "sig"> | < EXTENDS: "extends">

      | < ENUM: "enum" > | < FACT: "fact" > | < ASSERT: "assert" > | < UNIV: "univ" >

      | < THIS: "this" > | < SEQINT: "seq/Int" > | < PRIVATE: "private" > | < DISJ: "disj" >

      | < FUN: "fun" >  | < PRED: "pred" > | < FOR: "for" > | < BUT: "but" > | < RUN: "run" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
}
FSTInfo DigitNo0(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"1"  {return productionEndTerminal("DigitNo01","-","-","Replacement",first,token);}
 |
	"2"  {return productionEndTerminal("DigitNo02","-","-","Replacement",first,token);}
 |
	"3"  {return productionEndTerminal("DigitNo03","-","-","Replacement",first,token);}
 |
	"4"  {return productionEndTerminal("DigitNo04","-","-","Replacement",first,token);}
 |
	"5"  {return productionEndTerminal("DigitNo05","-","-","Replacement",first,token);}
 |
	"6"  {return productionEndTerminal("DigitNo06","-","-","Replacement",first,token);}
 |
	"7"  {return productionEndTerminal("DigitNo07","-","-","Replacement",first,token);}
 |
	"8"  {return productionEndTerminal("DigitNo08","-","-","Replacement",first,token);}
 |
	"9"  {return productionEndTerminal("DigitNo09","-","-","Replacement",first,token);}

 )  }

FSTInfo Digit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=DigitNo0(true){ replaceName(n);} {return productionEndTerminal("Digit1","-","-","Replacement",first,token);}
 |
	"0"  {return productionEndTerminal("Digit2","-","-","Replacement",first,token);}

 )  }

FSTInfo NatInteger(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=DigitNo0(true){ replaceName(n);} (n=Digit(true){ replaceName(n);})* {return productionEndTerminal("NatInteger","-","-","Replacement",first,token);}

 )  }

FSTInfo Integer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"-" n=DigitNo0(true){ replaceName(n);} (n=NatInteger(true){ replaceName(n);})* {return productionEndTerminal("Integer1","-","-","Replacement",first,token);}
 |
	n=DigitNo0(true){ replaceName(n);} (n=NatInteger(true){ replaceName(n);})* {return productionEndTerminal("Integer2","-","-","Replacement",first,token);}

 )  }

FSTInfo Specification(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=Module(true){ replaceName(n);}] (n=Open(true){ replaceName(n);})* (n=Paragraph(true){ replaceName(n);})*  n=ff(true){ replaceName(n);} <EOF> {return productionEndTerminal("Specification","-","-","Replacement",first,token);}

 )  }

FSTInfo Module(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"module" n=Name(true){ replaceName(n);} [n=ExactlyClause(true){ replaceName(n);}] {return productionEndTerminal("Module","-","-","Replacement",first,token);}

 )  }

FSTInfo ExactlyClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"[" [<EXACTLY>] n=Name(true){ replaceName(n);} (n=ExactlyClauseListElement(true){ replaceName(n);})* "]" {return productionEndTerminal("ExactlyClause","-","-","Replacement",first,token);}

 )  }

FSTInfo ExactlyClauseListElement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"," [<EXACTLY>] n=NatInteger(true){ replaceName(n);} {return productionEndTerminal("ExactlyClauseListElement","-","-","Replacement",first,token);}

 )  }

FSTInfo Open(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[<PRIVATE>] <OPEN> n=Name(true){ replaceName(n);} [n=RefClause(true){ replaceName(n);}] [n=AsClause(true){ replaceName(n);}] {return productionEndTerminal("Open","-","-","Replacement",first,token);}

 )  }

FSTInfo RefClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"[" n=Ref(true){ replaceName(n);} ("," n=Ref(true){ replaceName(n);})+ "]" {return productionEndTerminal("RefClause","-","-","Replacement",first,token);}

 )  }

FSTInfo AsClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"as" n=Name(true){ replaceName(n);} {return productionEndTerminal("AsClause","-","-","Replacement",first,token);}

 )  }

FSTInfo Paragraph(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=FactDecl(true){ replaceName(n);} {return productionEndTerminal("Paragraph1","-","-","Replacement",first,token);}
 |
	n=AssertDecl(true){ replaceName(n);} {return productionEndTerminal("Paragraph2","-","-","Replacement",first,token);}
 |
	n=FunDecl(true){ replaceName(n);} {return productionEndTerminal("Paragraph3","-","-","Replacement",first,token);}
 |
	n=CmdDecl(true){ replaceName(n);} {return productionEndTerminal("Paragraph4","-","-","Replacement",first,token);}
 |
	n=EnumDecl(true){ replaceName(n);} {return productionEndTerminal("Paragraph5","-","-","Replacement",first,token);}
 |
	n=SigDecl(true){ replaceName(n);} {return productionEndTerminal("Paragraph6","-","-","Replacement",first,token);}

 )  }

FSTInfo FactDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"fact" [n=Name(true){ replaceName(n);}] n=Block(true){ replaceName(n);} {return productionEndTerminal("FactDecl","-","-","Replacement",first,token);}

 )  }

FSTInfo AssertDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"assert" [n=Name(true){ replaceName(n);}] n=Block(true){ replaceName(n);} {return productionEndTerminal("AssertDecl","-","-","Replacement",first,token);}

 )  }

FSTInfo FunDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[<PRIVATE>] "fun" [n=Ref(true){ replaceName(n);} "."] n=Name(true){ replaceName(n);} "(" n=Decl(true){ replaceName(n);} ("," n=Decl(true){ replaceName(n);})* ")" ":" n=Expr(true){ replaceName(n);} n=Block(true){ replaceName(n);} {return productionEndTerminal("FunDecl1","-","-","Replacement",first,token);}
 |
	[<PRIVATE>] "fun" [n=Ref(true){ replaceName(n);} "."] n=Name(true){ replaceName(n);} ":" n=Expr(true){ replaceName(n);} n=Block(true){ replaceName(n);} {return productionEndTerminal("FunDecl2","-","-","Replacement",first,token);}
 |
	[<PRIVATE>] "pred" [n=Ref(true){ replaceName(n);} "."] n=Name(true){ replaceName(n);} "(" n=Decl(true){ replaceName(n);} ("," n=Decl(true){ replaceName(n);})* ")" n=Block(true){ replaceName(n);} {return productionEndTerminal("FunDecl3","-","-","Replacement",first,token);}
 |
	[<PRIVATE>] "pred" [n=Ref(true){ replaceName(n);} "."] n=Name(true){ replaceName(n);} n=Block(true){ replaceName(n);} {return productionEndTerminal("FunDecl4","-","-","Replacement",first,token);}

 )  }

FSTInfo CmdDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=Name(true){ replaceName(n);} ":"] [n=RunOrCheck(true){ replaceName(n);}] [n=NameOrBlock(true){ replaceName(n);}] n=Scope(true){ replaceName(n);} {return productionEndTerminal("CmdDecl","-","-","Replacement",first,token);}

 )  }

FSTInfo RunOrCheck(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"run"  {return productionEndTerminal("RunOrCheck1","-","-","Replacement",first,token);}
 |
	"check"  {return productionEndTerminal("RunOrCheck2","-","-","Replacement",first,token);}

 )  }

FSTInfo NameOrBlock(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Name(true){ replaceName(n);} {return productionEndTerminal("NameOrBlock1","-","-","Replacement",first,token);}
 |
	n=Block(true){ replaceName(n);} {return productionEndTerminal("NameOrBlock2","-","-","Replacement",first,token);}

 )  }

FSTInfo Scope(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"for" n=NatInteger(true){ replaceName(n);} [<EXPECT>] {return productionEndTerminal("Scope1","-","-","Replacement",first,token);}
 |
	"for" n=NatInteger(true){ replaceName(n);} "but" n=TypeScope(true){ replaceName(n);} ("," n=TypeScope(true){ replaceName(n);})+ [<EXPECT>] {return productionEndTerminal("Scope2","-","-","Replacement",first,token);}
 |
	"for" n=TypeScope(true){ replaceName(n);} ("," n=TypeScope(true){ replaceName(n);})+ [<EXPECT>] {return productionEndTerminal("Scope3","-","-","Replacement",first,token);}
 |
	[<EXPECT>] {return productionEndTerminal("Scope4","-","-","Replacement",first,token);}

 )  }

FSTInfo TypeScope(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[<EXACTLY>] n=NatInteger(true){ replaceName(n);} [n=TypeScopeClause(true){ replaceName(n);}] {return productionEndTerminal("TypeScope","-","-","Replacement",first,token);}

 )  }

FSTInfo TypeScopeClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Name(true){ replaceName(n);} {return productionEndTerminal("TypeScopeClause1","-","-","Replacement",first,token);}
 |
	"int"  {return productionEndTerminal("TypeScopeClause2","-","-","Replacement",first,token);}
 |
	"seq"  {return productionEndTerminal("TypeScopeClause3","-","-","Replacement",first,token);}

 )  }

FSTInfo SigDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=SigQual(true){ replaceName(n);})* "sig" n=Name(true){ replaceName(n);} (n=Name(true){ replaceName(n);} ",")+ [n=SigExt(true){ replaceName(n);}] "{" n=Decl(true){ replaceName(n);} ("," n=Decl(true){ replaceName(n);})* "}" [n=Block(true){ replaceName(n);}] {return productionEndTerminal("SigDecl","-","-","Replacement",first,token);}

 )  }

FSTInfo EnumDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"enum" n=Name(true){ replaceName(n);} "{" n=Name(true){ replaceName(n);} ("," n=Name(true){ replaceName(n);})* "}" {return productionEndTerminal("EnumDecl","-","-","Replacement",first,token);}

 )  }

FSTInfo SigQual(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"abstract"  {return productionEndTerminal("SigQual1","-","-","Replacement",first,token);}
 |
	"lone"  {return productionEndTerminal("SigQual2","-","-","Replacement",first,token);}
 |
	"one"  {return productionEndTerminal("SigQual3","-","-","Replacement",first,token);}
 |
	"some"  {return productionEndTerminal("SigQual4","-","-","Replacement",first,token);}
 |
	"private"  {return productionEndTerminal("SigQual5","-","-","Replacement",first,token);}

 )  }

FSTInfo SigExt(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extends" n=Ref(true){ replaceName(n);} {return productionEndTerminal("SigExt1","-","-","Replacement",first,token);}
 |
	"in" n=Ref(true){ replaceName(n);} ("+" n=Ref(true){ replaceName(n);})* {return productionEndTerminal("SigExt2","-","-","Replacement",first,token);}

 )  }

FSTInfo Expr(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"let" n=LetDecl(true){ replaceName(n);} ("," n=LetDecl(true){ replaceName(n);})+ n=BlockOrBar(true){ replaceName(n);} {return productionEndTerminal("Expr1","-","-","Replacement",first,token);}
 |
	n=Quant(true){ replaceName(n);} n=Decl(true){ replaceName(n);} ("," n=Decl(true){ replaceName(n);})+ n=BlockOrBar(true){ replaceName(n);} {return productionEndTerminal("Expr2","-","-","Replacement",first,token);}
 |
	n=UnOp(true){ replaceName(n);} n=Expr(true){ replaceName(n);} {return productionEndTerminal("Expr3","-","-","Replacement",first,token);}
 |
	n=Expr(true){ replaceName(n);} n=BinOp(true){ replaceName(n);} n=Expr(true){ replaceName(n);} {return productionEndTerminal("Expr4","-","-","Replacement",first,token);}
 |
	n=Expr(true){ replaceName(n);} n=ArrowOp(true){ replaceName(n);} n=Expr(true){ replaceName(n);} {return productionEndTerminal("Expr5","-","-","Replacement",first,token);}
 |
	n=Expr(true){ replaceName(n);} [n=NotClause(true){ replaceName(n);}] "?" n=CompareOp(true){ replaceName(n);} n=Expr(true){ replaceName(n);} {return productionEndTerminal("Expr6","-","-","Replacement",first,token);}
 |
	n=Expr(true){ replaceName(n);} [n=ImpliesClause(true){ replaceName(n);}] n=Expr(true){ replaceName(n);} "else" n=Expr(true){ replaceName(n);} {return productionEndTerminal("Expr7","-","-","Replacement",first,token);}
 |
	n=Expr(true){ replaceName(n);} "[" n=Expr(true){ replaceName(n);} ("," n=Expr(true){ replaceName(n);})* "]" {return productionEndTerminal("Expr8","-","-","Replacement",first,token);}
 |
	n=NatInteger(true){ replaceName(n);} {return productionEndTerminal("Expr9","-","-","Replacement",first,token);}
 |
	"-" n=NatInteger(true){ replaceName(n);} {return productionEndTerminal("Expr10","-","-","Replacement",first,token);}
 |
	"none"  {return productionEndTerminal("Expr11","-","-","Replacement",first,token);}
 |
	"iden"  {return productionEndTerminal("Expr12","-","-","Replacement",first,token);}
 |
	"univ"  {return productionEndTerminal("Expr13","-","-","Replacement",first,token);}
 |
	"Int"  {return productionEndTerminal("Expr14","-","-","Replacement",first,token);}
 |
	"seq/Int"  {return productionEndTerminal("Expr15","-","-","Replacement",first,token);}
 |
	"(" n=Expr(true){ replaceName(n);} ")" {return productionEndTerminal("Expr16","-","-","Replacement",first,token);}
 |
	[<AT>] n=Name(true){ replaceName(n);} {return productionEndTerminal("Expr17","-","-","Replacement",first,token);}
 |
	n=Block(true){ replaceName(n);} {return productionEndTerminal("Expr18","-","-","Replacement",first,token);}
 |
	"{" n=Decl(true){ replaceName(n);} ("," n=Decl(true){ replaceName(n);})+ n=BlockOrBar(true){ replaceName(n);} "}" {return productionEndTerminal("Expr19","-","-","Replacement",first,token);}

 )  }

FSTInfo NotClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"!"  {return productionEndTerminal("NotClause1","-","-","Replacement",first,token);}
 |
	"not"  {return productionEndTerminal("NotClause2","-","-","Replacement",first,token);}

 )  }

FSTInfo ImpliesClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"=>"  {return productionEndTerminal("ImpliesClause1","-","-","Replacement",first,token);}
 |
	"implies"  {return productionEndTerminal("ImpliesClause2","-","-","Replacement",first,token);}

 )  }

FSTInfo Decl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[<PRIVATE>] [<DISJ>] n=Name(true){ replaceName(n);} ("," n=Name(true){ replaceName(n);})+ ":" [<DISJ>] n=Expr(true){ replaceName(n);} {return productionEndTerminal("Decl","-","-","Replacement",first,token);}

 )  }

FSTInfo LetDecl(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Name(true){ replaceName(n);} "=" n=Expr(true){ replaceName(n);} {return productionEndTerminal("LetDecl","-","-","Replacement",first,token);}

 )  }

FSTInfo Quant(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"all"  {return productionEndTerminal("Quant1","-","-","Replacement",first,token);}
 |
	"no"  {return productionEndTerminal("Quant2","-","-","Replacement",first,token);}
 |
	"some"  {return productionEndTerminal("Quant3","-","-","Replacement",first,token);}
 |
	"lone"  {return productionEndTerminal("Quant4","-","-","Replacement",first,token);}
 |
	"one"  {return productionEndTerminal("Quant5","-","-","Replacement",first,token);}
 |
	"sum"  {return productionEndTerminal("Quant6","-","-","Replacement",first,token);}

 )  }

FSTInfo BinOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"||"  {return productionEndTerminal("BinOp1","-","-","Replacement",first,token);}
 |
	"or"  {return productionEndTerminal("BinOp2","-","-","Replacement",first,token);}
 |
	"&&"  {return productionEndTerminal("BinOp3","-","-","Replacement",first,token);}
 |
	"and"  {return productionEndTerminal("BinOp4","-","-","Replacement",first,token);}
 |
	"&"  {return productionEndTerminal("BinOp5","-","-","Replacement",first,token);}
 |
	"<=>"  {return productionEndTerminal("BinOp6","-","-","Replacement",first,token);}
 |
	"iff"  {return productionEndTerminal("BinOp7","-","-","Replacement",first,token);}
 |
	"=>"  {return productionEndTerminal("BinOp8","-","-","Replacement",first,token);}
 |
	"implies"  {return productionEndTerminal("BinOp9","-","-","Replacement",first,token);}
 |
	"+"  {return productionEndTerminal("BinOp10","-","-","Replacement",first,token);}
 |
	"-"  {return productionEndTerminal("BinOp11","-","-","Replacement",first,token);}
 |
	"++"  {return productionEndTerminal("BinOp12","-","-","Replacement",first,token);}
 |
	"<:"  {return productionEndTerminal("BinOp13","-","-","Replacement",first,token);}
 |
	":>"  {return productionEndTerminal("BinOp14","-","-","Replacement",first,token);}
 |
	"."  {return productionEndTerminal("BinOp15","-","-","Replacement",first,token);}
 |
	"<<"  {return productionEndTerminal("BinOp16","-","-","Replacement",first,token);}
 |
	">>"  {return productionEndTerminal("BinOp17","-","-","Replacement",first,token);}
 |
	">>>"  {return productionEndTerminal("BinOp18","-","-","Replacement",first,token);}

 )  }

FSTInfo ArrowOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=ArrowOpClause(true){ replaceName(n);}] "->" [n=ArrowOpClause(true){ replaceName(n);}] {return productionEndTerminal("ArrowOp","-","-","Replacement",first,token);}

 )  }

FSTInfo ArrowOpClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"some"  {return productionEndTerminal("ArrowOpClause1","-","-","Replacement",first,token);}
 |
	"one"  {return productionEndTerminal("ArrowOpClause2","-","-","Replacement",first,token);}
 |
	"lone"  {return productionEndTerminal("ArrowOpClause3","-","-","Replacement",first,token);}
 |
	"set"  {return productionEndTerminal("ArrowOpClause4","-","-","Replacement",first,token);}

 )  }

FSTInfo CompareOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"="  {return productionEndTerminal("CompareOp1","-","-","Replacement",first,token);}
 |
	"in"  {return productionEndTerminal("CompareOp2","-","-","Replacement",first,token);}
 |
	"<"  {return productionEndTerminal("CompareOp3","-","-","Replacement",first,token);}
 |
	">"  {return productionEndTerminal("CompareOp4","-","-","Replacement",first,token);}
 |
	"=<"  {return productionEndTerminal("CompareOp5","-","-","Replacement",first,token);}
 |
	">="  {return productionEndTerminal("CompareOp6","-","-","Replacement",first,token);}

 )  }

FSTInfo UnOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"!"  {return productionEndTerminal("UnOp1","-","-","Replacement",first,token);}
 |
	"not"  {return productionEndTerminal("UnOp2","-","-","Replacement",first,token);}
 |
	"no"  {return productionEndTerminal("UnOp3","-","-","Replacement",first,token);}
 |
	"some"  {return productionEndTerminal("UnOp4","-","-","Replacement",first,token);}
 |
	"lone"  {return productionEndTerminal("UnOp5","-","-","Replacement",first,token);}
 |
	"one"  {return productionEndTerminal("UnOp6","-","-","Replacement",first,token);}
 |
	"set"  {return productionEndTerminal("UnOp7","-","-","Replacement",first,token);}
 |
	"seq"  {return productionEndTerminal("UnOp8","-","-","Replacement",first,token);}
 |
	"#"  {return productionEndTerminal("UnOp9","-","-","Replacement",first,token);}
 |
	"~"  {return productionEndTerminal("UnOp10","-","-","Replacement",first,token);}
 |
	"*"  {return productionEndTerminal("UnOp11","-","-","Replacement",first,token);}
 |
	"^"  {return productionEndTerminal("UnOp12","-","-","Replacement",first,token);}

 )  }

FSTInfo Block(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=Expr(true){ replaceName(n);})* "}" {return productionEndTerminal("Block","-","-","Replacement",first,token);}

 )  }

FSTInfo BlockOrBar(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Block(true){ replaceName(n);} {return productionEndTerminal("BlockOrBar1","-","-","Replacement",first,token);}
 |
	"|" n=Expr(true){ replaceName(n);} {return productionEndTerminal("BlockOrBar2","-","-","Replacement",first,token);}

 )  }

FSTInfo Name(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=NameClause(true){ replaceName(n);}] ("/" <IDENTIFIER>)* {return productionEndTerminal("Name","-","-","Replacement",first,token);}

 )  }

FSTInfo NameClause(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"this"  {return productionEndTerminal("NameClause1","-","-","Replacement",first,token);}
 |
	<IDENTIFIER> {return productionEndTerminal("NameClause2","-","-","Replacement",first,token);}

 )  }

FSTInfo Ref(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Name(true){ replaceName(n);} {return productionEndTerminal("Ref1","-","-","Replacement",first,token);}
 |
	"univ"  {return productionEndTerminal("Ref2","-","-","Replacement",first,token);}
 |
	"Int"  {return productionEndTerminal("Ref3","-","-","Replacement",first,token);}
 |
	"seq/Int"  {return productionEndTerminal("Ref4","-","-","Replacement",first,token);}

 )  }

