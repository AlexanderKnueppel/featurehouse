/* Generated By:JavaCC: Do not edit this line. AlloyParserConstants.java */
package tmp.generated_alloy;

public interface AlloyParserConstants {

  int EOF = 0;
  int SINGLE_LINE_COMMENT = 9;
  int FORMAL_COMMENT = 10;
  int MULTI_LINE_COMMENT = 11;
  int LARROW = 13;
  int INT = 14;
  int INTT = 15;
  int AND = 16;
  int COLON = 17;
  int AT = 18;
  int IN = 19;
  int EXACTLY = 20;
  int EXPECT = 21;
  int ALL = 22;
  int NO = 23;
  int LONE = 24;
  int SOME = 25;
  int ONE = 26;
  int SET = 27;
  int OPEN = 28;
  int AS = 29;
  int ABSTRACT = 30;
  int SIG = 31;
  int EXTENDS = 32;
  int ENUM = 33;
  int FACT = 34;
  int ASSERT = 35;
  int UNIV = 36;
  int THIS = 37;
  int SEQINT = 38;
  int PRIVATE = 39;
  int DISJ = 40;
  int FUN = 41;
  int PRED = 42;
  int FOR = 43;
  int BUT = 44;
  int RUN = 45;
  int OR = 46;
  int AND1 = 47;
  int IFF = 48;
  int SUM = 49;
  int seq = 50;
  int LET = 51;
  int NOT = 52;
  int SOME1 = 53;
  int ELSE = 54;
  int NONE1 = 55;
  int IDEN = 56;
  int CHECK = 57;
  int MODULE = 58;
  int IMPLIES = 59;
  int INTEGER_LITERAL = 60;
  int DECIMAL_LITERAL = 61;
  int HEX_LITERAL = 62;
  int OCTAL_LITERAL = 63;
  int IDENTIFIER = 64;
  int NUMBER = 65;
  int LETTER = 66;
  int DIGIT = 67;
  int LPAREN = 68;
  int RPAREN = 69;
  int LBRACE = 70;
  int RBRACE = 71;
  int LBRACKET = 72;
  int RBRACKET = 73;
  int COMMA = 74;
  int DOT = 75;
  int PLUS = 76;
  int MINUS = 77;
  int STAR = 78;
  int SLASH = 79;

  int DEFAULT = 0;
  int IN_SINGLE_LINE_COMMENT = 1;
  int IN_FORMAL_COMMENT = 2;
  int IN_MULTI_LINE_COMMENT = 3;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 12>",
    "\"->\"",
    "\"int\"",
    "\"Int\"",
    "\"&\"",
    "\":\"",
    "\"@\"",
    "\"in\"",
    "\"exactly\"",
    "\"expect\"",
    "\"all\"",
    "\"no\"",
    "\"lone\"",
    "\"SOME\"",
    "\"one\"",
    "\"set\"",
    "\"open\"",
    "\"as\"",
    "\"abstract\"",
    "\"sig\"",
    "\"extends\"",
    "\"enum\"",
    "\"fact\"",
    "\"assert\"",
    "\"univ\"",
    "\"this\"",
    "\"seq/Int\"",
    "\"private\"",
    "\"disj\"",
    "\"fun\"",
    "\"pred\"",
    "\"for\"",
    "\"but\"",
    "\"run\"",
    "\"or\"",
    "\"and\"",
    "\"iff\"",
    "\"sum\"",
    "\"seq\"",
    "\"let\"",
    "\"not\"",
    "\"some\"",
    "\"else\"",
    "\"none\"",
    "\"iden\"",
    "\"check\"",
    "\"module\"",
    "\"implies\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<IDENTIFIER>",
    "<NUMBER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"?\"",
    "\"!\"",
    "\"=>\"",
    "\"=\"",
    "\"||\"",
    "\"&&\"",
    "\"<=>\"",
    "\"++\"",
    "\"<:\"",
    "\":>\"",
    "\"<<\"",
    "\">>\"",
    "\">>>\"",
    "\"<\"",
    "\">\"",
    "\"=<\"",
    "\">=\"",
    "\"#\"",
    "\"~\"",
    "\"^\"",
    "\"|\"",
  };

}
