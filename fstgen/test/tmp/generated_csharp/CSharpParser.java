/* Generated By:JavaCC: Do not edit this line. CSharpParser.java */
package tmp.generated_csharp;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

  public class CSharpParser extends AbstractFSTParser implements CSharpParserConstants {
        public CSharpParser() {}

  final public String compilation_unit(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USING:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      using_directive(inTerminal);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes_either(inTerminal);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case NAMESPACE:
    case NEW:
    case PRIVATE:
    case CLASS:
    case PROTECTED:
    case PUBLIC:
    case DELEGATE:
    case SEALED:
    case ENUM:
    case STRUCT:
    case UNSAFE:
    case INTERFACE:
    case INTERNAL:
      compilation_unitEnd(inTerminal);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(0);
                                                                                                                {if (true) return productionEndNonTerminal("compilation_unit","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public String identifier(boolean inTerminal) throws ParseException {
                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                        replaceName("<IDENTIFIER>",t.toString());
                                                                    {if (true) return productionEndTerminal("identifier1","-","{<IDENTIFIER>}","Replacement",first,token);}
      break;
    case MODULE:
      jj_consume_token(MODULE);
                   {if (true) return productionEndTerminal("identifier2","-","{<NONE>}","Replacement",first,token);}
      break;
    case ASSEMBLY:
      jj_consume_token(ASSEMBLY);
                     {if (true) return productionEndTerminal("identifier3","-","{<NONE>}","Replacement",first,token);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String literal(boolean inTerminal) throws ParseException {
                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
      boolean_literal(true);
                               {if (true) return productionEndTerminal("literal1","-","-","Replacement",first,token);}
      break;
    case NUMERIC_LITERAL:
      jj_consume_token(NUMERIC_LITERAL);
                           {if (true) return productionEndTerminal("literal2","-","-","Replacement",first,token);}
      break;
    case HEXADECIMAL_INTEGER_LITERAL:
      jj_consume_token(HEXADECIMAL_INTEGER_LITERAL);
                                       {if (true) return productionEndTerminal("literal3","-","-","Replacement",first,token);}
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
                             {if (true) return productionEndTerminal("literal4","-","-","Replacement",first,token);}
      break;
    case REGULAR_STRING_LITERAL:
      jj_consume_token(REGULAR_STRING_LITERAL);
                                  {if (true) return productionEndTerminal("literal5","-","-","Replacement",first,token);}
      break;
    case VERBATIM_STRING_LITERAL:
      jj_consume_token(VERBATIM_STRING_LITERAL);
                                   {if (true) return productionEndTerminal("literal6","-","-","Replacement",first,token);}
      break;
    case NULL:
      jj_consume_token(NULL);
                 {if (true) return productionEndTerminal("literal7","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String boolean_literal(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                 {if (true) return productionEndTerminal("boolean_literal1","-","-","Replacement",first,token);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  {if (true) return productionEndTerminal("boolean_literal2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String type_name(boolean inTerminal) throws ParseException {
                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    n = identifier(true);
                            replaceName("identifier",n);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(DOT);
      n = identifier(true);
                                                                                   replaceName("identifier",n);
    }
                                                                                                                    {if (true) return productionEndTerminal("type_name","-","{identifier}.{identifier}^","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String type(boolean inTerminal) throws ParseException {
                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    non_array_type(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      rank_specifiers(true);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                                                             {if (true) return productionEndTerminal("type","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String rank_specifiers(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_3:
    while (true) {
      rank_specifier(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
    }
                                 {if (true) return productionEndTerminal("rank_specifiers","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String rank_specifier(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACK);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
    }
    jj_consume_token(RBRACK);
                         {if (true) return productionEndTerminal("rank_specifier","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String non_array_type(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
      predefined_type(true);
                               {if (true) return productionEndTerminal("non_array_type1","-","-","Replacement",first,token);}
      break;
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      type_name(true);
                         {if (true) return productionEndTerminal("non_array_type2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String predefined_type(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
      simple_type(true);
                           {if (true) return productionEndTerminal("predefined_type1","-","-","Replacement",first,token);}
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
                   {if (true) return productionEndTerminal("predefined_type2","-","-","Replacement",first,token);}
      break;
    case STRING:
      jj_consume_token(STRING);
                   {if (true) return productionEndTerminal("predefined_type3","-","-","Replacement",first,token);}
      break;
    case VOID:
      jj_consume_token(VOID);
                 {if (true) return productionEndTerminal("predefined_type4","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String simple_type(boolean inTerminal) throws ParseException {
                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
      numeric_type(true);
                            {if (true) return productionEndTerminal("simple_type1","-","-","Replacement",first,token);}
      break;
    case BOOL:
      jj_consume_token(BOOL);
                 {if (true) return productionEndTerminal("simple_type2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String numeric_type(boolean inTerminal) throws ParseException {
                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BYTE:
    case CHAR:
    case SBYTE:
    case SHORT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
      integral_type(true);
                             {if (true) return productionEndTerminal("numeric_type1","-","-","Replacement",first,token);}
      break;
    case DOUBLE:
    case FLOAT:
      floating_point_type(true);
                                   {if (true) return productionEndTerminal("numeric_type2","-","-","Replacement",first,token);}
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
                    {if (true) return productionEndTerminal("numeric_type3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String integral_type(boolean inTerminal) throws ParseException {
                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SBYTE:
      jj_consume_token(SBYTE);
                  {if (true) return productionEndTerminal("integral_type1","-","-","Replacement",first,token);}
      break;
    case BYTE:
      jj_consume_token(BYTE);
                 {if (true) return productionEndTerminal("integral_type2","-","-","Replacement",first,token);}
      break;
    case SHORT:
      jj_consume_token(SHORT);
                  {if (true) return productionEndTerminal("integral_type3","-","-","Replacement",first,token);}
      break;
    case USHORT:
      jj_consume_token(USHORT);
                   {if (true) return productionEndTerminal("integral_type4","-","-","Replacement",first,token);}
      break;
    case INT:
      jj_consume_token(INT);
                {if (true) return productionEndTerminal("integral_type5","-","-","Replacement",first,token);}
      break;
    case UINT:
      jj_consume_token(UINT);
                 {if (true) return productionEndTerminal("integral_type6","-","-","Replacement",first,token);}
      break;
    case LONG:
      jj_consume_token(LONG);
                 {if (true) return productionEndTerminal("integral_type7","-","-","Replacement",first,token);}
      break;
    case ULONG:
      jj_consume_token(ULONG);
                  {if (true) return productionEndTerminal("integral_type8","-","-","Replacement",first,token);}
      break;
    case CHAR:
      jj_consume_token(CHAR);
                 {if (true) return productionEndTerminal("integral_type9","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String class_type(boolean inTerminal) throws ParseException {
                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      type_name(true);
                         {if (true) return productionEndTerminal("class_type1","-","-","Replacement",first,token);}
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
                   {if (true) return productionEndTerminal("class_type2","-","-","Replacement",first,token);}
      break;
    case STRING:
      jj_consume_token(STRING);
                   {if (true) return productionEndTerminal("class_type3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String floating_point_type(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOAT:
      jj_consume_token(FLOAT);
                  {if (true) return productionEndTerminal("floating_point_type1","-","-","Replacement",first,token);}
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
                   {if (true) return productionEndTerminal("floating_point_type2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String expression(boolean inTerminal) throws ParseException {
                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    conditional_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_ASN:
    case MINUS_ASN:
    case STAR_ASN:
    case DIV_ASN:
    case MOD_ASN:
    case SL_ASN:
    case SR_ASN:
    case BSR_ASN:
    case BAND_ASN:
    case BOR_ASN:
    case BXOR_ASN:
    case ASSIGN:
      expressionInternal(true);
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
                                                                 {if (true) return productionEndTerminal("expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String expressionInternal(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    assignment_operator(true);
    expression(true);
                                                    {if (true) return productionEndTerminal("expressionInternal","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String assignment(boolean inTerminal) throws ParseException {
                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    conditional_expression(true);
    assignment_operator(true);
    expression(true);
                                                                                 {if (true) return productionEndTerminal("assignment","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String assignment_operator(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
              {if (true) return productionEndTerminal("assignment_operator1","-","-","Replacement",first,token);}
      break;
    case PLUS_ASN:
      jj_consume_token(PLUS_ASN);
               {if (true) return productionEndTerminal("assignment_operator2","-","-","Replacement",first,token);}
      break;
    case MINUS_ASN:
      jj_consume_token(MINUS_ASN);
               {if (true) return productionEndTerminal("assignment_operator3","-","-","Replacement",first,token);}
      break;
    case STAR_ASN:
      jj_consume_token(STAR_ASN);
               {if (true) return productionEndTerminal("assignment_operator4","-","-","Replacement",first,token);}
      break;
    case DIV_ASN:
      jj_consume_token(DIV_ASN);
               {if (true) return productionEndTerminal("assignment_operator5","-","-","Replacement",first,token);}
      break;
    case MOD_ASN:
      jj_consume_token(MOD_ASN);
               {if (true) return productionEndTerminal("assignment_operator6","-","-","Replacement",first,token);}
      break;
    case BAND_ASN:
      jj_consume_token(BAND_ASN);
               {if (true) return productionEndTerminal("assignment_operator7","-","-","Replacement",first,token);}
      break;
    case BOR_ASN:
      jj_consume_token(BOR_ASN);
               {if (true) return productionEndTerminal("assignment_operator8","-","-","Replacement",first,token);}
      break;
    case BXOR_ASN:
      jj_consume_token(BXOR_ASN);
               {if (true) return productionEndTerminal("assignment_operator9","-","-","Replacement",first,token);}
      break;
    case SL_ASN:
      jj_consume_token(SL_ASN);
                {if (true) return productionEndTerminal("assignment_operator10","-","-","Replacement",first,token);}
      break;
    case SR_ASN:
      jj_consume_token(SR_ASN);
                {if (true) return productionEndTerminal("assignment_operator11","-","-","Replacement",first,token);}
      break;
    case BSR_ASN:
      jj_consume_token(BSR_ASN);
                 {if (true) return productionEndTerminal("assignment_operator12","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String conditional_expression(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    conditional_or_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QMARK:
      conditional_expressionInternal(true);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
                                                                                {if (true) return productionEndTerminal("conditional_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String conditional_expressionInternal(boolean inTerminal) throws ParseException {
                                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(QMARK);
    expression(true);
    jj_consume_token(COLON);
    conditional_expression(true);
                                                               {if (true) return productionEndTerminal("conditional_expressionInternal","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String conditional_or_expression(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    conditional_and_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOR:
      jj_consume_token(LOR);
      conditional_or_expression(true);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
                                                                                 {if (true) return productionEndTerminal("conditional_or_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String conditional_and_expression(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    inclusive_or_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LAND:
      jj_consume_token(LAND);
      conditional_and_expression(true);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
                                                                               {if (true) return productionEndTerminal("conditional_and_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String inclusive_or_expression(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    exclusive_or_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOR:
      jj_consume_token(BOR);
      inclusive_or_expression(true);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
                                                                           {if (true) return productionEndTerminal("inclusive_or_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String exclusive_or_expression(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    and_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CARET:
      jj_consume_token(CARET);
      exclusive_or_expression(true);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
                                                                  {if (true) return productionEndTerminal("exclusive_or_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String and_expression(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    equality_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMPER:
      jj_consume_token(AMPER);
      and_expression(true);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
                                                              {if (true) return productionEndTerminal("and_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String equality_expression(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    relational_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
    case NOT_EQUAL:
      equality_expressionInternal(true);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
                                                                         {if (true) return productionEndTerminal("equality_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String equality_expressionInternal(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    equality_operator(true);
    equality_expression(true);
                                                           {if (true) return productionEndTerminal("equality_expressionInternal","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String equality_operator(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
               {if (true) return productionEndTerminal("equality_operator1","-","-","Replacement",first,token);}
      break;
    case NOT_EQUAL:
      jj_consume_token(NOT_EQUAL);
               {if (true) return productionEndTerminal("equality_operator2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String relational_expression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    shift_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
    case IS:
    case LTHAN:
    case LE:
    case GTHAN:
    case GE:
      relational_expressionInternal(true);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
                                                                      {if (true) return productionEndTerminal("relational_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String relational_expressionInternal(boolean inTerminal) throws ParseException {
                                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LTHAN:
    case LE:
    case GTHAN:
    case GE:
      relational_operator(true);
      relational_expression(true);
                                                               {if (true) return productionEndTerminal("relational_expressionInternal1","-","-","Replacement",first,token);}
      break;
    case AS:
    case IS:
      relational_operator2I(true);
      type(true);
                                                {if (true) return productionEndTerminal("relational_expressionInternal2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String relational_operator(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LTHAN:
      jj_consume_token(LTHAN);
              {if (true) return productionEndTerminal("relational_operator1","-","-","Replacement",first,token);}
      break;
    case GTHAN:
      jj_consume_token(GTHAN);
              {if (true) return productionEndTerminal("relational_operator2","-","-","Replacement",first,token);}
      break;
    case LE:
      jj_consume_token(LE);
               {if (true) return productionEndTerminal("relational_operator3","-","-","Replacement",first,token);}
      break;
    case GE:
      jj_consume_token(GE);
               {if (true) return productionEndTerminal("relational_operator4","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String relational_operator2I(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS:
      jj_consume_token(IS);
               {if (true) return productionEndTerminal("relational_operator2I1","-","-","Replacement",first,token);}
      break;
    case AS:
      jj_consume_token(AS);
               {if (true) return productionEndTerminal("relational_operator2I2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String shift_expression(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    additive_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SL:
    case SR:
      shift_expressionInternal(true);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
                                                                    {if (true) return productionEndTerminal("shift_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String shift_expressionInternal(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    shift_operator(true);
    shift_expression(true);
                                                     {if (true) return productionEndTerminal("shift_expressionInternal","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String shift_operator(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SL:
      jj_consume_token(SL);
               {if (true) return productionEndTerminal("shift_operator1","-","-","Replacement",first,token);}
      break;
    case SR:
      jj_consume_token(SR);
               {if (true) return productionEndTerminal("shift_operator2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String additive_expression(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    multiplicative_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      additive_expressionInternal(true);
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
                                                                             {if (true) return productionEndTerminal("additive_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String additive_expressionInternal(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    additive_operator(true);
    additive_expression(true);
                                                           {if (true) return productionEndTerminal("additive_expressionInternal","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String additive_operator(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("additive_operator1","-","-","Replacement",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("additive_operator2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String multiplicative_expression(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    unary_expression(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case DIV:
    case MOD:
      multiplicative_expressionInternal(true);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
                                                                          {if (true) return productionEndTerminal("multiplicative_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String multiplicative_expressionInternal(boolean inTerminal) throws ParseException {
                                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    multiplicative_operator(true);
    multiplicative_expression(true);
                                                                       {if (true) return productionEndTerminal("multiplicative_expressionInternal","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String multiplicative_operator(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
              {if (true) return productionEndTerminal("multiplicative_operator1","-","-","Replacement",first,token);}
      break;
    case DIV:
      jj_consume_token(DIV);
              {if (true) return productionEndTerminal("multiplicative_operator2","-","-","Replacement",first,token);}
      break;
    case MOD:
      jj_consume_token(MOD);
              {if (true) return productionEndTerminal("multiplicative_operator3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String unary_expression(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
      unary_operator(true);
      unary_expression(true);
                                                     {if (true) return productionEndTerminal("unary_expression1","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[38] = jj_gen;
      if (jj_2_1(2147483647)) {
        cast_expression(true);
                                                            {if (true) return productionEndTerminal("unary_expression2","-","-","Replacement",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LONG:
        case BASE:
        case NEW:
        case BOOL:
        case NULL:
        case OBJECT:
        case BYTE:
        case CHAR:
        case CHECKED:
        case DECIMAL:
        case SBYTE:
        case DOUBLE:
        case SHORT:
        case SIZEOF:
        case STRING:
        case FALSE:
        case THIS:
        case FLOAT:
        case TRUE:
        case TYPEOF:
        case UINT:
        case ULONG:
        case UNCHECKED:
        case INT:
        case USHORT:
        case VOID:
        case MODULE:
        case ASSEMBLY:
        case LPAREN:
        case IDENTIFIER:
        case NUMERIC_LITERAL:
        case HEXADECIMAL_INTEGER_LITERAL:
        case CHARACTER_LITERAL:
        case REGULAR_STRING_LITERAL:
        case VERBATIM_STRING_LITERAL:
          primary_expression(true);
                                  {if (true) return productionEndTerminal("unary_expression3","-","-","Replacement",first,token);}
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String unary_operator(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("unary_operator1","-","-","Replacement",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("unary_operator2","-","-","Replacement",first,token);}
      break;
    case BANG:
      jj_consume_token(BANG);
              {if (true) return productionEndTerminal("unary_operator3","-","-","Replacement",first,token);}
      break;
    case TILDE:
      jj_consume_token(TILDE);
              {if (true) return productionEndTerminal("unary_operator4","-","-","Replacement",first,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
              {if (true) return productionEndTerminal("unary_operator5","-","-","Replacement",first,token);}
      break;
    case INC:
      jj_consume_token(INC);
               {if (true) return productionEndTerminal("unary_operator6","-","-","Replacement",first,token);}
      break;
    case DEC:
      jj_consume_token(DEC);
               {if (true) return productionEndTerminal("unary_operator7","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String cast_expression(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    type(true);
    jj_consume_token(RPAREN);
    unary_expression(true);
                                                   {if (true) return productionEndTerminal("cast_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String primary_expression(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      primary_expression_start(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LBRACK:
      case LPAREN:
      case INC:
      case DEC:
      case ARROW:
        primary_expression_postfix(true);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
                                                                           {if (true) return productionEndTerminal("primary_expression1","-","-","Replacement",first,token);}
      break;
    case NEW:
      creation_expression(true);
                                   {if (true) return productionEndTerminal("primary_expression2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String primary_expression_start(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case FALSE:
    case TRUE:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      literal(true);
                       {if (true) return productionEndTerminal("primary_expression_start1","-","-","Replacement",first,token);}
      break;
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      identifier(true);
                          {if (true) return productionEndTerminal("primary_expression_start2","-","-","Replacement",first,token);}
      break;
    case LPAREN:
      parenthesized_expression(true);
                                        {if (true) return productionEndTerminal("primary_expression_start3","-","-","Replacement",first,token);}
      break;
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
      predefined_type(true);
      member_access(true);
                                                   {if (true) return productionEndTerminal("primary_expression_start4","-","-","Replacement",first,token);}
      break;
    case THIS:
      this_access(true);
                           {if (true) return productionEndTerminal("primary_expression_start5","-","-","Replacement",first,token);}
      break;
    case BASE:
      base_access(true);
                           {if (true) return productionEndTerminal("primary_expression_start6","-","-","Replacement",first,token);}
      break;
    case TYPEOF:
      typeof_expression(true);
                                 {if (true) return productionEndTerminal("primary_expression_start7","-","-","Replacement",first,token);}
      break;
    case SIZEOF:
      sizeof_expression(true);
                                 {if (true) return productionEndTerminal("primary_expression_start8","-","-","Replacement",first,token);}
      break;
    case CHECKED:
      checked_expression(true);
                                  {if (true) return productionEndTerminal("primary_expression_start9","-","-","Replacement",first,token);}
      break;
    case UNCHECKED:
      unchecked_expression(true);
                                    {if (true) return productionEndTerminal("primary_expression_start10","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String primary_expression_postfix(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_5:
    while (true) {
      primary_expression_postfixInternal(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LBRACK:
      case LPAREN:
      case INC:
      case DEC:
      case ARROW:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_5;
      }
    }
                                                     {if (true) return productionEndTerminal("primary_expression_postfix","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String primary_expression_postfixInternal(boolean inTerminal) throws ParseException {
                                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      member_access(true);
                             {if (true) return productionEndTerminal("primary_expression_postfixInternal1","-","-","Replacement",first,token);}
      break;
    case LPAREN:
      invocation_expression(true);
                                     {if (true) return productionEndTerminal("primary_expression_postfixInternal2","-","-","Replacement",first,token);}
      break;
    case LBRACK:
      element_access(true);
                              {if (true) return productionEndTerminal("primary_expression_postfixInternal3","-","-","Replacement",first,token);}
      break;
    case INC:
      post_increment_expression(true);
                                         {if (true) return productionEndTerminal("primary_expression_postfixInternal4","-","-","Replacement",first,token);}
      break;
    case DEC:
      post_decrement_expression(true);
                                         {if (true) return productionEndTerminal("primary_expression_postfixInternal5","-","-","Replacement",first,token);}
      break;
    case ARROW:
      pointer_member_access(true);
                                     {if (true) return productionEndTerminal("primary_expression_postfixInternal6","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String array_creation_postfix_expression(boolean inTerminal) throws ParseException {
                                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_6:
    while (true) {
      array_creation_postfix_expressionInternal(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LPAREN:
      case INC:
      case DEC:
      case ARROW:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_6;
      }
    }
                                                            {if (true) return productionEndTerminal("array_creation_postfix_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String array_creation_postfix_expressionInternal(boolean inTerminal) throws ParseException {
                                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      member_access(true);
                             {if (true) return productionEndTerminal("array_creation_postfix_expressionInternal1","-","-","Replacement",first,token);}
      break;
    case LPAREN:
      invocation_expression(true);
                                     {if (true) return productionEndTerminal("array_creation_postfix_expressionInternal2","-","-","Replacement",first,token);}
      break;
    case INC:
      post_increment_expression(true);
                                         {if (true) return productionEndTerminal("array_creation_postfix_expressionInternal3","-","-","Replacement",first,token);}
      break;
    case DEC:
      post_decrement_expression(true);
                                         {if (true) return productionEndTerminal("array_creation_postfix_expressionInternal4","-","-","Replacement",first,token);}
      break;
    case ARROW:
      pointer_member_access(true);
                                     {if (true) return productionEndTerminal("array_creation_postfix_expressionInternal5","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String creation_expression(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(NEW);
    non_array_type(true);
    creation_expressionPostFix(true);
                                                                     {if (true) return productionEndTerminal("creation_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String creation_expressionPostFix(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case OBJECT:
      case BYTE:
      case OUT:
      case CHAR:
      case CHECKED:
      case DECIMAL:
      case REF:
      case SBYTE:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case THIS:
      case FLOAT:
      case TRUE:
      case TYPEOF:
      case UINT:
      case ULONG:
      case UNCHECKED:
      case INT:
      case USHORT:
      case VOID:
      case MODULE:
      case ASSEMBLY:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        argument_list(true);
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LBRACK:
      case LPAREN:
      case INC:
      case DEC:
      case ARROW:
        primary_expression_postfix(true);
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
                                                                          {if (true) return productionEndTerminal("creation_expressionPostFix1","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[54] = jj_gen;
      if (jj_2_2(2)) {
        jj_consume_token(LBRACK);
        expression_list(true);
        jj_consume_token(RBRACK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
          rank_specifiers(true);
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          array_initializer(true);
          break;
        default:
          jj_la1[51] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
        case LPAREN:
        case INC:
        case DEC:
        case ARROW:
          array_creation_postfix_expression(true);
          break;
        default:
          jj_la1[52] = jj_gen;
          ;
        }
                                                                                                                                                {if (true) return productionEndTerminal("creation_expressionPostFix2","-","-","Replacement",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACK:
          rank_specifiers(true);
          array_initializer(true);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
          case LPAREN:
          case INC:
          case DEC:
          case ARROW:
            array_creation_postfix_expression(true);
            break;
          default:
            jj_la1[53] = jj_gen;
            ;
          }
                                                                                                 {if (true) return productionEndTerminal("creation_expressionPostFix3","-","-","Replacement",first,token);}
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String parenthesized_expression(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    expression(true);
    jj_consume_token(RPAREN);
                                  {if (true) return productionEndTerminal("parenthesized_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String member_access(boolean inTerminal) throws ParseException {
                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DOT);
    identifier(true);
                              {if (true) return productionEndTerminal("member_access","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String invocation_expression(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      argument_list(true);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                       {if (true) return productionEndTerminal("invocation_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String argument_list(boolean inTerminal) throws ParseException {
                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    argument(true);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      argument(true);
    }
                                              {if (true) return productionEndTerminal("argument_list","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String argument(boolean inTerminal) throws ParseException {
                                        Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUT:
    case REF:
      argumentPrefix(true);
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    expression(true);
                                                 {if (true) return productionEndTerminal("argument","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String argumentPrefix(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REF:
      jj_consume_token(REF);
                {if (true) return productionEndTerminal("argumentPrefix1","-","-","Replacement",first,token);}
      break;
    case OUT:
      jj_consume_token(OUT);
                {if (true) return productionEndTerminal("argumentPrefix2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String element_access(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACK);
    argument_list(true);
    jj_consume_token(RBRACK);
                                     {if (true) return productionEndTerminal("element_access","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String expression_list(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    expression(true);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_8;
      }
      expression_listList(true);
    }
                                                       {if (true) return productionEndTerminal("expression_list","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String expression_listList(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COMMA);
    expression(true);
                              {if (true) return productionEndTerminal("expression_listList","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String this_access(boolean inTerminal) throws ParseException {
                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(THIS);
                 {if (true) return productionEndTerminal("this_access","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String base_access(boolean inTerminal) throws ParseException {
                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_3(2)) {
      jj_consume_token(BASE);
      member_access(true);
                                                 {if (true) return productionEndTerminal("base_access1","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BASE:
        jj_consume_token(BASE);
        element_access(true);
                                     {if (true) return productionEndTerminal("base_access2","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String post_increment_expression(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(INC);
               {if (true) return productionEndTerminal("post_increment_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String post_decrement_expression(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DEC);
               {if (true) return productionEndTerminal("post_decrement_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String typeof_expression(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(TYPEOF);
    jj_consume_token(LPAREN);
    type(true);
    jj_consume_token(RPAREN);
                                     {if (true) return productionEndTerminal("typeof_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String checked_expression(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CHECKED);
    jj_consume_token(LPAREN);
    expression(true);
    jj_consume_token(RPAREN);
                                            {if (true) return productionEndTerminal("checked_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String unchecked_expression(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(UNCHECKED);
    jj_consume_token(LPAREN);
    expression(true);
    jj_consume_token(RPAREN);
                                              {if (true) return productionEndTerminal("unchecked_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String statement(boolean inTerminal) throws ParseException {
                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_4(2)) {
      identifier(true);
      jj_consume_token(COLON);
      statement(true);
                                                           {if (true) return productionEndTerminal("statement1","-","-","Replacement",first,token);}
    } else if (jj_2_5(2147483647)) {
      local_variable_declaration(true);
      jj_consume_token(SEMI);
                                                                             {if (true) return productionEndTerminal("statement2","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        local_constant_declaration(true);
        jj_consume_token(SEMI);
                                              {if (true) return productionEndTerminal("statement3","-","-","Replacement",first,token);}
        break;
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case BREAK:
      case OBJECT:
      case BYTE:
      case CHAR:
      case CHECKED:
      case CONTINUE:
      case DECIMAL:
      case RETURN:
      case SBYTE:
      case DO:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case SWITCH:
      case THIS:
      case FIXED:
      case THROW:
      case FLOAT:
      case TRUE:
      case FOR:
      case TRY:
      case FOREACH:
      case TYPEOF:
      case GOTO:
      case UINT:
      case IF:
      case ULONG:
      case UNCHECKED:
      case UNSAFE:
      case INT:
      case USHORT:
      case USING:
      case VOID:
      case LOCK:
      case WHILE:
      case MODULE:
      case ASSEMBLY:
      case LBRACE:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case SEMI:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        embedded_statement(true);
                                  {if (true) return productionEndTerminal("statement4","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String local_variable_declaration(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    type(true);
    local_variable_declarators(true);
                                                     {if (true) return productionEndTerminal("local_variable_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String local_variable_declarators(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    local_variable_declarator(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      local_variable_declarators(true);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
                                                                                {if (true) return productionEndTerminal("local_variable_declarators","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String local_variable_declarator(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    identifier(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      local_variable_assignment(true);
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
                                                            {if (true) return productionEndTerminal("local_variable_declarator","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String local_variable_assignment(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ASSIGN);
    local_variable_initializer(true);
                                              {if (true) return productionEndTerminal("local_variable_assignment","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String local_variable_initializer(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      array_initializer(true);
                                 {if (true) return productionEndTerminal("local_variable_initializer1","-","-","Replacement",first,token);}
      break;
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression(true);
                          {if (true) return productionEndTerminal("local_variable_initializer2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String local_constant_declaration(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CONST);
    type(true);
    local_constant_declarators(true);
                                                             {if (true) return productionEndTerminal("local_constant_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String local_constant_declarators(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    local_constant_declarator(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      local_constant_declarators(true);
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
                                                                                {if (true) return productionEndTerminal("local_constant_declarators","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String local_constant_declarator(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    identifier(true);
    jj_consume_token(ASSIGN);
    local_variable_initializer(true);
                                                               {if (true) return productionEndTerminal("local_constant_declarator","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String embedded_statement(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      block(true);
                     {if (true) return productionEndTerminal("embedded_statement1","-","-","Replacement",first,token);}
      break;
    case SEMI:
      jj_consume_token(SEMI);
              {if (true) return productionEndTerminal("embedded_statement2","-","-","Replacement",first,token);}
      break;
    case SWITCH:
    case IF:
      selection_statement(true);
                                   {if (true) return productionEndTerminal("embedded_statement3","-","-","Replacement",first,token);}
      break;
    case DO:
    case FOR:
    case FOREACH:
    case WHILE:
      iteration_statement(true);
                                   {if (true) return productionEndTerminal("embedded_statement4","-","-","Replacement",first,token);}
      break;
    case BREAK:
    case CONTINUE:
    case RETURN:
    case THROW:
    case GOTO:
      jump_statement(true);
                              {if (true) return productionEndTerminal("embedded_statement5","-","-","Replacement",first,token);}
      break;
    case TRY:
      try_statement(true);
                             {if (true) return productionEndTerminal("embedded_statement6","-","-","Replacement",first,token);}
      break;
    case CHECKED:
      checked_statement(true);
                                 {if (true) return productionEndTerminal("embedded_statement7","-","-","Replacement",first,token);}
      break;
    case UNCHECKED:
      unchecked_statement(true);
                                   {if (true) return productionEndTerminal("embedded_statement8","-","-","Replacement",first,token);}
      break;
    case LOCK:
      lock_statement(true);
                              {if (true) return productionEndTerminal("embedded_statement9","-","-","Replacement",first,token);}
      break;
    case USING:
      using_statement(true);
                               {if (true) return productionEndTerminal("embedded_statement10","-","-","Replacement",first,token);}
      break;
    case UNSAFE:
      unsafe_statement(true);
                                {if (true) return productionEndTerminal("embedded_statement11","-","-","Replacement",first,token);}
      break;
    case FIXED:
      fixed_statement(true);
                               {if (true) return productionEndTerminal("embedded_statement12","-","-","Replacement",first,token);}
      break;
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression_statement(true);
                                    {if (true) return productionEndTerminal("embedded_statement13","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String block(boolean inTerminal) throws ParseException {
                                     Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case BREAK:
      case OBJECT:
      case BYTE:
      case CHAR:
      case CHECKED:
      case CONST:
      case CONTINUE:
      case DECIMAL:
      case RETURN:
      case SBYTE:
      case DO:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case SWITCH:
      case THIS:
      case FIXED:
      case THROW:
      case FLOAT:
      case TRUE:
      case FOR:
      case TRY:
      case FOREACH:
      case TYPEOF:
      case GOTO:
      case UINT:
      case IF:
      case ULONG:
      case UNCHECKED:
      case UNSAFE:
      case INT:
      case USHORT:
      case USING:
      case VOID:
      case LOCK:
      case WHILE:
      case MODULE:
      case ASSEMBLY:
      case LBRACE:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case SEMI:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_9;
      }
      statement(true);
    }
    jj_consume_token(RBRACE);
                                    {if (true) return productionEndTerminal("block","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String statement_list(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_10:
    while (true) {
      statement(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case BREAK:
      case OBJECT:
      case BYTE:
      case CHAR:
      case CHECKED:
      case CONST:
      case CONTINUE:
      case DECIMAL:
      case RETURN:
      case SBYTE:
      case DO:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case SWITCH:
      case THIS:
      case FIXED:
      case THROW:
      case FLOAT:
      case TRUE:
      case FOR:
      case TRY:
      case FOREACH:
      case TYPEOF:
      case GOTO:
      case UINT:
      case IF:
      case ULONG:
      case UNCHECKED:
      case UNSAFE:
      case INT:
      case USHORT:
      case USING:
      case VOID:
      case LOCK:
      case WHILE:
      case MODULE:
      case ASSEMBLY:
      case LBRACE:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case SEMI:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_10;
      }
    }
                            {if (true) return productionEndTerminal("statement_list","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String expression_statement(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    expression(true);
    jj_consume_token(SEMI);
                              {if (true) return productionEndTerminal("expression_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String selection_statement(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      if_statement(true);
                            {if (true) return productionEndTerminal("selection_statement1","-","-","Replacement",first,token);}
      break;
    case SWITCH:
      switch_statement(true);
                                {if (true) return productionEndTerminal("selection_statement2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String if_statement(boolean inTerminal) throws ParseException {
                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    expression(true);
    jj_consume_token(RPAREN);
    embedded_statement(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      embedded_statement(true);
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
                                                                                                  {if (true) return productionEndTerminal("if_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String switch_statement(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    expression(true);
    jj_consume_token(RPAREN);
    switch_block(true);
                                                              {if (true) return productionEndTerminal("switch_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String switch_block(boolean inTerminal) throws ParseException {
                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_11:
    while (true) {
      switch_section(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case DEFAULTTOKEN:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_11;
      }
    }
    jj_consume_token(RBRACE);
                                         {if (true) return productionEndTerminal("switch_block","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String switch_section(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_12:
    while (true) {
      switch_label(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case DEFAULTTOKEN:
        ;
        break;
      default:
        jj_la1[73] = jj_gen;
        break label_12;
      }
    }
    statement_list(true);
                                                    {if (true) return productionEndTerminal("switch_section","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String switch_label(boolean inTerminal) throws ParseException {
                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      expression(true);
      jj_consume_token(COLON);
                                     {if (true) return productionEndTerminal("switch_label1","-","-","Replacement",first,token);}
      break;
    case DEFAULTTOKEN:
      jj_consume_token(DEFAULTTOKEN);
      jj_consume_token(COLON);
                        {if (true) return productionEndTerminal("switch_label2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String iteration_statement(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      while_statement(true);
                               {if (true) return productionEndTerminal("iteration_statement1","-","-","Replacement",first,token);}
      break;
    case DO:
      do_statement(true);
                            {if (true) return productionEndTerminal("iteration_statement2","-","-","Replacement",first,token);}
      break;
    case FOR:
      for_statement(true);
                             {if (true) return productionEndTerminal("iteration_statement3","-","-","Replacement",first,token);}
      break;
    case FOREACH:
      foreach_statement(true);
                                 {if (true) return productionEndTerminal("iteration_statement4","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String while_statement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression(true);
    jj_consume_token(RPAREN);
    embedded_statement(true);
                                                                   {if (true) return productionEndTerminal("while_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String do_statement(boolean inTerminal) throws ParseException {
                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DO);
    embedded_statement(true);
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    expression(true);
    jj_consume_token(RPAREN);
                                                                        {if (true) return productionEndTerminal("do_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String for_statement(boolean inTerminal) throws ParseException {
                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      for_initializer(true);
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression(true);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression_list(true);
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    embedded_statement(true);
                                                                                                                           {if (true) return productionEndTerminal("for_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String for_initializer(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_6(2147483647)) {
      local_variable_declaration(true);
                                                                         {if (true) return productionEndTerminal("for_initializer1","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case OBJECT:
      case BYTE:
      case CHAR:
      case CHECKED:
      case DECIMAL:
      case SBYTE:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case THIS:
      case FLOAT:
      case TRUE:
      case TYPEOF:
      case UINT:
      case ULONG:
      case UNCHECKED:
      case INT:
      case USHORT:
      case VOID:
      case MODULE:
      case ASSEMBLY:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        expression_list(true);
                               {if (true) return productionEndTerminal("for_initializer2","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String foreach_statement(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FOREACH);
    jj_consume_token(LPAREN);
    type(true);
    identifier(true);
    jj_consume_token(IN);
    expression(true);
    jj_consume_token(RPAREN);
    embedded_statement(true);
                                                                                                      {if (true) return productionEndTerminal("foreach_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String jump_statement(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      jj_consume_token(BREAK);
      jj_consume_token(SEMI);
                      {if (true) return productionEndTerminal("jump_statement1","-","-","Replacement",first,token);}
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      jj_consume_token(SEMI);
                         {if (true) return productionEndTerminal("jump_statement2","-","-","Replacement",first,token);}
      break;
    case GOTO:
      goto_statement(true);
                              {if (true) return productionEndTerminal("jump_statement3","-","-","Replacement",first,token);}
      break;
    case RETURN:
      return_statement(true);
                                {if (true) return productionEndTerminal("jump_statement4","-","-","Replacement",first,token);}
      break;
    case THROW:
      throw_statement(true);
                               {if (true) return productionEndTerminal("jump_statement5","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String goto_statement(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(GOTO);
    goto_statementEnd(true);
                                        {if (true) return productionEndTerminal("goto_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String goto_statementEnd(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      identifier(true);
      jj_consume_token(SEMI);
                              {if (true) return productionEndTerminal("goto_statementEnd1","-","-","Replacement",first,token);}
      break;
    case CASE:
      jj_consume_token(CASE);
      expression(true);
      jj_consume_token(SEMI);
                                     {if (true) return productionEndTerminal("goto_statementEnd2","-","-","Replacement",first,token);}
      break;
    case DEFAULTTOKEN:
      jj_consume_token(DEFAULTTOKEN);
      jj_consume_token(SEMI);
                        {if (true) return productionEndTerminal("goto_statementEnd3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String return_statement(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression(true);
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
                                         {if (true) return productionEndTerminal("return_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String throw_statement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(THROW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression(true);
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
                                        {if (true) return productionEndTerminal("throw_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String try_statement(boolean inTerminal) throws ParseException {
                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(TRY);
    block(true);
    try_statement_clauses(true);
                                                       {if (true) return productionEndTerminal("try_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String try_statement_clauses(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATCH:
      catch_clauses(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        finally_clause(true);
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
                                                    {if (true) return productionEndTerminal("try_statement_clauses1","-","-","Replacement",first,token);}
      break;
    case FINALLY:
      finally_clause(true);
                              {if (true) return productionEndTerminal("try_statement_clauses2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String catch_clauses(boolean inTerminal) throws ParseException {
                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_13:
    while (true) {
      catch_clause(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_13;
      }
    }
                               {if (true) return productionEndTerminal("catch_clauses","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String catch_clause(boolean inTerminal) throws ParseException {
                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CATCH);
    catch_clauseEnd(true);
                                       {if (true) return productionEndTerminal("catch_clause","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String catch_clauseEnd(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      type(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
      case ASSEMBLY:
      case IDENTIFIER:
        identifier(true);
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      block(true);
                                                           {if (true) return productionEndTerminal("catch_clauseEnd1","-","-","Replacement",first,token);}
      break;
    case LBRACE:
      block(true);
                     {if (true) return productionEndTerminal("catch_clauseEnd2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[88] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String finally_clause(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FINALLY);
    block(true);
                               {if (true) return productionEndTerminal("finally_clause","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String checked_statement(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CHECKED);
    block(true);
                               {if (true) return productionEndTerminal("checked_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String unchecked_statement(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(UNCHECKED);
    block(true);
                                 {if (true) return productionEndTerminal("unchecked_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String lock_statement(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LOCK);
    jj_consume_token(LPAREN);
    expression(true);
    jj_consume_token(RPAREN);
    embedded_statement(true);
                                                                  {if (true) return productionEndTerminal("lock_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String using_statement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(USING);
    jj_consume_token(LPAREN);
    resource_acquisition(true);
    jj_consume_token(RPAREN);
    embedded_statement(true);
                                                                             {if (true) return productionEndTerminal("using_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String resource_acquisition(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_7(2147483647)) {
      local_variable_declaration(true);
                                                                                       {if (true) return productionEndTerminal("resource_acquisition1","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case BASE:
      case NEW:
      case BOOL:
      case NULL:
      case OBJECT:
      case BYTE:
      case CHAR:
      case CHECKED:
      case DECIMAL:
      case SBYTE:
      case DOUBLE:
      case SHORT:
      case SIZEOF:
      case STRING:
      case FALSE:
      case THIS:
      case FLOAT:
      case TRUE:
      case TYPEOF:
      case UINT:
      case ULONG:
      case UNCHECKED:
      case INT:
      case USHORT:
      case VOID:
      case MODULE:
      case ASSEMBLY:
      case LPAREN:
      case PLUS:
      case MINUS:
      case STAR:
      case INC:
      case DEC:
      case TILDE:
      case BANG:
      case IDENTIFIER:
      case NUMERIC_LITERAL:
      case HEXADECIMAL_INTEGER_LITERAL:
      case CHARACTER_LITERAL:
      case REGULAR_STRING_LITERAL:
      case VERBATIM_STRING_LITERAL:
        expression(true);
                          {if (true) return productionEndTerminal("resource_acquisition2","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String compilation_unitEnd(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    namespace_member_declaration_no_attr(inTerminal);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NAMESPACE:
      case NEW:
      case PRIVATE:
      case CLASS:
      case PROTECTED:
      case PUBLIC:
      case DELEGATE:
      case SEALED:
      case ENUM:
      case STRUCT:
      case UNSAFE:
      case INTERFACE:
      case INTERNAL:
      case LBRACK:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_14;
      }
      namespace_member_declaration(inTerminal);
    }
                                                                                                      {if (true) return productionEndNonTerminal("compilation_unitEnd","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public String namespace_declaration(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(NAMESPACE);
    type_name(inTerminal);
    namespace_body(inTerminal);
                                                                      {if (true) return productionEndNonTerminal("namespace_declaration","type_name","type_name");}
    throw new Error("Missing return statement in function");
  }

  final public String namespace_body(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USING:
        ;
        break;
      default:
        jj_la1[91] = jj_gen;
        break label_15;
      }
      using_directive(inTerminal);
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NAMESPACE:
      case NEW:
      case PRIVATE:
      case CLASS:
      case PROTECTED:
      case PUBLIC:
      case DELEGATE:
      case SEALED:
      case ENUM:
      case STRUCT:
      case UNSAFE:
      case INTERFACE:
      case INTERNAL:
      case LBRACK:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_16;
      }
      namespace_member_declaration(inTerminal);
    }
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
                                                                                                   {if (true) return productionEndNonTerminal("namespace_body","-","-");}
    throw new Error("Missing return statement in function");
  }

  final public String using_directive(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(USING);
    n = type_name(true);
                                   replaceName("type_name",n);
    n = using_directiveEnd(true);
                                                                                            replaceName("using_directiveEnd",n);
                                                                                                                                   {if (true) return productionEndTerminal("using_directive","{type_name}={using_directiveEnd}","{type_name}={using_directiveEnd}","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String using_directiveEnd(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      type_name(true);
      jj_consume_token(SEMI);
                                 {if (true) return productionEndTerminal("using_directiveEnd1","-","type_name","Replacement",first,token);}
      break;
    case SEMI:
      jj_consume_token(SEMI);
              {if (true) return productionEndTerminal("using_directiveEnd2","-","type_name","Replacement",first,token);}
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String namespace_member_declaration_no_attr(boolean inTerminal) throws ParseException {
                                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAMESPACE:
      namespace_declaration(inTerminal);
                                           {if (true) return productionEndNonTerminal("namespace_member_declaration_no_attr1","-","-");}
      break;
    case ABSTRACT:
    case NEW:
    case PRIVATE:
    case CLASS:
    case PROTECTED:
    case PUBLIC:
    case DELEGATE:
    case SEALED:
    case ENUM:
    case STRUCT:
    case UNSAFE:
    case INTERFACE:
    case INTERNAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SEALED:
      case UNSAFE:
      case INTERNAL:
        type_modifiers(inTerminal);
        break;
      default:
        jj_la1[95] = jj_gen;
        ;
      }
      type_declaration(inTerminal);
                                                                   {if (true) return productionEndNonTerminal("namespace_member_declaration_no_attr2","-","-");}
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String namespace_member_declaration(boolean inTerminal) throws ParseException {
                                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NAMESPACE:
      namespace_declaration(inTerminal);
                                           {if (true) return productionEndNonTerminal("namespace_member_declaration1","-","-");}
      break;
    case ABSTRACT:
    case NEW:
    case PRIVATE:
    case CLASS:
    case PROTECTED:
    case PUBLIC:
    case DELEGATE:
    case SEALED:
    case ENUM:
    case STRUCT:
    case UNSAFE:
    case INTERFACE:
    case INTERNAL:
    case LBRACK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        attributes(inTerminal);
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SEALED:
      case UNSAFE:
      case INTERNAL:
        type_modifiers(inTerminal);
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
      type_declaration(inTerminal);
                                                                                            {if (true) return productionEndNonTerminal("namespace_member_declaration2","-","-");}
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String type_declaration(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      n = class_declaration(inTerminal);
                                         replaceName("class_declaration",n);
                                                                               {if (true) return productionEndNonTerminal("type_declaration1","{class_declaration}","{class_declaration}");}
      break;
    case STRUCT:
      n = struct_declaration(inTerminal);
                                          replaceName("struct_declaration",n);
                                                                                 {if (true) return productionEndNonTerminal("type_declaration2","{struct_declaration}","{struct_declaration}");}
      break;
    case INTERFACE:
      n = interface_declaration(inTerminal);
                                             replaceName("interface_declaration",n);
                                                                                       {if (true) return productionEndNonTerminal("type_declaration3","{interface_declaration}","{interface_declaration}");}
      break;
    case ENUM:
      n = enum_declaration(inTerminal);
                                        replaceName("enum_declaration",n);
                                                                             {if (true) return productionEndNonTerminal("type_declaration4","{enum_declaration}","{enum_declaration}");}
      break;
    case DELEGATE:
      n = delegate_declaration(inTerminal);
                                            replaceName("delegate_declaration",n);
                                                                                     {if (true) return productionEndNonTerminal("type_declaration5","{delegate_declaration}","{delegate_declaration}");}
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String type_modifiers(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_17:
    while (true) {
      type_modifier(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NEW:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SEALED:
      case UNSAFE:
      case INTERNAL:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_17;
      }
    }
                                {if (true) return productionEndTerminal("type_modifiers","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String type_modifier(boolean inTerminal) throws ParseException {
                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
                {if (true) return productionEndTerminal("type_modifier1","-","-","Replacement",first,token);}
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
                   {if (true) return productionEndTerminal("type_modifier2","-","-","Replacement",first,token);}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
                      {if (true) return productionEndTerminal("type_modifier3","-","-","Replacement",first,token);}
      break;
    case INTERNAL:
      jj_consume_token(INTERNAL);
                     {if (true) return productionEndTerminal("type_modifier4","-","-","Replacement",first,token);}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                    {if (true) return productionEndTerminal("type_modifier5","-","-","Replacement",first,token);}
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                     {if (true) return productionEndTerminal("type_modifier6","-","-","Replacement",first,token);}
      break;
    case SEALED:
      jj_consume_token(SEALED);
                   {if (true) return productionEndTerminal("type_modifier7","-","-","Replacement",first,token);}
      break;
    case UNSAFE:
      jj_consume_token(UNSAFE);
                   {if (true) return productionEndTerminal("type_modifier8","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String class_declaration(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CLASS);
    n = identifier(inTerminal);
                                          replaceName("identifier",n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      class_base(inTerminal);
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
    class_body(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
                                                                                                                                {if (true) return productionEndNonTerminal("class_declaration","{identifier}","{identifier}");}
    throw new Error("Missing return statement in function");
  }

  final public String class_base(boolean inTerminal) throws ParseException {
                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COLON);
    class_type(true);
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[105] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
      type_name(true);
    }
                                                     {if (true) return productionEndTerminal("class_base","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String interface_type_list(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    type_name(true);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      type_name(true);
    }
                                                {if (true) return productionEndTerminal("interface_type_list","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String class_body(boolean inTerminal) throws ParseException {
                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case LONG:
      case NEW:
      case BOOL:
      case OBJECT:
      case BYTE:
      case OVERRIDE:
      case CHAR:
      case PRIVATE:
      case CLASS:
      case PROTECTED:
      case CONST:
      case PUBLIC:
      case READONLY:
      case DECIMAL:
      case DELEGATE:
      case SBYTE:
      case SEALED:
      case DOUBLE:
      case SHORT:
      case ENUM:
      case EVENT:
      case STATIC:
      case EXPLICIT:
      case STRING:
      case EXTERN:
      case STRUCT:
      case FLOAT:
      case UINT:
      case ULONG:
      case IMPLICIT:
      case UNSAFE:
      case INT:
      case USHORT:
      case INTERFACE:
      case INTERNAL:
      case VIRTUAL:
      case VOID:
      case MODULE:
      case ASSEMBLY:
      case LBRACK:
      case TILDE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_20;
      }
      class_member_declaration(true);
    }
    jj_consume_token(RBRACE);
                                                   {if (true) return productionEndTerminal("class_body","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String class_member_declaration(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes(true);
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case NEW:
    case OVERRIDE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case READONLY:
    case SEALED:
    case STATIC:
    case EXTERN:
    case UNSAFE:
    case INTERNAL:
    case VIRTUAL:
      member_modifiers(true);
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    class_member_declarationEnd(true);
                                                                                       {if (true) return productionEndTerminal("class_member_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String class_member_declarationEnd(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      constant_declaration(true);
                                    {if (true) return productionEndTerminal("class_member_declarationEnd1","-","-","Replacement",first,token);}
      break;
    case EVENT:
      event_declaration(true);
                                 {if (true) return productionEndTerminal("class_member_declarationEnd2","-","-","Replacement",first,token);}
      break;
    case TILDE:
      destructor_declaration(true);
                                      {if (true) return productionEndTerminal("class_member_declarationEnd3","-","-","Replacement",first,token);}
      break;
    case EXPLICIT:
    case IMPLICIT:
      conversion_operator_declaration(true);
                                               {if (true) return productionEndTerminal("class_member_declarationEnd4","-","-","Replacement",first,token);}
      break;
    case CLASS:
    case DELEGATE:
    case ENUM:
    case STRUCT:
    case INTERFACE:
      type_declaration(true);
                                {if (true) return productionEndTerminal("class_member_declarationEnd5","-","-","Replacement",first,token);}
      break;
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      type(true);
      typeEnd(true);
                                  {if (true) return productionEndTerminal("class_member_declarationEnd6","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[110] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String typeEnd(boolean inTerminal) throws ParseException {
                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      constructor_declaration(true);
                                       {if (true) return productionEndTerminal("typeEnd1","-","-","Replacement",first,token);}
      break;
    case THIS:
      indexer_declaration_no_interface(true);
                                                {if (true) return productionEndTerminal("typeEnd2","-","-","Replacement",first,token);}
      break;
    case OPERATOR:
      operator_declaration(true);
                                    {if (true) return productionEndTerminal("typeEnd3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[111] = jj_gen;
      if (jj_2_8(2147483647)) {
        indexer_declaration_interface(true);
                                                                           {if (true) return productionEndTerminal("typeEnd4","-","-","Replacement",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MODULE:
        case ASSEMBLY:
        case IDENTIFIER:
          type_name(true);
          type_nameEnd(true);
                                            {if (true) return productionEndTerminal("typeEnd5","-","-","Replacement",first,token);}
          break;
        default:
          jj_la1[112] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String type_nameEnd(boolean inTerminal) throws ParseException {
                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      method_declaration(true);
                                  {if (true) return productionEndTerminal("type_nameEnd1","-","-","Replacement",first,token);}
      break;
    case LBRACE:
      property_declaration(true);
                                    {if (true) return productionEndTerminal("type_nameEnd2","-","-","Replacement",first,token);}
      break;
    case ASSIGN:
    case COMMA:
    case SEMI:
      field_declaration(true);
                                 {if (true) return productionEndTerminal("type_nameEnd3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[113] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String member_modifiers(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_21:
    while (true) {
      member_modifier(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case NEW:
      case OVERRIDE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case READONLY:
      case SEALED:
      case STATIC:
      case EXTERN:
      case UNSAFE:
      case INTERNAL:
      case VIRTUAL:
        ;
        break;
      default:
        jj_la1[114] = jj_gen;
        break label_21;
      }
    }
                                  {if (true) return productionEndTerminal("member_modifiers","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String member_modifier(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
                {if (true) return productionEndTerminal("member_modifier1","-","-","Replacement",first,token);}
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
                   {if (true) return productionEndTerminal("member_modifier2","-","-","Replacement",first,token);}
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
                      {if (true) return productionEndTerminal("member_modifier3","-","-","Replacement",first,token);}
      break;
    case INTERNAL:
      jj_consume_token(INTERNAL);
                     {if (true) return productionEndTerminal("member_modifier4","-","-","Replacement",first,token);}
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
                    {if (true) return productionEndTerminal("member_modifier5","-","-","Replacement",first,token);}
      break;
    case STATIC:
      jj_consume_token(STATIC);
                   {if (true) return productionEndTerminal("member_modifier6","-","-","Replacement",first,token);}
      break;
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
                    {if (true) return productionEndTerminal("member_modifier7","-","-","Replacement",first,token);}
      break;
    case SEALED:
      jj_consume_token(SEALED);
                   {if (true) return productionEndTerminal("member_modifier8","-","-","Replacement",first,token);}
      break;
    case OVERRIDE:
      jj_consume_token(OVERRIDE);
                     {if (true) return productionEndTerminal("member_modifier9","-","-","Replacement",first,token);}
      break;
    case ABSTRACT:
      jj_consume_token(ABSTRACT);
                     {if (true) return productionEndTerminal("member_modifier10","-","-","Replacement",first,token);}
      break;
    case EXTERN:
      jj_consume_token(EXTERN);
                   {if (true) return productionEndTerminal("member_modifier11","-","-","Replacement",first,token);}
      break;
    case READONLY:
      jj_consume_token(READONLY);
                     {if (true) return productionEndTerminal("member_modifier12","-","-","Replacement",first,token);}
      break;
    case UNSAFE:
      jj_consume_token(UNSAFE);
                   {if (true) return productionEndTerminal("member_modifier13","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String constant_declaration(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CONST);
    type(true);
    constant_declarators(true);
    jj_consume_token(SEMI);
                                                           {if (true) return productionEndTerminal("constant_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String constant_declarators(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    constant_declarator(true);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      constant_declarator(true);
    }
                                                                    {if (true) return productionEndTerminal("constant_declarators","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String constant_declarator(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    identifier(true);
    jj_consume_token(ASSIGN);
    expression(true);
                                               {if (true) return productionEndTerminal("constant_declarator","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String field_declaration(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    field_declaration_start(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      field_declarators(true);
      break;
    default:
      jj_la1[117] = jj_gen;
      ;
    }
    jj_consume_token(SEMI);
                                                                         {if (true) return productionEndTerminal("field_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String field_declaration_start(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      variable_initializer(true);
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
                                          {if (true) return productionEndTerminal("field_declaration_start","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String field_declarators(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    field_declarator(true);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[119] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      field_declarator(true);
    }
                                                              {if (true) return productionEndTerminal("field_declarators","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String field_declarator(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    identifier(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      variable_initializer(true);
      break;
    default:
      jj_la1[120] = jj_gen;
      ;
    }
                                                           {if (true) return productionEndTerminal("field_declarator","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String variable_initializer(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      array_initializer(true);
                                 {if (true) return productionEndTerminal("variable_initializer1","-","-","Replacement",first,token);}
      break;
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression(true);
                          {if (true) return productionEndTerminal("variable_initializer2","-","-","Replacement",first,token);}
      break;
    case STACKALLOC:
      stackalloc_initializer(true);
                                      {if (true) return productionEndTerminal("variable_initializer3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[121] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String method_declaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case PARAMS:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LBRACK:
    case IDENTIFIER:
      formal_parameter_list(true);
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    body(true);
                                                          {if (true) return productionEndTerminal("method_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String body(boolean inTerminal) throws ParseException {
                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      block(true);
                     {if (true) return productionEndTerminal("body1","-","-","Replacement",first,token);}
      break;
    case SEMI:
      jj_consume_token(SEMI);
              {if (true) return productionEndTerminal("body2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String formal_parameter_list(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes(true);
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
    formal_parameter_listEnd(true);
                                                           {if (true) return productionEndTerminal("formal_parameter_list","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String formal_parameter_listEnd(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      fixed_parameter(true);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[125] = jj_gen;
          break label_24;
        }
        fixed_parameterEnd(true);
      }
                                                           {if (true) return productionEndTerminal("formal_parameter_listEnd1","-","-","Replacement",first,token);}
      break;
    case PARAMS:
      parameter_array(true);
                               {if (true) return productionEndTerminal("formal_parameter_listEnd2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[126] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String formal_parameter_listEndInt(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      fixed_parameter(true);
                               {if (true) return productionEndTerminal("formal_parameter_listEndInt1","-","-","Replacement",first,token);}
      break;
    case PARAMS:
      parameter_array(true);
                               {if (true) return productionEndTerminal("formal_parameter_listEndInt2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String fixed_parameterEnd(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes(true);
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
    formal_parameter_listEndInt(true);
                                                                  {if (true) return productionEndTerminal("fixed_parameterEnd","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String fixed_parameter(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUT:
    case REF:
      parameter_modifier(true);
      break;
    default:
      jj_la1[129] = jj_gen;
      ;
    }
    type(true);
    identifier(true);
                                                                {if (true) return productionEndTerminal("fixed_parameter","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String parameter_modifier(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REF:
      jj_consume_token(REF);
                {if (true) return productionEndTerminal("parameter_modifier1","-","-","Replacement",first,token);}
      break;
    case OUT:
      jj_consume_token(OUT);
                {if (true) return productionEndTerminal("parameter_modifier2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[130] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String parameter_array(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(PARAMS);
    type(true);
    identifier(true);
                                              {if (true) return productionEndTerminal("parameter_array","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String property_declaration(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    accessor_declarations(true);
    jj_consume_token(RBRACE);
                                             {if (true) return productionEndTerminal("property_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String accessor_declarations(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    accessor_declaration(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
    case IDENTIFIER:
      accessor_declaration(true);
      break;
    default:
      jj_la1[131] = jj_gen;
      ;
    }
                                                                 {if (true) return productionEndTerminal("accessor_declarations","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String accessor_declaration(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes(true);
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    body(true);
                                                    {if (true) return productionEndTerminal("accessor_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String event_declaration(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EVENT);
    type(true);
    event_declarationInt(true);
                                                       {if (true) return productionEndTerminal("event_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String event_declarationInt(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_9(2)) {
      type_name(true);
      jj_consume_token(LBRACE);
      event_accessor_declarations(true);
      jj_consume_token(RBRACE);
                                                                                {if (true) return productionEndTerminal("event_declarationInt1","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODULE:
      case ASSEMBLY:
      case IDENTIFIER:
        event_variable_declarator(true);
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[133] = jj_gen;
            break label_25;
          }
          jj_consume_token(COMMA);
          event_variable_declarator(true);
        }
        jj_consume_token(SEMI);
                                                                                    {if (true) return productionEndTerminal("event_declarationInt2","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String event_variable_declarator(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    identifier(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      variable_initializer(true);
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
                                                           {if (true) return productionEndTerminal("event_variable_declarator","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String event_accessor_declarations(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    accessor_declaration(true);
    accessor_declaration(true);
                                                               {if (true) return productionEndTerminal("event_accessor_declarations","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String indexer_declaration_no_interface(boolean inTerminal) throws ParseException {
                                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(THIS);
    jj_consume_token(LBRACK);
    formal_parameter_list(true);
    jj_consume_token(RBRACK);
    jj_consume_token(LBRACE);
    accessor_declarations(true);
    jj_consume_token(RBRACE);
                                                                                        {if (true) return productionEndTerminal("indexer_declaration_no_interface","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String indexer_declaration_interface(boolean inTerminal) throws ParseException {
                                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    indexer_base(true);
    jj_consume_token(LBRACK);
    formal_parameter_list(true);
    jj_consume_token(RBRACK);
    jj_consume_token(LBRACE);
    accessor_declarations(true);
    jj_consume_token(RBRACE);
                                                                                                    {if (true) return productionEndTerminal("indexer_declaration_interface","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String indexer_base(boolean inTerminal) throws ParseException {
                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    identifier(true);
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_26;
      }
      jj_consume_token(DOT);
      indexer_baseInt(true);
    }
                                                       {if (true) return productionEndTerminal("indexer_base","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String indexer_baseInt(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      identifier(true);
                          {if (true) return productionEndTerminal("indexer_baseInt1","-","-","Replacement",first,token);}
      break;
    case THIS:
      jj_consume_token(THIS);
                 {if (true) return productionEndTerminal("indexer_baseInt2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[137] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String operator_declaration(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_10(2147483647)) {
      jj_consume_token(OPERATOR);
      unary_operator_declaration(true);
                                                                                                                                                  {if (true) return productionEndTerminal("operator_declaration1","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR:
        jj_consume_token(OPERATOR);
        binary_operator_declaration(true);
                                                      {if (true) return productionEndTerminal("operator_declaration2","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String unary_operator_declaration(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    overloadable_unary_operator(true);
    jj_consume_token(LPAREN);
    type(true);
    identifier(true);
    jj_consume_token(RPAREN);
    body(true);
                                                                                          {if (true) return productionEndTerminal("unary_operator_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String overloadable_unary_operator(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("overloadable_unary_operator1","-","-","Replacement",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("overloadable_unary_operator2","-","-","Replacement",first,token);}
      break;
    case BANG:
      jj_consume_token(BANG);
              {if (true) return productionEndTerminal("overloadable_unary_operator3","-","-","Replacement",first,token);}
      break;
    case TILDE:
      jj_consume_token(TILDE);
              {if (true) return productionEndTerminal("overloadable_unary_operator4","-","-","Replacement",first,token);}
      break;
    case INC:
      jj_consume_token(INC);
               {if (true) return productionEndTerminal("overloadable_unary_operator5","-","-","Replacement",first,token);}
      break;
    case DEC:
      jj_consume_token(DEC);
               {if (true) return productionEndTerminal("overloadable_unary_operator6","-","-","Replacement",first,token);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
                 {if (true) return productionEndTerminal("overloadable_unary_operator7","-","-","Replacement",first,token);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  {if (true) return productionEndTerminal("overloadable_unary_operator8","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String binary_operator_declaration(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    overloadable_binary_operator(true);
    jj_consume_token(LPAREN);
    type(true);
    identifier(true);
    jj_consume_token(COMMA);
    type(true);
    identifier(true);
    jj_consume_token(RPAREN);
    body(true);
                                                                                                                           {if (true) return productionEndTerminal("binary_operator_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String overloadable_binary_operator(boolean inTerminal) throws ParseException {
                                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("overloadable_binary_operator1","-","-","Replacement",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("overloadable_binary_operator2","-","-","Replacement",first,token);}
      break;
    case STAR:
      jj_consume_token(STAR);
              {if (true) return productionEndTerminal("overloadable_binary_operator3","-","-","Replacement",first,token);}
      break;
    case DIV:
      jj_consume_token(DIV);
              {if (true) return productionEndTerminal("overloadable_binary_operator4","-","-","Replacement",first,token);}
      break;
    case MOD:
      jj_consume_token(MOD);
              {if (true) return productionEndTerminal("overloadable_binary_operator5","-","-","Replacement",first,token);}
      break;
    case AMPER:
      jj_consume_token(AMPER);
              {if (true) return productionEndTerminal("overloadable_binary_operator6","-","-","Replacement",first,token);}
      break;
    case BOR:
      jj_consume_token(BOR);
              {if (true) return productionEndTerminal("overloadable_binary_operator7","-","-","Replacement",first,token);}
      break;
    case CARET:
      jj_consume_token(CARET);
              {if (true) return productionEndTerminal("overloadable_binary_operator8","-","-","Replacement",first,token);}
      break;
    case SL:
      jj_consume_token(SL);
               {if (true) return productionEndTerminal("overloadable_binary_operator9","-","-","Replacement",first,token);}
      break;
    case SR:
      jj_consume_token(SR);
               {if (true) return productionEndTerminal("overloadable_binary_operator10","-","-","Replacement",first,token);}
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
               {if (true) return productionEndTerminal("overloadable_binary_operator11","-","-","Replacement",first,token);}
      break;
    case NOT_EQUAL:
      jj_consume_token(NOT_EQUAL);
               {if (true) return productionEndTerminal("overloadable_binary_operator12","-","-","Replacement",first,token);}
      break;
    case GTHAN:
      jj_consume_token(GTHAN);
              {if (true) return productionEndTerminal("overloadable_binary_operator13","-","-","Replacement",first,token);}
      break;
    case LTHAN:
      jj_consume_token(LTHAN);
              {if (true) return productionEndTerminal("overloadable_binary_operator14","-","-","Replacement",first,token);}
      break;
    case GE:
      jj_consume_token(GE);
               {if (true) return productionEndTerminal("overloadable_binary_operator15","-","-","Replacement",first,token);}
      break;
    case LE:
      jj_consume_token(LE);
               {if (true) return productionEndTerminal("overloadable_binary_operator16","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String conversion_operator_declaration(boolean inTerminal) throws ParseException {
                                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    conversion_operator(true);
    jj_consume_token(OPERATOR);
    type(true);
    jj_consume_token(LPAREN);
    type(true);
    identifier(true);
    jj_consume_token(RPAREN);
    body(true);
                                                                                                        {if (true) return productionEndTerminal("conversion_operator_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String conversion_operator(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLICIT:
      jj_consume_token(IMPLICIT);
                     {if (true) return productionEndTerminal("conversion_operator1","-","-","Replacement",first,token);}
      break;
    case EXPLICIT:
      jj_consume_token(EXPLICIT);
                     {if (true) return productionEndTerminal("conversion_operator2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[141] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String constructor_declaration(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case PARAMS:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LBRACK:
    case IDENTIFIER:
      formal_parameter_list(true);
      break;
    default:
      jj_la1[142] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      constructor_initializer(true);
      break;
    default:
      jj_la1[143] = jj_gen;
      ;
    }
    body(true);
                                                                                          {if (true) return productionEndTerminal("constructor_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String constructor_initializer(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COLON);
    constructor_initializerInt(true);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      argument_list(true);
      break;
    default:
      jj_la1[144] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                                                            {if (true) return productionEndTerminal("constructor_initializer","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String constructor_initializerInt(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
      jj_consume_token(BASE);
                 {if (true) return productionEndTerminal("constructor_initializerInt1","-","-","Replacement",first,token);}
      break;
    case THIS:
      jj_consume_token(THIS);
                 {if (true) return productionEndTerminal("constructor_initializerInt2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[145] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String destructor_declaration(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(TILDE);
    identifier(true);
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    body(true);
                                                 {if (true) return productionEndTerminal("destructor_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String struct_declaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STRUCT);
    n = identifier(inTerminal);
                                           replaceName("identifier",n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      base_interfaces(inTerminal);
      break;
    default:
      jj_la1[146] = jj_gen;
      ;
    }
    class_body(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[147] = jj_gen;
      ;
    }
                                                                                                                                      {if (true) return productionEndNonTerminal("struct_declaration","{identifier}","{identifier}");}
    throw new Error("Missing return statement in function");
  }

  final public String base_interfaces(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COLON);
    interface_type_list(true);
                                       {if (true) return productionEndTerminal("base_interfaces","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String array_initializer(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    rest_of_array_initializer(true);
                                             {if (true) return productionEndTerminal("array_initializer","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String rest_of_array_initializer(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
              {if (true) return productionEndTerminal("rest_of_array_initializer1","-","-","Replacement",first,token);}
      break;
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STACKALLOC:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LBRACE:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      variable_initializer(true);
      rest_of_array_initializerEnd(true);
                                                                       {if (true) return productionEndTerminal("rest_of_array_initializer2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String rest_of_array_initializerEnd(boolean inTerminal) throws ParseException {
                                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
              {if (true) return productionEndTerminal("rest_of_array_initializerEnd1","-","-","Replacement",first,token);}
      break;
    case COMMA:
      jj_consume_token(COMMA);
      rest_of_array_initializer(true);
                                             {if (true) return productionEndTerminal("rest_of_array_initializerEnd2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[149] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String interface_declaration(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(INTERFACE);
    n = identifier(inTerminal);
                                              replaceName("identifier",n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      base_interfaces(inTerminal);
      break;
    default:
      jj_la1[150] = jj_gen;
      ;
    }
    interface_body(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[151] = jj_gen;
      ;
    }
                                                                                                                                             {if (true) return productionEndNonTerminal("interface_declaration","{identifier}","{identifier}");}
    throw new Error("Missing return statement in function");
  }

  final public String interface_body(boolean inTerminal) throws ParseException {
                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case NEW:
      case BOOL:
      case OBJECT:
      case BYTE:
      case CHAR:
      case DECIMAL:
      case SBYTE:
      case DOUBLE:
      case SHORT:
      case EVENT:
      case STRING:
      case FLOAT:
      case UINT:
      case ULONG:
      case UNSAFE:
      case INT:
      case USHORT:
      case VOID:
      case MODULE:
      case ASSEMBLY:
      case LBRACK:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[152] = jj_gen;
        break label_27;
      }
      interface_member_declaration(true);
    }
    jj_consume_token(RBRACE);
                                                       {if (true) return productionEndTerminal("interface_body","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String interface_member_declaration(boolean inTerminal) throws ParseException {
                                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes(true);
      break;
    default:
      jj_la1[153] = jj_gen;
      ;
    }
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case UNSAFE:
        ;
        break;
      default:
        jj_la1[154] = jj_gen;
        break label_28;
      }
      interface_member_modifier(true);
    }
    interface_member_declarationEnd(true);
                                                                                                     {if (true) return productionEndTerminal("interface_member_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String interface_member_declarationEnd(boolean inTerminal) throws ParseException {
                                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EVENT:
      interface_event_declaration(true);
                                           {if (true) return productionEndTerminal("interface_member_declarationEnd1","-","-","Replacement",first,token);}
      break;
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      type(true);
      interface_member_declarationEndType(true);
                                                              {if (true) return productionEndTerminal("interface_member_declarationEnd2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[155] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String interface_member_declarationEndType(boolean inTerminal) throws ParseException {
                                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
      interface_indexer_declaration(true);
                                             {if (true) return productionEndTerminal("interface_member_declarationEndType1","-","-","Replacement",first,token);}
      break;
    case MODULE:
    case ASSEMBLY:
    case IDENTIFIER:
      identifier(true);
      interface_member_declarationEndTypeIdentifier(true);
                                                                              {if (true) return productionEndTerminal("interface_member_declarationEndType2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[156] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String interface_member_declarationEndTypeIdentifier(boolean inTerminal) throws ParseException {
                                                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      interface_method_declaration(true);
                                            {if (true) return productionEndTerminal("interface_member_declarationEndTypeIdentifier1","-","-","Replacement",first,token);}
      break;
    case LBRACE:
      interface_property_declaration(true);
                                              {if (true) return productionEndTerminal("interface_member_declarationEndTypeIdentifier2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[157] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String interface_member_modifier(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
                {if (true) return productionEndTerminal("interface_member_modifier1","-","-","Replacement",first,token);}
      break;
    case UNSAFE:
      jj_consume_token(UNSAFE);
                   {if (true) return productionEndTerminal("interface_member_modifier2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[158] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String interface_event_declaration(boolean inTerminal) throws ParseException {
                                                           Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EVENT);
    type(true);
    identifier(true);
    jj_consume_token(SEMI);
                                                 {if (true) return productionEndTerminal("interface_event_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String interface_indexer_declaration(boolean inTerminal) throws ParseException {
                                                             Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(THIS);
    jj_consume_token(LBRACK);
    formal_parameter_list(true);
    jj_consume_token(RBRACK);
    jj_consume_token(LBRACE);
    interface_accessors(true);
    jj_consume_token(RBRACE);
                                                                                      {if (true) return productionEndTerminal("interface_indexer_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String interface_method_declaration(boolean inTerminal) throws ParseException {
                                                            Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case PARAMS:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LBRACK:
    case IDENTIFIER:
      formal_parameter_list(true);
      break;
    default:
      jj_la1[159] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMI);
                                                   {if (true) return productionEndTerminal("interface_method_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String interface_property_declaration(boolean inTerminal) throws ParseException {
                                                              Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    interface_accessors(true);
    jj_consume_token(RBRACE);
                                           {if (true) return productionEndTerminal("interface_property_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String interface_accessors(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    interface_accessor(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
    case IDENTIFIER:
      interface_accessor(true);
      break;
    default:
      jj_la1[160] = jj_gen;
      ;
    }
                                                             {if (true) return productionEndTerminal("interface_accessors","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String interface_accessor(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes(true);
      break;
    default:
      jj_la1[161] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMI);
                                             {if (true) return productionEndTerminal("interface_accessor","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String enum_declaration(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ENUM);
    n = identifier(inTerminal);
                                         replaceName("identifier",n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      enum_base(inTerminal);
      break;
    default:
      jj_la1[162] = jj_gen;
      ;
    }
    enum_body(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[163] = jj_gen;
      ;
    }
                                                                                                                             {if (true) return productionEndNonTerminal("enum_declaration","{identifier}","{identifier}");}
    throw new Error("Missing return statement in function");
  }

  final public String enum_base(boolean inTerminal) throws ParseException {
                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(COLON);
    integral_type(true);
                                 {if (true) return productionEndTerminal("enum_base","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String enum_body(boolean inTerminal) throws ParseException {
                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    rest_of_enum_body(true);
                                     {if (true) return productionEndTerminal("enum_body","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String rest_of_enum_body(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
              {if (true) return productionEndTerminal("rest_of_enum_body1","-","-","Replacement",first,token);}
      break;
    case MODULE:
    case ASSEMBLY:
    case LBRACK:
    case IDENTIFIER:
      enum_member_declaration(true);
      rest_of_enum_bodyEnd(true);
                                                                  {if (true) return productionEndTerminal("rest_of_enum_body2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String rest_of_enum_bodyEnd(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
              {if (true) return productionEndTerminal("rest_of_enum_bodyEnd1","-","-","Replacement",first,token);}
      break;
    case COMMA:
      jj_consume_token(COMMA);
      rest_of_enum_body(true);
                                     {if (true) return productionEndTerminal("rest_of_enum_bodyEnd2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[165] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String enum_member_declaration(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACK:
      attributes(true);
      break;
    default:
      jj_la1[166] = jj_gen;
      ;
    }
    identifier(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      enum_member_assignment(true);
      break;
    default:
      jj_la1[167] = jj_gen;
      ;
    }
                                                                            {if (true) return productionEndTerminal("enum_member_declaration","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String enum_member_assignment(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ASSIGN);
    expression(true);
                              {if (true) return productionEndTerminal("enum_member_assignment","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String delegate_declaration(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(DELEGATE);
    type(inTerminal);
    n = identifier(inTerminal);
                                                              replaceName("identifier",n);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BOOL:
    case OBJECT:
    case BYTE:
    case OUT:
    case CHAR:
    case PARAMS:
    case DECIMAL:
    case REF:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case STRING:
    case FLOAT:
    case UINT:
    case ULONG:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LBRACK:
    case IDENTIFIER:
      formal_parameter_list(inTerminal);
      break;
    default:
      jj_la1[168] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(SEMI);
                                                                                                                                             {if (true) return productionEndNonTerminal("delegate_declaration","{identifier}","{identifier}");}
    throw new Error("Missing return statement in function");
  }

  final public String attributes_either(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_29:
    while (true) {
      attribute_section_start(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        ;
        break;
      default:
        jj_la1[169] = jj_gen;
        break label_29;
      }
    }
                                          {if (true) return productionEndTerminal("attributes_either","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String attribute_section_start(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_11(2147483647)) {
      jj_consume_token(LBRACK);
      global_attribute_target_specifier(true);
      attribute_section(true);
                                                                                                                       {if (true) return productionEndTerminal("attribute_section_start1","-","-","Replacement",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        jj_consume_token(LBRACK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
        case EVENT:
        case IDENTIFIER:
          attribute_target_specifier(true);
          break;
        default:
          jj_la1[170] = jj_gen;
          ;
        }
        attribute_section(true);
                                                                        {if (true) return productionEndTerminal("attribute_section_start2","-","-","Replacement",first,token);}
        break;
      default:
        jj_la1[171] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String global_attribute_target_specifier(boolean inTerminal) throws ParseException {
                                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    global_attribute_target(true);
    jj_consume_token(COLON);
                                           {if (true) return productionEndTerminal("global_attribute_target_specifier","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String global_attribute_target(boolean inTerminal) throws ParseException {
                                                       Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSEMBLY:
      jj_consume_token(ASSEMBLY);
                     {if (true) return productionEndTerminal("global_attribute_target1","-","-","Replacement",first,token);}
      break;
    case MODULE:
      jj_consume_token(MODULE);
                   {if (true) return productionEndTerminal("global_attribute_target2","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[172] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String attributes(boolean inTerminal) throws ParseException {
                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    label_30:
    while (true) {
      local_attribute(true);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACK:
        ;
        break;
      default:
        jj_la1[173] = jj_gen;
        break label_30;
      }
    }
                                  {if (true) return productionEndTerminal("attributes","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String local_attribute(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
    case EVENT:
    case IDENTIFIER:
      attribute_target_specifier(true);
      break;
    default:
      jj_la1[174] = jj_gen;
      ;
    }
    attribute_section(true);
                                                                        {if (true) return productionEndTerminal("local_attribute","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String attribute_section(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    attribute(true);
    attribute_sectionEnd(true);
                                                    {if (true) return productionEndTerminal("attribute_section","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String attribute_sectionEnd(boolean inTerminal) throws ParseException {
                                                    Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACK:
      jj_consume_token(RBRACK);
              {if (true) return productionEndTerminal("attribute_sectionEnd1","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[175] = jj_gen;
      if (jj_2_12(2)) {
        jj_consume_token(COMMA);
        jj_consume_token(RBRACK);
                               {if (true) return productionEndTerminal("attribute_sectionEnd2","-","-","Replacement",first,token);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          attribute_section(true);
                                     {if (true) return productionEndTerminal("attribute_sectionEnd3","-","-","Replacement",first,token);}
          break;
        default:
          jj_la1[176] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String attribute_target_specifier(boolean inTerminal) throws ParseException {
                                                          Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    attribute_target(true);
    jj_consume_token(COLON);
                                    {if (true) return productionEndTerminal("attribute_target_specifier","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String attribute_target(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EVENT:
      jj_consume_token(EVENT);
                  {if (true) return productionEndTerminal("attribute_target1","-","-","Replacement",first,token);}
      break;
    case RETURN:
      jj_consume_token(RETURN);
                   {if (true) return productionEndTerminal("attribute_target2","-","-","Replacement",first,token);}
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
                      {if (true) return productionEndTerminal("attribute_target3","-","-","Replacement",first,token);}
      break;
    default:
      jj_la1[177] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String attribute(boolean inTerminal) throws ParseException {
                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    type_name(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      attribute_arguments(true);
      break;
    default:
      jj_la1[178] = jj_gen;
      ;
    }
                                                     {if (true) return productionEndTerminal("attribute","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String attribute_arguments(boolean inTerminal) throws ParseException {
                                                   Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LONG:
    case BASE:
    case NEW:
    case BOOL:
    case NULL:
    case OBJECT:
    case BYTE:
    case CHAR:
    case CHECKED:
    case DECIMAL:
    case SBYTE:
    case DOUBLE:
    case SHORT:
    case SIZEOF:
    case STRING:
    case FALSE:
    case THIS:
    case FLOAT:
    case TRUE:
    case TYPEOF:
    case UINT:
    case ULONG:
    case UNCHECKED:
    case INT:
    case USHORT:
    case VOID:
    case MODULE:
    case ASSEMBLY:
    case LPAREN:
    case PLUS:
    case MINUS:
    case STAR:
    case INC:
    case DEC:
    case TILDE:
    case BANG:
    case IDENTIFIER:
    case NUMERIC_LITERAL:
    case HEXADECIMAL_INTEGER_LITERAL:
    case CHARACTER_LITERAL:
    case REGULAR_STRING_LITERAL:
    case VERBATIM_STRING_LITERAL:
      expression_list(true);
      break;
    default:
      jj_la1[179] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
                                         {if (true) return productionEndTerminal("attribute_arguments","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String sizeof_expression(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(SIZEOF);
    jj_consume_token(LPAREN);
    type(true);
    jj_consume_token(RPAREN);
                                     {if (true) return productionEndTerminal("sizeof_expression","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String unsafe_statement(boolean inTerminal) throws ParseException {
                                                Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(UNSAFE);
    block(true);
                              {if (true) return productionEndTerminal("unsafe_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String pointer_member_access(boolean inTerminal) throws ParseException {
                                                     Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(ARROW);
    jj_consume_token(IDENTIFIER);
                           {if (true) return productionEndTerminal("pointer_member_access","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String fixed_statement(boolean inTerminal) throws ParseException {
                                               Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(FIXED);
    jj_consume_token(LPAREN);
    type(true);
    fixed_pointer_declarators(true);
    jj_consume_token(RPAREN);
    embedded_statement(true);
                                                                                             {if (true) return productionEndTerminal("fixed_statement","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String fixed_pointer_declarators(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    fixed_pointer_declarator(true);
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[180] = jj_gen;
        break label_31;
      }
      jj_consume_token(COMMA);
      fixed_pointer_declarator(true);
    }
                                                                              {if (true) return productionEndTerminal("fixed_pointer_declarators","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String fixed_pointer_declarator(boolean inTerminal) throws ParseException {
                                                        Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    identifier(true);
    jj_consume_token(ASSIGN);
    fixed_pointer_initializer(true);
                                                              {if (true) return productionEndTerminal("fixed_pointer_declarator","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String fixed_pointer_initializer(boolean inTerminal) throws ParseException {
                                                         Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMPER:
      jj_consume_token(AMPER);
      break;
    default:
      jj_la1[181] = jj_gen;
      ;
    }
    expression(true);
                                 {if (true) return productionEndTerminal("fixed_pointer_initializer","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public String stackalloc_initializer(boolean inTerminal) throws ParseException {
                                                      Token first=null,t;String n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STACKALLOC);
    non_array_type(true);
    jj_consume_token(LBRACK);
    expression(true);
    jj_consume_token(RBRACK);
                                                                    {if (true) return productionEndTerminal("stackalloc_initializer","-","-","Replacement",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_3R_67() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(QMARK)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(BSR_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(SR_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(SL_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(BXOR_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(UNCHECKED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(BOR_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(BAND_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(MOD_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(CHECKED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(DIV_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(STAR_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(MINUS_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(TYPEOF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(PLUS_ASN)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(BASE)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(BASE)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_3R_166()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_184()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_60()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(STACKALLOC)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    }
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_41()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_150()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_149()) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(OUT)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(REF)) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_3R_35()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(ULONG)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_36()) return true;
    if (jj_3R_35()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_204() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) return true;
    }
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(UINT)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(USHORT)) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(ARROW)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(SBYTE)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_3R_164()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_3R_155()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_3R_154()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_149()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_63()) return true;
    if (jj_3R_134()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    }
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(LBRACK)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RBRACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(OBJECT)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_45()) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(LBRACK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(128)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    if (jj_3R_69()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_151() {
    Token xsp;
    if (jj_3R_167()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_167()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_3R_163()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_162()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_3R_161()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_3R_160()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_35()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_128()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(LBRACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(VERBATIM_STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    Token xsp;
    if (jj_3R_115()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(REGULAR_STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_113()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_112()) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(HEXADECIMAL_INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_111()) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_110()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_109()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_3R_68()) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(ASSEMBLY)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(MODULE)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_107()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_87()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_36()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(DEC)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(INC)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_219()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_65()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_235()) return true;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_249() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) {
    jj_scanpos = xsp;
    if (jj_3R_254()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_249()) return true;
    if (jj_3R_215()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_240()) return true;
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_215()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(SR)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_scan_token(SL)) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_236()) return true;
    if (jj_3R_170()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_190()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_scan_token(IS)) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_226()) return true;
    return false;
  }

  final private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    }
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(GTHAN)) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(LTHAN)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(LBRACK)) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_238()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_3R_237()) return true;
    if (jj_3R_153()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_scan_token(AMPER)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_3R_170()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(BOR)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_188()) return true;
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(CARET)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(LAND)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(LOR)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_3R_227()) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_153()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_3R_136()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_118()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_104()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_216()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_36()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  public CSharpParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[182];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x5c001480,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x832100,0x832100,0x822100,0x820100,0x820100,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2837900,0x0,0x0,0x2837900,0x2836900,0x0,0x0,0x0,0x0,0x2937900,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2937900,0x0,0x100000,0x100000,0x0,0x800,0xa283f900,0x0,0x0,0x2837900,0x0,0x8283f900,0xa283f900,0xa283f900,0x0,0x0,0x80000,0x80000,0x80000,0x0,0x2837900,0x2837900,0x2837900,0x2837900,0x80008000,0x80000,0x2837900,0x2837900,0x0,0x200000,0x200000,0x0,0x0,0x2837900,0x5c001480,0x0,0x5c001480,0x0,0x0,0x54001080,0x5c001480,0x0,0x54001080,0x5c001480,0x8000000,0x54001080,0x54001080,0x0,0x0,0x0,0x0,0x7cc33180,0x0,0x54401080,0x28832100,0x40000,0x0,0x0,0x54401080,0x54401080,0x0,0x0,0x0,0x0,0x0,0x2837900,0x1932100,0x0,0x0,0x0,0x1932100,0x1932100,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x1932100,0x0,0x2937900,0x800,0x0,0x0,0x2837900,0x0,0x0,0x0,0x833100,0x0,0x1000,0x832100,0x0,0x0,0x1000,0x1932100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1932100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2837900,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x102120,0x0,0x10200000,0x10200000,0x0,0x0,0x0,0x0,0x0,0x8040642,0x8040642,0x8000642,0x8000642,0x440,0x40000,0x8000200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x19241642,0x0,0x0,0x19241642,0x19241642,0x0,0x0,0x0,0x0,0x19241646,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x19241646,0x0,0x4,0x4,0x0,0x0,0xff6416d2,0x0,0x0,0x19241642,0x0,0xff6416d2,0xff6416d2,0xff6416d2,0x400000,0x800,0x8,0x8,0x8,0xa0000080,0x19241642,0x19241642,0x19241642,0x19241642,0x4000010,0x8,0x19241642,0x19241642,0x800000,0x800000,0x0,0x0,0x0,0x19241642,0x102120,0x0,0x102120,0x0,0x0,0x100,0x102120,0x0,0x100,0x102120,0x102020,0x100,0x100,0x0,0x0,0x0,0x0,0x81fa763,0x0,0x90101,0x816a662,0x1000000,0x0,0x0,0x90101,0x90101,0x0,0x0,0x0,0x0,0x0,0x19245642,0x8040646,0x0,0x0,0x0,0x8040646,0x8040646,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x10200000,0x0,0x20000,0x8040646,0x0,0x19241646,0x1000000,0x0,0x0,0x19245642,0x0,0x0,0x0,0x8048642,0x0,0x0,0x8048642,0x1000000,0x0,0x0,0x8040646,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8040646,0x0,0x8010,0x0,0x0,0x0,0x8010,0x0,0x0,0x8010,0x0,0x19241642,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x1000,0x2000000,0x2900,0x300000,0x0,0x0,0x400000,0x2000000,0x0,0x2000000,0x0,0x310614,0x10614,0x614,0x614,0x614,0x300000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x8000,0x0,0x8000,0x0,0x0,0xa0000000,0xa0000000,0x0,0x0,0xa0000000,0x8310655,0xa0000000,0xa400000,0x8310655,0x8310655,0xa400000,0xa400000,0x8400000,0x8400000,0xa8310655,0xa400000,0x2000000,0x800000,0x8400000,0x8400000,0x8000000,0x2000000,0xa8310655,0x0,0x0,0x0,0x0,0x0,0xa8b7175f,0x0,0x0,0xa8b10655,0x0,0xa8b7175f,0xa8b7175f,0xa8b7175f,0x8,0x0,0x0,0x0,0x0,0x40000,0xa8310655,0xa8310655,0xa8310655,0xa8310655,0x2,0x300000,0xa8310655,0xa8310655,0x0,0x0,0x0,0x300000,0x8800000,0xa8310655,0x2002900,0x1000,0x2002900,0x0,0x0,0x2100,0x2900,0x2000000,0x2100,0x2002900,0x800,0x2100,0x2100,0x0,0x0,0x0,0x0,0x2316f34,0x2000000,0x6100,0x310e34,0x8000000,0x300000,0x8800000,0x6100,0x6100,0x0,0x0,0x0,0x0,0x0,0xa8b10655,0x2310614,0x800000,0x2000000,0x0,0x310614,0x310614,0x2000000,0x0,0x0,0x2000000,0x2000000,0x0,0x300000,0x0,0x400000,0x300000,0x0,0xa0000000,0xa0000000,0x20,0x2310614,0x0,0xa8310655,0x0,0x0,0x0,0xa9b10655,0x1000000,0x0,0x0,0x2310714,0x2000000,0x100,0x310614,0x300000,0x8800000,0x100,0x2310614,0x2000000,0x2000000,0x0,0x0,0x3300000,0x1000000,0x2000000,0x0,0x2310614,0x2000000,0x0,0x2000000,0x300000,0x2000000,0x0,0x4000000,0x0,0x0,0x8000000,0xa8310655,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x555455,0x555455,0x0,0x40000000,0x80000000,0x20000,0x80000,0x8000,0x20800000,0x20800000,0xf000000,0xf000000,0xf000000,0x0,0xa00,0xa00,0x0,0x0,0x2a,0x2a,0x10200182,0x0,0x10200182,0x180,0x0,0x0,0x180,0x180,0x180,0x180,0x10200182,0x180,0x0,0x0,0x180,0x180,0x0,0x0,0x10200182,0x0,0x0,0x0,0x0,0x0,0x10200182,0x0,0x400000,0x10200182,0x0,0x10200182,0x10200182,0x10200182,0x0,0x0,0x0,0x0,0x0,0x0,0x10200182,0x10200182,0x10200182,0x10200182,0x0,0x0,0x10200182,0x10200182,0x0,0x0,0x0,0x0,0x0,0x10200182,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x200000,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x400000,0x0,0x400000,0x10200182,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x10200180,0x2f8a8a2a,0x0,0x0,0x0,0x10200182,0x0,0x0,0x0,0x10200182,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10200182,0x0,0x8000,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x100,0xf800,0x0,0x0,0x0,0x0,0x0,0x1,0x100,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf900,0x0,0x40,0xf900,0xf900,0x40,0x40,0x40,0x40,0xf900,0x40,0x0,0x0,0x40,0x40,0x0,0x0,0xf900,0x1,0x0,0x0,0x1,0x0,0xf904,0x1,0x0,0xf900,0x1,0xf904,0xf904,0xf904,0x0,0x0,0x0,0x0,0x0,0x0,0xf900,0xf900,0xf900,0xf900,0x0,0x100,0xf900,0xf900,0x0,0x0,0x0,0x100,0x0,0xf900,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x4,0x1,0x1,0x100,0x0,0x0,0x100,0x0,0x100,0x5,0x0,0x0,0x1,0x1,0x0,0x1,0x0,0xf900,0x100,0x4,0x0,0x1,0x100,0x100,0x0,0x0,0x0,0x100,0x0,0x1,0x100,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x100,0x2,0xf900,0x0,0x2,0x4,0xf900,0x1,0x2,0x4,0x100,0x0,0x0,0x100,0x100,0x0,0x0,0x100,0x100,0x0,0x2,0x4,0x100,0x1,0x0,0x0,0x100,0x0,0x100,0x0,0x0,0x0,0x100,0x0,0x1,0x100,0x0,0xf900,0x1,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public CSharpParser(CharStream stream) {
    token_source = new CSharpParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 182; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 182; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public CSharpParser(CSharpParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 182; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CSharpParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 182; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[156];
    for (int i = 0; i < 156; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 182; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 156; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
