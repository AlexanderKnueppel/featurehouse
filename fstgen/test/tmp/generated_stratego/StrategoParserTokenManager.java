/* Generated By:JavaCC: Do not edit this line. StrategoParserTokenManager.java */
package tmp.generated_stratego;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;
import cide.gparser.*;
public class StrategoParserTokenManager implements StrategoParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 90;
            return 55;
         }
         if ((active0 & 0x240L) != 0L || (active1 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 90;
            return 2;
         }
         if ((active1 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 90;
            return 56;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 90;
            return 14;
         }
         if ((active0 & 0xffffffffffff8080L) != 0L || (active1 & 0x3f3ed9000003ffffL) != 0L)
         {
            jjmatchedKind = 90;
            return 31;
         }
         return -1;
      case 1:
         if ((active0 & 0xfefdfffffe738000L) != 0L || (active1 & 0x8000003feffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 1;
            }
            return 31;
         }
         if ((active0 & 0x200L) != 0L)
            return 0;
         if ((active0 & 0x1020000018c00c0L) != 0L || (active1 & 0x100L) != 0L)
            return 31;
         return -1;
      case 2:
         if ((active0 & 0xfff57ffffe230000L) != 0L || (active1 & 0x8000003ff7fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 2;
            }
            return 31;
         }
         if ((active0 & 0x8800000d08000L) != 0L || (active1 & 0x80L) != 0L)
            return 31;
         return -1;
      case 3:
         if ((active0 & 0x80206088a2030000L) != 0L || (active1 & 0x10000L) != 0L)
            return 31;
         if ((active0 & 0x7fd51f775c200000L) != 0L || (active1 & 0x2ffffL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 3;
            }
            return 31;
         }
         return -1;
      case 4:
         if ((active0 & 0x11100000000L) != 0L || (active1 & 0x7L) != 0L)
            return 31;
         if ((active0 & 0x7fd51e665c210000L) != 0L || (active1 & 0x2fff8L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 4;
            return 31;
         }
         return -1;
      case 5:
         if ((active0 & 0xa50000200200000L) != 0L || (active1 & 0x28L) != 0L)
            return 31;
         if ((active0 & 0x75851e645c010000L) != 0L || (active1 & 0x2ffd0L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 5;
            return 31;
         }
         return -1;
      case 6:
         if ((active0 & 0x1c0004000000L) != 0L || (active1 & 0x90L) != 0L)
            return 31;
         if ((active0 & 0x7585026458010000L) != 0L || (active1 & 0x2ff40L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 6;
            return 31;
         }
         return -1;
      case 7:
         if ((active0 & 0x4181004040000000L) != 0L)
            return 31;
         if ((active1 & 0x5400L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x3404022418010000L) != 0L || (active1 & 0x2ab40L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 7;
            }
            return 31;
         }
         return -1;
      case 8:
         if ((active0 & 0x6400022010010000L) != 0L || (active1 & 0x2ab00L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 8;
            }
            return 31;
         }
         if ((active0 & 0x1004000408000000L) != 0L || (active1 & 0x40L) != 0L)
            return 31;
         if ((active1 & 0x5400L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x2400002008000000L) != 0L || (active1 & 0x20000L) != 0L)
            return 31;
         if ((active0 & 0x4000020010010000L) != 0L || (active1 & 0xab00L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 9;
            return 31;
         }
         if ((active1 & 0x5400L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000000010010000L) != 0L || (active1 & 0xab00L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 10;
            return 31;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 31;
         if ((active1 & 0x5400L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x4000000000010000L) != 0L)
            return 31;
         if ((active1 & 0x5400L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x10000000L) != 0L || (active1 & 0xab00L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 11;
            return 31;
         }
         return -1;
      case 12:
         if ((active1 & 0xaa00L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x100L) != 0L)
            return 31;
         if ((active1 & 0x5400L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active1 & 0xaa00L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active1 & 0x5400L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active1 & 0xaa00L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active1 & 0x5000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active1 & 0xaa00L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active1 & 0x5000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active1 & 0xaa00L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active1 & 0x5000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active1 & 0xaa00L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active1 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active1 & 0xaa00L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active1 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active1 & 0xa200L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         if ((active1 & 0x4000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active1 & 0xa200L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active1 & 0xa200L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active1 & 0xa200L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active1 & 0x8200L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active1 & 0x8200L) != 0L)
         {
            if (jjmatchedPos < 11)
            {
               jjmatchedKind = 90;
               jjmatchedPos = 11;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 34:
         return jjStartNfaWithStates_0(0, 90, 56);
      case 35:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 36:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 37:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 39:
         return jjStartNfaWithStates_0(0, 90, 14);
      case 40:
         return jjStopAtPos(0, 95);
      case 41:
         return jjStopAtPos(0, 96);
      case 42:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 43:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 44:
         return jjStopAtPos(0, 103);
      case 45:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x90000000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 90, 55);
      case 47:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x240L, 0x0L);
      case 58:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 60:
         return jjStopAtPos(0, 105);
      case 62:
         return jjStopAtPos(0, 106);
      case 63:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 64:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 91:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 92:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 93:
         jjmatchedKind = 101;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 95:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x3L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x200002010000L, 0x1aa00L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x441c80000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1020600000c0000L, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000000100000L, 0x5400L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4084000041800000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000000084000000L, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000100000000L, 0xa4L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xa10007e18000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20008000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10020000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 97);
      case 124:
         return jjStartNfaWithStates_0(0, 90, 31);
      case 125:
         return jjStopAtPos(0, 98);
      case 126:
         return jjStartNfaWithStates_0(0, 90, 31);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 31);
         break;
      case 42:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 9, 0);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 31);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L);
      case 62:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         break;
      case 91:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         break;
      case 93:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000200002020000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 31);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8208008000100000L, active1, 0x254a0L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 31);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20010000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100428000000L, active1, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000008000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100800000800000L, active1, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800610000L, active1, 0x1aa40L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000084000000L, active1, 0x18L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4006000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080000040000000L, active1, 0x2L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x441080000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 31);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x10L);
      case 99:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L);
      case 100:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 47, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000200000L, active1, 0x100L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x40a0010050000000L, active1, 0x8L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x408000000L, active1, 0x4L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010000080020000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 108:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x102000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000010000L, active1, 0x1aa40L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xe0000000000L, active1, 0x20000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000007200000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x608000000000L, active1, 0x1L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 31);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 31);
         return jjMoveStringLiteralDfa3_0(active0, 0x541000020000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x5400L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x14000000L, active1, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 31);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 31);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x545000100000000L, active1, 0x120L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 104:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000200000000L, active1, 0x5402L);
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 31);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 31);
         break;
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x408000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000e0000000000L, active1, 0x81L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4080010040000000L, active1, 0x20000L);
      case 115:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 31);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 31);
         return jjMoveStringLiteralDfa4_0(active0, 0x810001000000000L, active1, 0xaa00L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000408000000L, active1, 0x40L);
      case 99:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x5420L);
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 31);
         break;
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0x200100004000000L, active1, 0x2aa08L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40200000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x440000000000000L, active1, 0x100L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x61850e0000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 31);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 31);
         break;
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 31);
         return jjMoveStringLiteralDfa5_0(active0, 0x6000010000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0x5400L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 31);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 31);
         break;
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x6004000000L, active1, 0x90L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0L);
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 31);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x6080000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x101100000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x40L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 31);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0xe0408000000L, active1, 0x100L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 120:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 31);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xaa00L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x101000000000000L, active1, 0x20000L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x4080000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x6000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x404000010000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x5400L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 114:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 31);
         break;
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 31);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 31);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 31);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0xaa00L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x408010000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x5400L);
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xaa00L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10010000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x5000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000002000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 31);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 31);
         break;
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 38, 31);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x408000000L, active1, 0L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 31);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000010000000L, active1, 0L);
      case 99:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 70, 31);
         break;
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 31);
         return jjMoveStringLiteralDfa9_0(active0, 0x2000022008000000L, active1, 0x20000L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xaa00L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000L);
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 60, 31);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x1000L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(9, 81, 31);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100L);
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 58, 31);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000000L, active1, 0xaa00L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 31);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 37, 31);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 61, 31);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xaa00L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000L, active1, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L, active1, 0L);
      case 109:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 41, 31);
         break;
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000L, active1, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 62, 31);
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xaa00L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 16, 31);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4400L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xaa00L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1400L);
      case 103:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 72, 31);
         break;
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(12, 28, 31);
         break;
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa14_0(active1, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active1, 0x4000L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active1, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa14_0(active1, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0xa00L);
      case 120:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(13, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
private final int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa15_0(active1, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active1, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active1, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active1, 0x200L);
      case 121:
         return jjMoveStringLiteralDfa15_0(active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
private final int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active1, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active1, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active1, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa16_0(active1, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active1, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
private final int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa17_0(active1, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active1, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active1, 0x200L);
      case 115:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(16, 76);
         break;
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0x8800L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
private final int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa18_0(active1, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active1, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active1, 0xa000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
private final int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1);
      return 18;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa19_0(active1, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active1, 0xa000L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active1, 0x4000L);
      case 120:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(18, 75);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1);
}
private final int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1);
      return 19;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa20_0(active1, 0x8000L);
      case 115:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(19, 78);
         return jjMoveStringLiteralDfa20_0(active1, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active1, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1);
}
private final int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1);
      return 20;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa21_0(active1, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa21_0(active1, 0x8000L);
      case 121:
         return jjMoveStringLiteralDfa21_0(active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1);
}
private final int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1);
      return 21;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa22_0(active1, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa22_0(active1, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa22_0(active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1);
}
private final int jjMoveStringLiteralDfa22_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1);
      return 22;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa23_0(active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa23_0(active1, 0x8000L);
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(22, 77);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1);
}
private final int jjMoveStringLiteralDfa23_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1);
      return 23;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa24_0(active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa24_0(active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1);
}
private final int jjMoveStringLiteralDfa24_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1);
      return 24;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa25_0(active1, 0x200L);
      case 115:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(24, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1);
}
private final int jjMoveStringLiteralDfa25_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(23, 0L, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1);
      return 25;
   }
   switch(curChar)
   {
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(25, 73);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 55;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x87ffecbe00000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(31);
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0x87ffecbe00000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(31);
                  }
                  if ((0x8400ecbe00000000L & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 94)
                        kind = 94;
                     jjCheckNAddStates(0, 6);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(7, 9);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 39)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 55:
                  if ((0x87ffecbe00000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(31);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAddStates(15, 17);
                  }
                  break;
               case 14:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(15);
                  if ((0x87ffecbe00000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(31);
                  }
                  break;
               case 56:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 34)
                  {
                     if (kind > 89)
                        kind = 89;
                  }
                  if ((0x87ffecbe00000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(31);
                  }
                  break;
               case 2:
                  if ((0x87ffecbe00000000L & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(31);
                  }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(15, 17);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if (curChar == 39)
                     jjAddStates(13, 14);
                  break;
               case 15:
                  if (curChar == 39 && kind > 88)
                     kind = 88;
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 15);
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 26:
                  if (curChar == 34 && kind > 89)
                     kind = 89;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if ((0x87ffecbe00000000L & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(31);
                  break;
               case 35:
                  if ((0x8400ecbe00000000L & l) != 0L && kind > 126)
                     kind = 126;
                  break;
               case 36:
                  if (curChar != 48)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(7, 9);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(38, 6);
                  break;
               case 39:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(39, 6);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAddStates(0, 6);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar != 46)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(22, 24);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(22, 24);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddTwoStates(46, 12);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 49:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddTwoStates(50, 12);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 31:
                  if ((0x57fffffe97ffffffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(31);
                  break;
               case 3:
                  if ((0x57fffffe97ffffffL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                  }
                  else if ((0x5000000090000001L & l) != 0L)
                  {
                     if (kind > 126)
                        kind = 126;
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 93)
                        kind = 93;
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                  }
                  break;
               case 55:
                  if ((0x57fffffe97ffffffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(31);
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(15);
                  else if (curChar == 92)
                     jjAddStates(28, 30);
                  if ((0x57fffffe97ffffffL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(31);
                  }
                  break;
               case 56:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 92)
                     jjAddStates(31, 33);
                  if ((0x57fffffe97ffffffL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAdd(31);
                  }
                  break;
               case 2:
                  if ((0x57fffffe97ffffffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAdd(31);
                  break;
               case 1:
                  if (kind > 8)
                     kind = 8;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 82)
                     kind = 82;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 12:
                  if ((0x5000000050L & l) != 0L && kind > 86)
                     kind = 86;
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(28, 30);
                  break;
               case 17:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 24:
                  if (curChar == 92)
                     jjAddStates(31, 33);
                  break;
               case 25:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               case 33:
                  if ((0x7fffffe00000000L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 34:
                  if ((0x7fffffeL & l) != 0L && kind > 93)
                     kind = 93;
                  break;
               case 35:
                  if ((0x5000000090000001L & l) != 0L && kind > 126)
                     kind = 126;
                  break;
               case 37:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddTwoStates(38, 6);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 48:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 56:
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 55 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x2000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x1000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   41, 42, 47, 48, 51, 52, 12, 37, 39, 6, 23, 24, 26, 14, 16, 8, 
   9, 12, 23, 24, 28, 26, 43, 44, 12, 51, 52, 12, 17, 18, 20, 25, 
   27, 29, 10, 11, 45, 46, 49, 50, 53, 54, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\141\154\154", "\143\157\156\163\164\162\165\143\164\157\162\163", 
"\146\141\151\154", "\151\144", "\151\156", "\154\145\164", "\155\157\144\165\154\145", 
"\156\157\164", "\157\156\145", "\157\156", "\143\141\154\154", 
"\160\162\157\143\145\145\144", "\163\151\147\156\141\164\165\162\145\163", 
"\163\160\145\143\151\146\151\143\141\164\151\157\156", "\167\151\164\150", "\157\166\145\162\154\141\171\163", "\160\162\151\155", 
"\162\165\154\145\163", "\163\143\162\151\160\164", "\163\151\147\156\141\164\165\162\145", 
"\163\157\155\145", "\163\157\162\164\163", "\163\164\162\141\164\145\147\151\145\163", 
"\163\164\162\141\164\145\147\157", "\164\145\163\164", "\167\150\145\162\145", 
"\151\155\160\157\162\164\55\164\145\162\155", "\151\155\160\157\162\164\163", "\145\170\160\157\162\164\163", 
"\150\151\144\144\145\156\163", "\143\141\163\145", "\145\154\163\145", "\145\156\144", 
"\145\170\164\145\162\156\141\154", "\151\146", "\157\164\150\145\162\167\151\163\145", "\162\145\143", 
"\163\167\151\164\143\150", "\164\150\145\156", "\145\170\164\145\156\144", 
"\157\166\145\162\162\151\144\145", "\151\156\164\145\162\156\141\154", "\163\145\141\154\145\144", 
"\145\170\164\145\156\163\151\142\154\145", "\163\171\156\164\141\170", "\166\141\162\151\141\142\154\145\163", 
"\160\162\151\157\162\151\164\151\145\163", "\157\166\145\162\162\151\144\145\141\142\154\145", "\154\145\146\164", 
"\141\163\163\157\143", "\141\166\157\151\144", "\162\151\147\150\164", "\160\162\145\146\145\162", 
"\142\162\141\143\153\145\164", "\162\145\152\145\143\164", "\156\157\156\55\141\163\163\157\143", 
"\162\145\143\157\166\145\162", "\151\156\144\145\156\164\160\141\144\144\151\156\147", 
"\143\157\156\164\145\170\164\55\146\162\145\145\40\163\164\141\162\164\55\163\171\155\142\157\154\163", "\154\145\170\151\143\141\154\40\163\171\156\164\141\170", 
"\143\157\156\164\145\170\164\55\146\162\145\145\40\163\171\156\164\141\170", "\154\145\170\151\143\141\154\40\166\141\162\151\141\142\154\145\163", 
"\143\157\156\164\145\170\164\55\146\162\145\145\40\160\162\151\157\162\151\164\151\145\163", 
"\154\145\170\151\143\141\154\40\162\145\163\164\162\151\143\164\151\157\156\163", 
"\143\157\156\164\145\170\164\55\146\162\145\145\40\162\145\163\164\162\151\143\164\151\157\156\163", "\143\157\156\163", "\144\145\160\162\145\143\141\164\145\144", null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\50", "\51", 
"\173", "\175", "\133", "\133\133", "\135", "\135\135", "\54", "\55\76", "\74", "\76", 
"\55\57\55", "\72", "\56", "\77", "\41", "\47", "\45", "\137", "\44", "\100", "\176", 
"\42", "\57", "\134", "\43", "\174", "\53", "\55", "\52", null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_SINGLE_LINE_COMMENT_SDF", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff8001L, 0x7fffffffff47ffffL, 
};
static final long[] jjtoSkip = {
   0x3c3eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3c3eL, 0x0L, 
};
static final long[] jjtoMore = {
   0x43c0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[55];
private final int[] jjstateSet = new int[110];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public StrategoParserTokenManager(CharStream stream){
   input_stream = stream;
}
public StrategoParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 55; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.offset = input_stream.getOffset();
   t.length = input_stream.getLength();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 8 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                           input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
