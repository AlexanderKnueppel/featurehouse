/* Generated By:JavaCC: Do not edit this line. StrategoParserTokenManager.java */
package tmp.generated_stratego;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;
import cide.gparser.*;
public class StrategoParserTokenManager implements StrategoParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x140L) != 0L || (active1 & 0x200000000L) != 0L)
            return 2;
         if ((active1 & 0x2000000000L) != 0L)
            return 8;
         if ((active0 & 0xffffffffffffe000L) != 0L || (active1 & 0x10000000000007L) != 0L)
         {
            jjmatchedKind = 81;
            return 58;
         }
         if ((active1 & 0x2000000000000L) != 0L)
            return 14;
         if ((active1 & 0x20000000000000L) != 0L)
            return 59;
         if ((active1 & 0x40000000000L) != 0L)
            return 32;
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x8100002988000000L) != 0L)
            return 58;
         if ((active0 & 0x7effffd677ffe000L) != 0L || (active1 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 1;
            }
            return 58;
         }
         return -1;
      case 2:
         if ((active0 & 0x440000e12000000L) != 0L)
            return 58;
         if ((active0 & 0xfabfffd06dffe000L) != 0L || (active1 & 0x7L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 2;
            }
            return 58;
         }
         return -1;
      case 3:
         if ((active0 & 0x10324a4040020000L) != 0L)
            return 58;
         if ((active0 & 0xea8db5902ffde000L) != 0L || (active1 & 0x7L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 3;
            return 58;
         }
         return -1;
      case 4:
         if ((active0 & 0x41000001d0000L) != 0L)
            return 58;
         if ((active0 & 0xea89a5902fe0e000L) != 0L || (active1 & 0x7L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
            return 58;
         }
         return -1;
      case 5:
         if ((active0 & 0x2800000000a02000L) != 0L || (active1 & 0x1L) != 0L)
            return 58;
         if ((active0 & 0xc289a5902f40c000L) != 0L || (active1 & 0x6L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 5;
            return 58;
         }
         return -1;
      case 6:
         if ((active0 & 0x9002408000L) != 0L)
            return 58;
         if ((active0 & 0xc289a5002d004000L) != 0L || (active1 & 0x6L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
            return 58;
         }
         return -1;
      case 7:
         if ((active0 & 0xc081040000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 58;
         if ((active0 & 0x208a1002d004000L) != 0L || (active1 & 0x2L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 7;
            }
            return 58;
         }
         return -1;
      case 8:
         if ((active0 & 0x200210001000000L) != 0L)
            return 58;
         if ((active0 & 0x880002c004000L) != 0L || (active1 & 0x6L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 81;
               jjmatchedPos = 8;
            }
            return 58;
         }
         return -1;
      case 9:
         if ((active0 & 0x810004000000L) != 0L || (active1 & 0x2L) != 0L)
            return 58;
         if ((active0 & 0x8000028004000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 9;
            return 58;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000000000000L) != 0L)
            return 58;
         if ((active0 & 0x28004000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 10;
            return 58;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000L) != 0L || (active1 & 0x4L) != 0L)
            return 58;
         if ((active0 & 0x8004000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 11;
            return 58;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 3);
      case 12:
         return jjStopAtPos(0, 5);
      case 13:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         return jjStopAtPos(0, 103);
      case 34:
         return jjStartNfaWithStates_0(0, 117, 59);
      case 35:
         return jjStopAtPos(0, 104);
      case 36:
         return jjStartNfaWithStates_0(0, 106, 32);
      case 37:
         return jjStopAtPos(0, 110);
      case 38:
         return jjStopAtPos(0, 109);
      case 39:
         return jjStartNfaWithStates_0(0, 113, 14);
      case 40:
         return jjStopAtPos(0, 86);
      case 41:
         return jjStopAtPos(0, 87);
      case 42:
         return jjStopAtPos(0, 96);
      case 43:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 98);
      case 45:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x0L);
      case 46:
         return jjStartNfaWithStates_0(0, 101, 8);
      case 47:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe200000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 99);
      case 60:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000000L, 0x0L);
      case 62:
         return jjStopAtPos(0, 93);
      case 63:
         return jjStopAtPos(0, 102);
      case 64:
         return jjStopAtPos(0, 105);
      case 91:
         return jjStopAtPos(0, 90);
      case 92:
         return jjStopAtPos(0, 118);
      case 93:
         return jjStopAtPos(0, 91);
      case 94:
         return jjStopAtPos(0, 111);
      case 95:
         return jjStartNfaWithStates_0(0, 81, 58);
      case 96:
         return jjStopAtPos(0, 112);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100c0000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10004020000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1004000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20e0000000000000L, 0x2L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8108000188008000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200020000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x401000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x4200042800000000L, 0x4L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x88000200000L, 0x0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x400100002900000L, 0x0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x801e10000014000L, 0x1L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1002000000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4020000000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L, 0x1L);
      case 124:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 89);
      case 126:
         return jjStopAtPos(0, 108);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 43:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         else if ((active1 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 125;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 45:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 61:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 62:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      case 94:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10004040000000L, active1, 0L, active2, 0L);
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 58);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x402001206820000L, active1, 0x1L, active2, 0L);
      case 102:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 56, 58);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004000000000000L, active1, 0L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x230000100000L, active1, 0L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000010000000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000008000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8040000808000000L, active1, 0L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x400421012000L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x88000600000L, active1, 0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x201800000000000L, active1, 0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000040000080000L, active1, 0x4L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2080000000000000L, active1, 0x2L, active2, 0L);
      case 124:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      case 125:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(2, 127);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x1L);
      case 99:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 100:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 58);
         return jjMoveStringLiteralDfa3_0(active0, 0x8002000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 58);
         return jjMoveStringLiteralDfa3_0(active0, 0x5004040000204000L, active1, 0x4L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x210000100000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x800080040000000L, active1, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 58);
         return jjMoveStringLiteralDfa3_0(active0, 0x104000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x21000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000080000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8001004008000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000010000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x32000000040000L, active1, 0L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 58);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 58);
         return jjMoveStringLiteralDfa3_0(active0, 0xa080020000000000L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000404000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 58);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 58);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 58);
         return jjMoveStringLiteralDfa4_0(active0, 0xa280101008800000L, active1, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 104:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 58);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 58);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 58);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L);
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 58);
         break;
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 58);
         return jjMoveStringLiteralDfa4_0(active0, 0x210000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000002048000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4004040004000000L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 58);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 58);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000010000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x210001000000L, active1, 0L);
      case 99:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 58);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000800000L, active1, 0L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 58);
         break;
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 58);
         return jjMoveStringLiteralDfa5_0(active0, 0x8004200000L, active1, 0x1L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000002000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000001008000000L, active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc288000000008000L, active1, 0x4L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 58);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 58);
         break;
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 58);
         return jjMoveStringLiteralDfa5_0(active0, 0x1800020000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0L);
      case 100:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 58);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 58);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 58);
         return jjMoveStringLiteralDfa6_0(active0, 0x1808002400000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L);
      case 104:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 58);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x8080000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 58);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0x2L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 58);
         return jjMoveStringLiteralDfa6_0(active0, 0x8210008008000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8080000004000000L, active1, 0L);
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 58);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x4L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000004000L, active1, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 58);
         break;
      case 115:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 58);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 36, 58);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 58);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x210020000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20004000L, active1, 0L);
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 58);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 58);
         break;
      case 111:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 58);
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x210000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 58);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000004000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L, active1, 0x4L);
      case 99:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 58);
         break;
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 57, 58);
         return jjMoveStringLiteralDfa9_0(active0, 0x8810004000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 58);
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L, active1, 0L);
      case 101:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(9, 65, 58);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 58);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 58);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x8004000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4L);
      case 109:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 51, 58);
         break;
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(11, 66, 58);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L, active1, 0L);
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 29, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 103:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(12, 27, 58);
         break;
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(12, 14, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 58;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 59:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 34)
                  {
                     if (kind > 74)
                        kind = 74;
                  }
                  break;
               case 14:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 58:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddTwoStates(34, 35);
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 81)
                        kind = 81;
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(3, 9);
                  }
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddTwoStates(34, 35);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddStates(15, 17);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 15:
                  if (curChar == 39 && kind > 73)
                     kind = 73;
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 15);
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 23:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 25:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 26:
                  if (curChar == 34 && kind > 74)
                     kind = 74;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 42 && kind > 81)
                     kind = 81;
                  break;
               case 39:
                  if (curChar != 48)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddStates(12, 14);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(41, 6);
                  break;
               case 42:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(42, 6);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(3, 9);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar != 46)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddStates(22, 24);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddStates(22, 24);
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(49, 12);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAddTwoStates(53, 12);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 59:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 92)
                     jjAddStates(28, 30);
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(15);
                  else if (curChar == 92)
                     jjAddStates(31, 33);
                  break;
               case 58:
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 81)
                        kind = 81;
                     jjCheckNAddTwoStates(34, 35);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                  }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                  }
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 67)
                     kind = 67;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 12:
                  if ((0x5000000050L & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(31, 33);
                  break;
               case 17:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 24:
                  if (curChar == 92)
                     jjAddStates(28, 30);
                  break;
               case 25:
                  if ((0x34404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 32:
                  if (curChar == 91 && kind > 75)
                     kind = 75;
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 82)
                     kind = 82;
                  break;
               case 37:
                  if ((0x7fffffe00000000L & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 38:
                  if ((0x7fffffeL & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 40:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAddTwoStates(41, 6);
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 59:
               case 23:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 58 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 93:
         return jjStopAtPos(0, 78);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 91:
         return jjStopAtPos(0, 77);
      case 93:
         return jjStopAtPos(0, 76);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
   23, 24, 26, 44, 45, 50, 51, 54, 55, 12, 14, 16, 40, 42, 6, 8, 
   9, 12, 23, 24, 28, 26, 46, 47, 12, 54, 55, 12, 25, 27, 29, 17, 
   18, 20, 10, 11, 48, 49, 52, 53, 56, 57, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\155\157\144\165\154\145", "\163\160\145\143\151\146\151\143\141\164\151\157\156", 
"\151\155\160\157\162\164\163", "\163\157\162\164\163", "\154\145\146\164", "\141\163\163\157\143", 
"\141\166\157\151\144", "\162\151\147\150\164", "\160\162\145\146\145\162", 
"\142\162\141\143\153\145\164", "\162\145\152\145\143\164", "\156\157\156\55\141\163\163\157\143", 
"\162\145\143\157\166\145\162", "\144\145\160\162\145\143\141\164\145\144", 
"\151\156\144\145\156\164\160\141\144\144\151\156\147", "\141\154\154", "\143\157\156\163\164\162\165\143\164\157\162\163", 
"\146\141\151\154", "\151\144", "\151\156", "\154\145\164", "\156\157\164", "\157\156\145", 
"\144\145\160\145\156\144\163", "\157\156", "\143\141\154\154", "\160\162\157\143\145\145\144", 
"\163\151\147\156\141\164\165\162\145\163", "\167\151\164\150", "\157\166\145\162\154\141\171\163", "\160\162\151\155", 
"\162\165\154\145\163", "\163\151\147\156\141\164\165\162\145", "\163\157\155\145", 
"\163\164\162\141\164\145\147\151\145\163", "\163\164\162\141\164\145\147\157", "\164\145\163\164", 
"\167\150\145\162\145", "\151\155\160\157\162\164\55\164\145\162\155", "\143\141\163\145", 
"\145\154\163\145", "\145\156\144", "\145\170\164\145\162\156\141\154", "\151\146", 
"\157\164\150\145\162\167\151\163\145", "\162\145\143", "\163\167\151\164\143\150", "\164\150\145\156", 
"\145\170\164\145\156\144", "\157\166\145\162\162\151\144\145", "\151\156\164\145\162\156\141\154", 
"\163\145\141\154\145\144", "\145\170\164\145\156\163\151\142\154\145", 
"\157\166\145\162\162\151\144\145\141\142\154\145", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", 
"\74", "\76", "\53", "\55", "\52", "\57", "\54", "\73", "\72", "\56", "\77", "\41", 
"\43", "\100", "\44", "\174", "\176", "\46", "\45", "\136", "\140", "\47", "\55\76", 
"\75", "\137", "\42", "\134", "\173\174", "\174\175", "\72\75", "\75\76", "\74\53", 
"\53\76", "\72\53", "\72\55", "\72\53\75", "\173\136", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_SINGLE_LINE_COMMENT", 
   "IN_FORMAL_COMMENT", 
   "IN_MULTI_LINE_COMMENT", 
   "STATEONE", 
   "STATETWO", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   4, 0, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0xfffffffffffe0e8fL, 0x1L, 
};
static final long[] jjtoSkip = {
   0xe3eL, 0x7000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe3eL, 0x7000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11c0L, 0x18000L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[58];
private final int[] jjstateSet = new int[116];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public StrategoParserTokenManager(CharStream stream){
   input_stream = stream;
}
public StrategoParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 58; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   t.offset = input_stream.getOffset();
   t.length = input_stream.getLength();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 79)
         {
            jjmatchedKind = 79;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 80)
         {
            jjmatchedKind = 80;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                           input_stream.backup(1);
         break;
      default : 
         break;
   }
}
}
