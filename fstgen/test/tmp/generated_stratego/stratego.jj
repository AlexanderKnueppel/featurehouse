options {
	STATIC = false;
	FORCE_LA_CHECK = false;
	DEBUG_PARSER = true;
}

PARSER_BEGIN(StrategoParser)
package tmp.generated_stratego;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class StrategoParser extends AbstractFSTParser 
{
	public StrategoParser(){}
}

PARSER_END(StrategoParser)

/*****************************************************************************
 * WHITE SPACE                                                               *
 *****************************************************************************/
SPECIAL_TOKEN : 
	{ " " | 
      "\t" | 
      "\n" | 
      "\r" | 
      "\f" 
    }
/*****************************************************************************
 * COMMENTS                                                                  *
 *****************************************************************************/
MORE :
	{ "//" : IN_SINGLE_LINE_COMMENT |
	  "%%" : IN_SINGLE_LINE_COMMENT_SDF |
	  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT |
	  "/*" : IN_MULTI_LINE_COMMENT 
	}
	<IN_SINGLE_LINE_COMMENT>
		SPECIAL_TOKEN :
			{ <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT }
	<IN_SINGLE_LINE_COMMENT_SDF>
		SPECIAL_TOKEN :
			{ <SINGLE_LINE_COMMENT_SDF: "\n" | "\r" | "\r\n" > : DEFAULT }
	<IN_FORMAL_COMMENT>
		SPECIAL_TOKEN :
			{ <FORMAL_COMMENT: "*/" > : DEFAULT }
	<IN_MULTI_LINE_COMMENT>
		SPECIAL_TOKEN :
			{ <MULTI_LINE_COMMENT: "*/" > : DEFAULT }
	<IN_SINGLE_LINE_COMMENT,IN_SINGLE_LINE_COMMENT_SDF,
	 IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
		MORE :
			{ < ~[] > }
/*****************************************************************************
 * RESERVED KEYWORDS AND LITERALS                                            *
 *****************************************************************************/
/*****************************************************************************
 * MODULE DECLARATION                                                        *
 *****************************************************************************/
TOKEN :
	{ < MODULE: "module" > |
	  < SPECIFICATION: "specification" > |
	  < IMPORTS: "imports" > | 
	  < EXPORTS: "exports" > |
	  < HIDDENS: "hiddens" >
	}
/*****************************************************************************
 * GRAMMAR DECLARATION                                                       *
 *****************************************************************************/
TOKEN :
	{ < SORTS: "sorts" > |
	  < STARTSYMBOL: "context-free start-symbols" >
	}
/*****************************************************************************
 * PRODUCTION DECLARATION                                                    *
 *****************************************************************************/
TOKEN :
	{ < SYNTAX: "syntax" > |
	  < VARIABLES: "variables" > |
	  < LEXICALSYNTAX: "lexical syntax" > |
	  < CFREESYNTAX: "context-free syntax"> |
	  < LEXICALVARS: "lexical variables" > |
	  < CONS: "cons" > 
	}
/*****************************************************************************
 * DISAMBIGUATION DECLARATION                                                *
 *****************************************************************************/
TOKEN :
	{ < LEFT: "left" > |
	  < ASSOC: "assoc" > |
	  < AVOID: "avoid" > |
	  < RIGHT: "right" > |
	  < PREFER: "prefer" > |
	  < BRACKET: "bracket" > |
	  < REJECT: "reject" > |
	  < NONASSOC: "non-assoc" > |
	  < RECOVER: "recover" > |
	  < DEPRECATED: "deprecated" > | 
	  < INDENTPADDING: "indentpadding" > |
	  < PRIORITIES: "priorities" > |
	  < CFREEPRIORITIES: "context-free priorities" > |
	  < LEXICALRESTRICTIONS: "lexical restrictions" > |
	  < CFREERESTRICTIONS: "context-free restrictions" > 
	}
/*****************************************************************************
 * TRANSFORMATION DECLARATION                                                *
 *****************************************************************************/
TOKEN :
	{ < ALL: "all" > | 
	  < CONSTRUCTORS: "constructors" > | 
	  < FAIL: "fail" > |
	  < ID: "id" > | 
	  < IN: "in" > | 
	  < LET: "let" > |
	  < NOT: "not" > | 
	  < ONE: "one" > |
	  < DEPENDS: "depends" > |
	  < ON: "on" > |
	  < CALL: "call" > |
	  < PROCEED: "proceed" > |
	  < SIGNATURES: "signatures" > |
	  < WITH: "with" > |
	  < OVERLAYS: "overlays" > | 
	  < PRIM: "prim" > |
	  < RULES: "rules" > | 
	  < SCRIPT: "script" > | 
	  < SIGNATURE: "signature" > | 
	  < SOME: "some" > |
	  < STRATEGIES: "strategies" > | 
	  < STRATEGO: "stratego" > | 
	  < TEST: "test" > | 
	  < WHERE: "where" > | 
	  < IMPORTTERM: "import-term" > | 
	  < CASE: "case" > |
	  < ELSE: "else" > | 
	  < END: "end" > | 
	  < EXTERNAL: "external" > | 
	  < IF: "if" > |
	  < OTHERWISE: "otherwise" > | 
	  < REC: "rec" > | 
	  < SWITCH: "switch" > | 
	  < THEN: "then" > | 
	  < EXTEND: "extend" > | 
	  < OVERRIDE: "override" > |
	  < INTERNAL: "internal" > | 
	  < SEALED: "sealed" > | 
	  < EXTENSIBLE: "extensible" > |
	  < OVERRIDABLE: "overrideable" > 
	}
/*****************************************************************************
 * LITERALS                                                                  *
 *****************************************************************************/
TOKEN :
	{ < INTEGER_LITERAL:
		<DECIMAL_LITERAL> (["l","L"])? | 
	  	<HEX_LITERAL> (["l","L"])? | 
	  	<OCTAL_LITERAL> (["l","L"])? > |
	  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* > |
	  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ > |
	  < #OCTAL_LITERAL: "0" (["0"-"7"])* > |
	  < FLOATING_POINT_LITERAL:
    	(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])? | 
    	"." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])? | 
    	(["0"-"9"])+ <EXPONENT> (["f","F","d","D"])? | 
    	(["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"] > |
	  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > |
	  < CHARACTER_LITERAL:
	  	"'" ( (~["'","\\","\n","\r"]) | 
			("\\"
				( ["n","t","b","r","f","u","\\","'","\""] | 
				  ["0"-"7"] ( ["0"-"7"] )? | 
				  ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) ) "'" > |
	  < STRING_LITERAL:
    	"\"" ( (~["\"","\\"]) | 
			 ("\\"
				( ["n","t","b","r","f","u","\\","'","\""] | 
				  ["0"-"7"] ( ["0"-"7"] )? | 
				  ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "\"" >
	}
/*****************************************************************************
 * IDENTIFIER                                                                *
 *****************************************************************************/
/*TOKEN :
	{ < IDENTIFIER: (<LETTER>|<DIGIT>) (<LETTER>|<DIGIT>)* > |
	  < LETTER: (<LCCHAR>|<UCCHAR>) > |
	  < LCCHAR: [ "\u0061"-"\u007a" ] > |
	  < UCCHAR: [ "\u0041"-"\u005a" ] > |
	  < DIGIT: [ "\u0030"-"\u0039" ] >
	}*/
TOKEN :
	{ < IDENTIFIER: (<LETTER>|<DIGIT>) 
	                (<LETTER>|<DIGIT>|<APOSTROPHE>|<MINUS>)* > |
	  < LETTER: (<LCCHAR>|<UCCHAR>) > |
	  < LCCHAR: [ "a"-"z" ] > |
	  < UCCHAR: [ "A"-"Z" ] > |
	  < DIGIT: [ "0"-"9" ] >
	}
/*****************************************************************************
 * PARENTHESIS                                                               *
 *****************************************************************************/
TOKEN :
	{ < LPAREN: "(" > | 
	  < RPAREN: ")" > | 
	  < LBRACE: "{" > | 
	  < RBRACE: "}" > | 
	  < LBRACKET: "[" > |
	  < RBRACKET: "]" > |
	  < DLBRACKET: "[[" > | 
	  < DRBRACKET: "]]" > |
	  < LT: "<" > |
	  < GT: ">" > 
	}
/*****************************************************************************
 * OPERATORS                                                                 *
 *****************************************************************************/
TOKEN :
	{ < PLUS: "+" > |
	  < MINUS: "-" > |
	  < STAR: "*" > |
	  < SLASH: "/" >
	}
/*****************************************************************************
 * SEPARATORS                                                                *
 *****************************************************************************/
TOKEN :
	{ < COMMA: "," > |
	  < SEMICOLON: ";" > |
	  < DDOT: ":" > |
	  < DOT: "." > |
	  < QUESTIONMARK: "?" > |
	  < EXCLAMATIONMARK: "!" >
	}
/*****************************************************************************
 * SPECIAL SIGNS                                                             *
 *****************************************************************************/
TOKEN :
	{ < NUMBERSIGN: "#" > |
	  < AT: "@" > |
	  < DOLLAR: "$" > |
	  < VERTICALLINE: "|" > |
	  < TILDE: "~" > |
	  < AMPERSAND: "&" > |
	  < PERCENTAGE: "%" > |
	  < CIRCUMFLEXACCENT: "^" > |
	  < GRAVEACCENT: "`" > |
	  < APOSTROPHE: "'" > |
	  < ARROW: "->" > |
	  < ASSIGN: "=" > |
	  < NOTALLOWED: "-/-" > |
	  < LOWLINE: "_" > |
	  < QUOTATIONMARK: "\"" > |
	  < BACKSLASH: "\\" >
	}
FSTInfo NatInteger(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INTEGER_LITERAL> {return productionEndTerminal("NatInteger","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RealDigit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INTEGER_LITERAL> "." <INTEGER_LITERAL> {return productionEndTerminal("RealDigit","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Int(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[<MINUS>] n=NatInteger(true){ replaceName(n);} {return productionEndTerminal("Int","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Real(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[<MINUS>] n=RealDigit(true){ replaceName(n);} {return productionEndTerminal("Real","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo String(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<STRING_LITERAL> {return productionEndTerminal("String","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Char(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<CHARACTER_LITERAL> {return productionEndTerminal("Char","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Id(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} {return productionEndTerminal("Id","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}

 )  }

FSTInfo Module(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ModuleDeclaration(true){ replaceName(n);} [n=ImportDeclaration(true){ replaceName(n);}] [n=ExportDeclaration(true){ replaceName(n);}] [n=HiddenDeclaration(true){ replaceName(n);}] [n=TrafoDeclaration(true){ replaceName(n);}] <EOF> {return productionEndTerminal("Module","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ModuleDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"module" n=ModName(true){ replaceName(n);} [n=ModuleParameter(true){ replaceName(n);}] {return productionEndTerminal("ModuleDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ModuleParameter(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"[" (n=ModuleSort(true){ replaceName(n);})+ "]" {return productionEndTerminal("ModuleParameter","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ModuleSort(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} {return productionEndTerminal("ModuleSort1","-","-","Replacement","Default",first,token);}
 |
	"[[" n=Id(true){ replaceName(n);} "]]" {return productionEndTerminal("ModuleSort2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ModName(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} (LOOKAHEAD(2) "/" n=Id(true){ replaceName(n);})* {return productionEndTerminal("ModName","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ImportModName(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ModName(true){ replaceName(n);} [n=ModuleParameter(true){ replaceName(n);}] {return productionEndTerminal("ImportModName","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ImportDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"imports" (n=ImportModName(true){ replaceName(n);})+ {return productionEndTerminal("ImportDeclaration","{ModName}{ImportModule}","{ModName}{ImportModule}","Replacement","Default",first,token);}

 )  }

FSTInfo ExportDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"exports" (n=Grammer(true){ replaceName(n);})+ {return productionEndTerminal("ExportDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo HiddenDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"hiddens" (n=Grammer(true){ replaceName(n);})+ {return productionEndTerminal("HiddenDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Grammer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"sorts" (n=Sort(true){ replaceName(n);})* {return productionEndTerminal("Grammer1","-","-","Replacement","Default",first,token);}
 |
	"context-free start-symbols" (n=Sort(true){ replaceName(n);})* {return productionEndTerminal("Grammer2","-","-","Replacement","Default",first,token);}
 |
	n=Productions(true){ replaceName(n);} {return productionEndTerminal("Grammer3","-","-","Replacement","Default",first,token);}
 |
	n=Disambiguations(true){ replaceName(n);} {return productionEndTerminal("Grammer4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Productions(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ProdPart(true){ replaceName(n);} (n=Production(true){ replaceName(n);})* {return productionEndTerminal("Productions","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ProdPart(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"syntax"  {return productionEndTerminal("ProdPart1","-","-","Replacement","Default",first,token);}
 |
	"lexical syntax"  {return productionEndTerminal("ProdPart2","-","-","Replacement","Default",first,token);}
 |
	"context-free syntax"  {return productionEndTerminal("ProdPart3","-","-","Replacement","Default",first,token);}
 |
	"variables"  {return productionEndTerminal("ProdPart4","-","-","Replacement","Default",first,token);}
 |
	"lexical variables"  {return productionEndTerminal("ProdPart5","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Disambiguations(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"context-free priorities" (n=Priority(true){ replaceName(n);})* {return productionEndTerminal("Disambiguations1","-","-","Replacement","Default",first,token);}
 |
	"lexical restrictions" (n=Restriction(true){ replaceName(n);})* {return productionEndTerminal("Disambiguations2","-","-","Replacement","Default",first,token);}
 |
	"context-free restrictions" (n=Restriction(true){ replaceName(n);})* {return productionEndTerminal("Disambiguations3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Production(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Symbol(true){ replaceName(n);})* "->" (LOOKAHEAD(2) n=Symbol(true){ replaceName(n);})+ [LOOKAHEAD("{" Attribute()) n=OptAttributes(true){ replaceName(n);}] {return productionEndTerminal("Production","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Symbol(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "(" n=Symbol(true){ replaceName(n);} ")" [n=SortOp(true){ replaceName(n);}] {return productionEndTerminal("Symbol1","-","-","Replacement","Default",first,token);}
 |
	n=Sort(true){ replaceName(n);} [n=AlternativeSymbol(true){ replaceName(n);}] {return productionEndTerminal("Symbol2","-","-","Replacement","Default",first,token);}
 |
	n=CharacterClass(true){ replaceName(n);} [n=AlternativeSymbol(true){ replaceName(n);}] {return productionEndTerminal("Symbol3","-","-","Replacement","Default",first,token);}
 |
	n=String(true){ replaceName(n);} [n=SortOp(true){ replaceName(n);}] [n=AlternativeSymbol(true){ replaceName(n);}] {return productionEndTerminal("Symbol4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AlternativeSymbol(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" n=Symbol(true){ replaceName(n);} {return productionEndTerminal("AlternativeSymbol","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Sort(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"[[" n=Id(true){ replaceName(n);} "]]" {return productionEndTerminal("Sort1","-","-","Replacement","Default",first,token);}
 |
	"<" n=Id(true){ replaceName(n);} [n=SortOp(true){ replaceName(n);}] ["-" n=Id(true){ replaceName(n);}] ">" {return productionEndTerminal("Sort2","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} [n=SortOp(true){ replaceName(n);}] {return productionEndTerminal("Sort3","-","-","Replacement","Default",first,token);}
 |
	"{" n=Id(true){ replaceName(n);} n=String(true){ replaceName(n);} "}" [n=SortOp(true){ replaceName(n);}] {return productionEndTerminal("Sort4","-","-","Replacement","Default",first,token);}
 |
	"(" (n=Sort(true){ replaceName(n);})+ ")" [n=SortOp(true){ replaceName(n);}] {return productionEndTerminal("Sort5","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SortOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"*"  {return productionEndTerminal("SortOp1","-","-","Replacement","Default",first,token);}
 |
	"+"  {return productionEndTerminal("SortOp2","-","-","Replacement","Default",first,token);}
 |
	"?"  {return productionEndTerminal("SortOp3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CharacterClass(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[<TILDE>] "[" (n=CharClass(true){ replaceName(n);})* "]" [n=SortOp(true){ replaceName(n);}] {return productionEndTerminal("CharacterClass","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo CharClass(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SpecialSign(true){ replaceName(n);} {return productionEndTerminal("CharClass1","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} {return productionEndTerminal("CharClass2","-","-","Replacement","Default",first,token);}
 |
	n=Int(true){ replaceName(n);} {return productionEndTerminal("CharClass3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SpecialSign(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"\\("  {return productionEndTerminal("SpecialSign1","-","-","Replacement","Default",first,token);}
 |
	"\\)"  {return productionEndTerminal("SpecialSign2","-","-","Replacement","Default",first,token);}
 |
	"\\{"  {return productionEndTerminal("SpecialSign3","-","-","Replacement","Default",first,token);}
 |
	"\\}"  {return productionEndTerminal("SpecialSign4","-","-","Replacement","Default",first,token);}
 |
	"\\["  {return productionEndTerminal("SpecialSign5","-","-","Replacement","Default",first,token);}
 |
	"\\]"  {return productionEndTerminal("SpecialSign6","-","-","Replacement","Default",first,token);}
 |
	"\\,"  {return productionEndTerminal("SpecialSign7","-","-","Replacement","Default",first,token);}
 |
	"\\<"  {return productionEndTerminal("SpecialSign8","-","-","Replacement","Default",first,token);}
 |
	"\\>"  {return productionEndTerminal("SpecialSign9","-","-","Replacement","Default",first,token);}
 |
	"\\:"  {return productionEndTerminal("SpecialSign10","-","-","Replacement","Default",first,token);}
 |
	"\\."  {return productionEndTerminal("SpecialSign11","-","-","Replacement","Default",first,token);}
 |
	"\\?"  {return productionEndTerminal("SpecialSign12","-","-","Replacement","Default",first,token);}
 |
	"\\!"  {return productionEndTerminal("SpecialSign13","-","-","Replacement","Default",first,token);}
 |
	"\\'"  {return productionEndTerminal("SpecialSign14","-","-","Replacement","Default",first,token);}
 |
	"\\%"  {return productionEndTerminal("SpecialSign15","-","-","Replacement","Default",first,token);}
 |
	"\\_"  {return productionEndTerminal("SpecialSign16","-","-","Replacement","Default",first,token);}
 |
	"\\$"  {return productionEndTerminal("SpecialSign17","-","-","Replacement","Default",first,token);}
 |
	"\\@"  {return productionEndTerminal("SpecialSign18","-","-","Replacement","Default",first,token);}
 |
	"\\~"  {return productionEndTerminal("SpecialSign19","-","-","Replacement","Default",first,token);}
 |
	"\\\""  {return productionEndTerminal("SpecialSign20","-","-","Replacement","Default",first,token);}
 |
	"\\/"  {return productionEndTerminal("SpecialSign21","-","-","Replacement","Default",first,token);}
 |
	"\\\\"  {return productionEndTerminal("SpecialSign22","-","-","Replacement","Default",first,token);}
 |
	"\\#"  {return productionEndTerminal("SpecialSign23","-","-","Replacement","Default",first,token);}
 |
	"\\|"  {return productionEndTerminal("SpecialSign24","-","-","Replacement","Default",first,token);}
 |
	"\\+"  {return productionEndTerminal("SpecialSign25","-","-","Replacement","Default",first,token);}
 |
	"\\-"  {return productionEndTerminal("SpecialSign26","-","-","Replacement","Default",first,token);}
 |
	"\\*"  {return productionEndTerminal("SpecialSign27","-","-","Replacement","Default",first,token);}
 |
	"\\;"  {return productionEndTerminal("SpecialSign28","-","-","Replacement","Default",first,token);}
 |
	"\\`"  {return productionEndTerminal("SpecialSign29","-","-","Replacement","Default",first,token);}
 |
	"\\="  {return productionEndTerminal("SpecialSign30","-","-","Replacement","Default",first,token);}
 |
	"\\&"  {return productionEndTerminal("SpecialSign31","-","-","Replacement","Default",first,token);}
 |
	"\\^"  {return productionEndTerminal("SpecialSign32","-","-","Replacement","Default",first,token);}
 |
	"\\ "  {return productionEndTerminal("SpecialSign33","-","-","Replacement","Default",first,token);}
 |
	"\\0"  {return productionEndTerminal("SpecialSign34","-","-","Replacement","Default",first,token);}
 |
	"\\1"  {return productionEndTerminal("SpecialSign35","-","-","Replacement","Default",first,token);}
 |
	"\\2"  {return productionEndTerminal("SpecialSign36","-","-","Replacement","Default",first,token);}
 |
	"\\3"  {return productionEndTerminal("SpecialSign37","-","-","Replacement","Default",first,token);}
 |
	"\\4"  {return productionEndTerminal("SpecialSign38","-","-","Replacement","Default",first,token);}
 |
	"\\5"  {return productionEndTerminal("SpecialSign39","-","-","Replacement","Default",first,token);}
 |
	"\\6"  {return productionEndTerminal("SpecialSign40","-","-","Replacement","Default",first,token);}
 |
	"\\7"  {return productionEndTerminal("SpecialSign41","-","-","Replacement","Default",first,token);}
 |
	"\\8"  {return productionEndTerminal("SpecialSign42","-","-","Replacement","Default",first,token);}
 |
	"\\9"  {return productionEndTerminal("SpecialSign43","-","-","Replacement","Default",first,token);}
 |
	"\\n"  {return productionEndTerminal("SpecialSign44","-","-","Replacement","Default",first,token);}
 |
	"\\t"  {return productionEndTerminal("SpecialSign45","-","-","Replacement","Default",first,token);}
 |
	"\\r"  {return productionEndTerminal("SpecialSign46","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptAttributes(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" n=Attribute(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Attribute(true){ replaceName(n);})* "}" {return productionEndTerminal("OptAttributes","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Attribute(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"bracket"  {return productionEndTerminal("Attribute1","-","-","Replacement","Default",first,token);}
 |
	"prefer"  {return productionEndTerminal("Attribute2","-","-","Replacement","Default",first,token);}
 |
	"avoid"  {return productionEndTerminal("Attribute3","-","-","Replacement","Default",first,token);}
 |
	"left"  {return productionEndTerminal("Attribute4","-","-","Replacement","Default",first,token);}
 |
	"right"  {return productionEndTerminal("Attribute5","-","-","Replacement","Default",first,token);}
 |
	"non-assoc"  {return productionEndTerminal("Attribute6","-","-","Replacement","Default",first,token);}
 |
	"assoc"  {return productionEndTerminal("Attribute7","-","-","Replacement","Default",first,token);}
 |
	"reject"  {return productionEndTerminal("Attribute8","-","-","Replacement","Default",first,token);}
 |
	"recover"  {return productionEndTerminal("Attribute9","-","-","Replacement","Default",first,token);}
 |
	"indentpadding"  {return productionEndTerminal("Attribute10","-","-","Replacement","Default",first,token);}
 |
	n=Constructor(true){ replaceName(n);} {return productionEndTerminal("Attribute11","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Constructor(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"cons" "(" n=String(true){ replaceName(n);} ")" {return productionEndTerminal("Constructor1","-","-","Replacement","Default",first,token);}
 |
	"deprecated" "(" n=String(true){ replaceName(n);} ")" {return productionEndTerminal("Constructor2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Priority(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(3) "{" [n=Attribute(true){ replaceName(n);} ":"] (n=Production(true){ replaceName(n);})+ "}" [LOOKAHEAD(2) ">" n=Priority(true){ replaceName(n);}] {return productionEndTerminal("Priority1","-","-","Replacement","Default",first,token);}
 |
	n=Production(true){ replaceName(n);} (LOOKAHEAD(2) ">" n=Priority(true){ replaceName(n);})* {return productionEndTerminal("Priority2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Restriction(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Symbol(true){ replaceName(n);})+ "-/-" n=CharacterClass(true){ replaceName(n);} (LOOKAHEAD(2) "." n=CharacterClass(true){ replaceName(n);})* {return productionEndTerminal("Restriction","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TrafoDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"rules" (n=Definition(true){ replaceName(n);})* {return productionEndTerminal("TrafoDeclaration1","-","-","Replacement","Default",first,token);}
 |
	"strategies" (n=Definition(true){ replaceName(n);})* {return productionEndTerminal("TrafoDeclaration2","-","-","Replacement","Default",first,token);}
 |
	"signature" (n=SigDeclaration(true){ replaceName(n);})* {return productionEndTerminal("TrafoDeclaration3","-","-","Replacement","Default",first,token);}
 |
	"signatures" (n=SigDeclaration(true){ replaceName(n);})* {return productionEndTerminal("TrafoDeclaration4","-","-","Replacement","Default",first,token);}
 |
	"overlays" (n=Overlay(true){ replaceName(n);})* {return productionEndTerminal("TrafoDeclaration5","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Overlay(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [n=OptOverlay(true){ replaceName(n);}] "=" n=Term(true){ replaceName(n);} {return productionEndTerminal("Overlay","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptOverlay(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" n=Id(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Id(true){ replaceName(n);})* ")" {return productionEndTerminal("OptOverlay","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Definition(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=Anno(true){ replaceName(n);})* n=Def(true){ replaceName(n);} {return productionEndTerminal("Definition","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Def(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(3) n=RuleDef(true){ replaceName(n);} {return productionEndTerminal("Def1","-","-","Replacement","Default",first,token);}
 |
	n=StrategyDef(true){ replaceName(n);} {return productionEndTerminal("Def2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Anno(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extend"  {return productionEndTerminal("Anno1","-","-","Replacement","Default",first,token);}
 |
	"override"  {return productionEndTerminal("Anno2","-","-","Replacement","Default",first,token);}
 |
	"internal"  {return productionEndTerminal("Anno3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleDef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [n=OptDef1(true){ replaceName(n);}] ":" n=Rule(true){ replaceName(n);} {return productionEndTerminal("RuleDef","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo StrategyDef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"external" [n=Id(true){ replaceName(n);}] "(" n=TypedId(true){ replaceName(n);} (LOOKAHEAD(2) "," n=TypedId(true){ replaceName(n);})* "|" n=TypedId(true){ replaceName(n);} (LOOKAHEAD(2) "," n=TypedId(true){ replaceName(n);})* ")" ["=" n=Strategy(true){ replaceName(n);}] {return productionEndTerminal("StrategyDef1","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} [n=OptDef1(true){ replaceName(n);}] "=" n=Strategy(true){ replaceName(n);} {return productionEndTerminal("StrategyDef2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptDef1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" n=TypedId(true){ replaceName(n);} (LOOKAHEAD(2) "," n=TypedId(true){ replaceName(n);})* [n=OptDef2(true){ replaceName(n);}] ")" {return productionEndTerminal("OptDef1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptDef2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" n=TypedId(true){ replaceName(n);} (LOOKAHEAD(2) "," n=TypedId(true){ replaceName(n);})* {return productionEndTerminal("OptDef2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Rule(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Term(true){ replaceName(n);} "->" n=Term(true){ replaceName(n);} (n=RuleCond(true){ replaceName(n);})* {return productionEndTerminal("Rule","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleCond(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"where" n=Strategy(true){ replaceName(n);} {return productionEndTerminal("RuleCond1","-","-","Replacement","Default",first,token);}
 |
	"with" n=Strategy(true){ replaceName(n);} {return productionEndTerminal("RuleCond2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SigDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"sorts" (n=TrafoSort(true){ replaceName(n);})* {return productionEndTerminal("SigDeclaration1","-","-","Replacement","Default",first,token);}
 |
	"constructors" (n=OpDeclaration(true){ replaceName(n);})* {return productionEndTerminal("SigDeclaration2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OpDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=OptOpDecl1(true){ replaceName(n);}] [n=OptOpDecl2(true){ replaceName(n);}] ":" n=Type(true){ replaceName(n);} {return productionEndTerminal("OpDeclaration","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptOpDecl1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"external"  {return productionEndTerminal("OptOpDecl1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptOpDecl2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} {return productionEndTerminal("OptOpDecl21","-","-","Replacement","Default",first,token);}
 |
	n=String(true){ replaceName(n);} {return productionEndTerminal("OptOpDecl22","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Strategy(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(3) "<" n=Strategy(true){ replaceName(n);} ">" [LOOKAHEAD(2) n=Term(true){ replaceName(n);}] [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy1","-","-","Replacement","Default",first,token);}
 |
	"if" n=Strategy(true){ replaceName(n);} "then" n=Strategy(true){ replaceName(n);} ["else" n=Strategy(true){ replaceName(n);}] "end" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy2","-","-","Replacement","Default",first,token);}
 |
	"switch" n=Strategy(true){ replaceName(n);} (n=SwitchCase(true){ replaceName(n);})* ["otherwise" ":" n=Strategy(true){ replaceName(n);}] "end" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy3","-","-","Replacement","Default",first,token);}
 |
	"let" (n=Definition(true){ replaceName(n);})* "in" n=Strategy(true){ replaceName(n);} "end" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy4","-","-","Replacement","Default",first,token);}
 |
	"call" "(" n=Term(true){ replaceName(n);} "|" n=Strategy(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Strategy(true){ replaceName(n);})* "|" n=Term(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Term(true){ replaceName(n);})* ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy5","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) "prim" "(" n=String(true){ replaceName(n);} "," [LOOKAHEAD(2) n=OptStrategy3(true){ replaceName(n);}] n=Term(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Term(true){ replaceName(n);})* ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy6","-","-","Replacement","Default",first,token);}
 |
	"proceed" [n=OptStrategy1(true){ replaceName(n);}] [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy7","-","-","Replacement","Default",first,token);}
 |
	"fail"  [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy8","-","-","Replacement","Default",first,token);}
 |
	"id"  [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy9","-","-","Replacement","Default",first,token);}
 |
	"?" n=Term(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy10","-","-","Replacement","Default",first,token);}
 |
	"!" n=Term(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy11","-","-","Replacement","Default",first,token);}
 |
	"rec" n=Id(true){ replaceName(n);} "(" n=Strategy(true){ replaceName(n);} ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy12","-","-","Replacement","Default",first,token);}
 |
	"import-term" "(" n=ModName(true){ replaceName(n);} ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy13","-","-","Replacement","Default",first,token);}
 |
	"rules" "(" (n=DynRuleDef(true){ replaceName(n);})* ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy14","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) "(" n=Strategy(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Strategy(true){ replaceName(n);})* ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy15","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) "{" n=Id(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Id(true){ replaceName(n);})* ":" n=Strategy(true){ replaceName(n);} "}" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy16","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) "[" n=Strategy(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Strategy(true){ replaceName(n);})* ["|" n=Strategy(true){ replaceName(n);}] "]" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy17","-","-","Replacement","Default",first,token);}
 |
	"{" n=Strategy(true){ replaceName(n);} "}" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy18","-","-","Replacement","Default",first,token);}
 |
	"\\ " n=Rule(true){ replaceName(n);} "\\ " [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy19","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) "(" n=Rule(true){ replaceName(n);} ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy20","-","-","Replacement","Default",first,token);}
 |
	"{|" n=ScopeLabels(true){ replaceName(n);} ":" n=Strategy(true){ replaceName(n);} "|}" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy21","-","-","Replacement","Default",first,token);}
 |
	"|" n=String(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategy22","-","-","Replacement","Default",first,token);}
 |
	n=Strategies(true){ replaceName(n);} {return productionEndTerminal("Strategy23","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Strategies(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Strat(true){ replaceName(n);} "(" n=Strategy(true){ replaceName(n);} ")" [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategies1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(Term() ":=") n=Term(true){ replaceName(n);} ":=" n=Term(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategies2","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) n=Id(true){ replaceName(n);} [n=OptStrategy1(true){ replaceName(n);}] [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategies3","-","-","Replacement","Default",first,token);}
 |
	n=String(true){ replaceName(n);} [n=OptStrategy1(true){ replaceName(n);}] [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategies4","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) n=Int(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategies5","-","-","Replacement","Default",first,token);}
 |
	n=Real(true){ replaceName(n);} [n=AlternativeStrategy(true){ replaceName(n);}] {return productionEndTerminal("Strategies6","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AlternativeStrategy(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Operator(true){ replaceName(n);} n=Strategy(true){ replaceName(n);} {return productionEndTerminal("AlternativeStrategy","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Operator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";"  {return productionEndTerminal("Operator1","-","-","Replacement","Default",first,token);}
 |
	"+"  {return productionEndTerminal("Operator2","-","-","Replacement","Default",first,token);}
 |
	"<+"  {return productionEndTerminal("Operator3","-","-","Replacement","Default",first,token);}
 |
	"+>"  {return productionEndTerminal("Operator4","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Strat(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"some"  {return productionEndTerminal("Strat1","-","-","Replacement","Default",first,token);}
 |
	"one"  {return productionEndTerminal("Strat2","-","-","Replacement","Default",first,token);}
 |
	"all"  {return productionEndTerminal("Strat3","-","-","Replacement","Default",first,token);}
 |
	"not"  {return productionEndTerminal("Strat4","-","-","Replacement","Default",first,token);}
 |
	"where"  {return productionEndTerminal("Strat5","-","-","Replacement","Default",first,token);}
 |
	"with"  {return productionEndTerminal("Strat6","-","-","Replacement","Default",first,token);}
 |
	"test"  {return productionEndTerminal("Strat7","-","-","Replacement","Default",first,token);}
 |
	"prim"  {return productionEndTerminal("Strat8","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo SwitchCase(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"case" n=Strategy(true){ replaceName(n);} ":" n=Strategy(true){ replaceName(n);} {return productionEndTerminal("SwitchCase","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ScopeLabels(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"~" n=Term(true){ replaceName(n);} {return productionEndTerminal("ScopeLabels1","-","-","Replacement","Default",first,token);}
 |
	n=DynRuleScopeId(true){ replaceName(n);} (LOOKAHEAD(2) "," n=DynRuleScopeId(true){ replaceName(n);})* {return productionEndTerminal("ScopeLabels2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DynRuleScopeId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=Id(true){ replaceName(n);} "." n=Term(true){ replaceName(n);} {return productionEndTerminal("DynRuleScopeId1","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} {return productionEndTerminal("DynRuleScopeId2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DynRuleDef(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(3) n=Id(true){ replaceName(n);} "+" n=Term(true){ replaceName(n);} {return productionEndTerminal("DynRuleDef1","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) n=DynRuleId(true){ replaceName(n);} n=TermOperator(true){ replaceName(n);} n=Term(true){ replaceName(n);} {return productionEndTerminal("DynRuleDef2","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) n=DynRuleId(true){ replaceName(n);} n=RuleOperator(true){ replaceName(n);} n=Rule(true){ replaceName(n);} {return productionEndTerminal("DynRuleDef3","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) n=DynRuleId(true){ replaceName(n);} ":" n=RuleOrTerm(true){ replaceName(n);} {return productionEndTerminal("DynRuleDef4","-","-","Replacement","Default",first,token);}
 |
	n=DynRuleId(true){ replaceName(n);} ":" n=Rule(true){ replaceName(n);} "depends" "on" n=Term(true){ replaceName(n);} {return productionEndTerminal("DynRuleDef5","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleOrTerm(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Term() "->") n=Rule(true){ replaceName(n);} {return productionEndTerminal("RuleOrTerm1","-","-","Replacement","Default",first,token);}
 |
	n=Term(true){ replaceName(n);} {return productionEndTerminal("RuleOrTerm2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo DynRuleId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RuleDec(true){ replaceName(n);} [n=OptRuleDec3(true){ replaceName(n);}] {return productionEndTerminal("DynRuleId","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleDec(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [n=OptRuleDec1(true){ replaceName(n);}] {return productionEndTerminal("RuleDec","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptRuleDec1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" n=TypedId(true){ replaceName(n);} (LOOKAHEAD(2) "," n=TypedId(true){ replaceName(n);})* [n=OptRuleDec2(true){ replaceName(n);}] ")" {return productionEndTerminal("OptRuleDec1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptRuleDec2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" n=TypedId(true){ replaceName(n);} (LOOKAHEAD(2) "," n=TypedId(true){ replaceName(n);})* {return productionEndTerminal("OptRuleDec2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptRuleDec3(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RuleDecOperator(true){ replaceName(n);} n=Term(true){ replaceName(n);} {return productionEndTerminal("OptRuleDec3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleDecOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"+"  {return productionEndTerminal("RuleDecOperator1","-","-","Replacement","Default",first,token);}
 |
	"."  {return productionEndTerminal("RuleDecOperator2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TermOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	":-"  {return productionEndTerminal("TermOperator1","-","-","Replacement","Default",first,token);}
 |
	":="  {return productionEndTerminal("TermOperator2","-","-","Replacement","Default",first,token);}
 |
	":+="  {return productionEndTerminal("TermOperator3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RuleOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	":+"  {return productionEndTerminal("RuleOperator","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TypedId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} ":" n=Type(true){ replaceName(n);} {return productionEndTerminal("TypedId","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Type(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(3) n=FunType(true){ replaceName(n);} {return productionEndTerminal("Type1","-","-","Replacement","Default",first,token);}
 |
	n=ConstType(true){ replaceName(n);} {return productionEndTerminal("Type2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo FunType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ArgType(true){ replaceName(n);} (LOOKAHEAD(2) "*" n=ArgType(true){ replaceName(n);})* "->" n=RetType(true){ replaceName(n);} {return productionEndTerminal("FunType","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ArgType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" n=Type(true){ replaceName(n);} ")" {return productionEndTerminal("ArgType1","-","-","Replacement","Default",first,token);}
 |
	n=ConstType(true){ replaceName(n);} {return productionEndTerminal("ArgType2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo ConstType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=TrafoSort(true){ replaceName(n);} {return productionEndTerminal("ConstType","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo RetType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Type(true){ replaceName(n);} {return productionEndTerminal("RetType","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TrafoSort(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Id(true){ replaceName(n);} [n=Sorts(true){ replaceName(n);}] {return productionEndTerminal("TrafoSort","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Sorts(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" n=TrafoSort(true){ replaceName(n);} (LOOKAHEAD(2) "," n=TrafoSort(true){ replaceName(n);})* ")" {return productionEndTerminal("Sorts1","-","-","Replacement","Default",first,token);}
 |
	"[" n=TrafoSort(true){ replaceName(n);} (LOOKAHEAD(2) "," n=TrafoSort(true){ replaceName(n);})* [n=OptSorts(true){ replaceName(n);}] "]" {return productionEndTerminal("Sorts2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptSorts(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" n=TrafoSort(true){ replaceName(n);} {return productionEndTerminal("OptSorts","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptStrategy1(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" n=Strategy(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Strategy(true){ replaceName(n);})* [n=OptStrategy2(true){ replaceName(n);}] ")" {return productionEndTerminal("OptStrategy1","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptStrategy2(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" n=Term(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Term(true){ replaceName(n);})* {return productionEndTerminal("OptStrategy2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptStrategy3(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Strategy(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Strategy(true){ replaceName(n);})* "|" {return productionEndTerminal("OptStrategy3","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo Term(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"_" [LOOKAHEAD(2) n=Term(true){ replaceName(n);}] [LOOKAHEAD(2) n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term1","-","-","Replacement","Default",first,token);}
 |
	"(" n=Term(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Term(true){ replaceName(n);})* ")" [LOOKAHEAD(2) n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term2","-","-","Replacement","Default",first,token);}
 |
	"[" n=Term(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Term(true){ replaceName(n);})* [n=OptTerm(true){ replaceName(n);}] "]" [LOOKAHEAD(2) n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term3","-","-","Replacement","Default",first,token);}
 |
	"<" n=Strategy(true){ replaceName(n);} ">" [LOOKAHEAD(2) n=Term(true){ replaceName(n);}] [LOOKAHEAD(2) n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term4","-","-","Replacement","Default",first,token);}
 |
	n=Id(true){ replaceName(n);} [LOOKAHEAD(2) n=SortOp(true){ replaceName(n);}] [n=OptTermId(true){ replaceName(n);}] [LOOKAHEAD(2) n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term5","-","-","Replacement","Default",first,token);}
 |
	LOOKAHEAD(3) n=Int(true){ replaceName(n);} [LOOKAHEAD(2) n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term6","-","-","Replacement","Default",first,token);}
 |
	n=Real(true){ replaceName(n);} [LOOKAHEAD(2) n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term7","-","-","Replacement","Default",first,token);}
 |
	n=String(true){ replaceName(n);} [n=OptTermString(true){ replaceName(n);}] [LOOKAHEAD(2) n=AlternativeTerm(true){ replaceName(n);}] {return productionEndTerminal("Term8","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo TermOrNoTerm(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(RuleDef())  {return productionEndTerminal("TermOrNoTerm1","-","-","Replacement","Default",first,token);}
 |
	n=Term(true){ replaceName(n);} {return productionEndTerminal("TermOrNoTerm2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptTermId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=Term(true){ replaceName(n);} {return productionEndTerminal("OptTermId1","-","-","Replacement","Default",first,token);}
 |
	"(" n=Term(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Term(true){ replaceName(n);})* ")" {return productionEndTerminal("OptTermId2","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptTermString(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" n=Term(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Term(true){ replaceName(n);})* ")" {return productionEndTerminal("OptTermString","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo OptTerm(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"|" n=Term(true){ replaceName(n);} {return productionEndTerminal("OptTerm","-","-","Replacement","Default",first,token);}

 )  }

FSTInfo AlternativeTerm(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"#" "(" n=Term(true){ replaceName(n);} ")" {return productionEndTerminal("AlternativeTerm1","-","-","Replacement","Default",first,token);}
 |
	"{^" n=Term(true){ replaceName(n);} "}" {return productionEndTerminal("AlternativeTerm2","-","-","Replacement","Default",first,token);}
 |
	"{" n=Term(true){ replaceName(n);} (LOOKAHEAD(2) "," n=Term(true){ replaceName(n);})* "}" {return productionEndTerminal("AlternativeTerm3","-","-","Replacement","Default",first,token);}

 )  }

