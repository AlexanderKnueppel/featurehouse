/* Generated By:JavaCC: Do not edit this line. StrategoParser.java */
package tmp.generated_stratego;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class StrategoParser extends AbstractFSTParser implements StrategoParserConstants {
        public StrategoParser(){}

  final public FSTInfo Digit(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
      jj_consume_token(73);
              {if (true) return productionEndTerminal("Digit1","-","-","Replacement","Default",first,token);}
      break;
    case 74:
      jj_consume_token(74);
              {if (true) return productionEndTerminal("Digit2","-","-","Replacement","Default",first,token);}
      break;
    case 75:
      jj_consume_token(75);
              {if (true) return productionEndTerminal("Digit3","-","-","Replacement","Default",first,token);}
      break;
    case 76:
      jj_consume_token(76);
              {if (true) return productionEndTerminal("Digit4","-","-","Replacement","Default",first,token);}
      break;
    case 77:
      jj_consume_token(77);
              {if (true) return productionEndTerminal("Digit5","-","-","Replacement","Default",first,token);}
      break;
    case 78:
      jj_consume_token(78);
              {if (true) return productionEndTerminal("Digit6","-","-","Replacement","Default",first,token);}
      break;
    case 79:
      jj_consume_token(79);
              {if (true) return productionEndTerminal("Digit7","-","-","Replacement","Default",first,token);}
      break;
    case 80:
      jj_consume_token(80);
              {if (true) return productionEndTerminal("Digit8","-","-","Replacement","Default",first,token);}
      break;
    case 81:
      jj_consume_token(81);
              {if (true) return productionEndTerminal("Digit9","-","-","Replacement","Default",first,token);}
      break;
    case 82:
      jj_consume_token(82);
              {if (true) return productionEndTerminal("Digit10","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NatInteger(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(INTEGER_LITERAL);
                           {if (true) return productionEndTerminal("NatInteger","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RealDigit(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(DOT);
    jj_consume_token(INTEGER_LITERAL);
                                                 {if (true) return productionEndTerminal("RealDigit","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Int(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      n = NatInteger(true);
                                replaceName(n);
                                                  {if (true) return productionEndTerminal("Int1","-","-","Replacement","Default",first,token);}
      break;
    case INTEGER_LITERAL:
      n = NatInteger(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("Int2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Real(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      n = RealDigit(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("Real1","-","-","Replacement","Default",first,token);}
      break;
    case INTEGER_LITERAL:
      n = RealDigit(true);
                           replaceName(n);
                                             {if (true) return productionEndTerminal("Real2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo String(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STRING_LITERAL);
                          {if (true) return productionEndTerminal("String","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo lowerLetter(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
      jj_consume_token(83);
              {if (true) return productionEndTerminal("lowerLetter1","-","-","Replacement","Default",first,token);}
      break;
    case 84:
      jj_consume_token(84);
              {if (true) return productionEndTerminal("lowerLetter2","-","-","Replacement","Default",first,token);}
      break;
    case 85:
      jj_consume_token(85);
              {if (true) return productionEndTerminal("lowerLetter3","-","-","Replacement","Default",first,token);}
      break;
    case 86:
      jj_consume_token(86);
              {if (true) return productionEndTerminal("lowerLetter4","-","-","Replacement","Default",first,token);}
      break;
    case 87:
      jj_consume_token(87);
              {if (true) return productionEndTerminal("lowerLetter5","-","-","Replacement","Default",first,token);}
      break;
    case 88:
      jj_consume_token(88);
              {if (true) return productionEndTerminal("lowerLetter6","-","-","Replacement","Default",first,token);}
      break;
    case 89:
      jj_consume_token(89);
              {if (true) return productionEndTerminal("lowerLetter7","-","-","Replacement","Default",first,token);}
      break;
    case 90:
      jj_consume_token(90);
              {if (true) return productionEndTerminal("lowerLetter8","-","-","Replacement","Default",first,token);}
      break;
    case 91:
      jj_consume_token(91);
              {if (true) return productionEndTerminal("lowerLetter9","-","-","Replacement","Default",first,token);}
      break;
    case 92:
      jj_consume_token(92);
              {if (true) return productionEndTerminal("lowerLetter10","-","-","Replacement","Default",first,token);}
      break;
    case 93:
      jj_consume_token(93);
              {if (true) return productionEndTerminal("lowerLetter11","-","-","Replacement","Default",first,token);}
      break;
    case 94:
      jj_consume_token(94);
              {if (true) return productionEndTerminal("lowerLetter12","-","-","Replacement","Default",first,token);}
      break;
    case 95:
      jj_consume_token(95);
              {if (true) return productionEndTerminal("lowerLetter13","-","-","Replacement","Default",first,token);}
      break;
    case 96:
      jj_consume_token(96);
              {if (true) return productionEndTerminal("lowerLetter14","-","-","Replacement","Default",first,token);}
      break;
    case 97:
      jj_consume_token(97);
              {if (true) return productionEndTerminal("lowerLetter15","-","-","Replacement","Default",first,token);}
      break;
    case 98:
      jj_consume_token(98);
              {if (true) return productionEndTerminal("lowerLetter16","-","-","Replacement","Default",first,token);}
      break;
    case 99:
      jj_consume_token(99);
              {if (true) return productionEndTerminal("lowerLetter17","-","-","Replacement","Default",first,token);}
      break;
    case 100:
      jj_consume_token(100);
              {if (true) return productionEndTerminal("lowerLetter18","-","-","Replacement","Default",first,token);}
      break;
    case 101:
      jj_consume_token(101);
              {if (true) return productionEndTerminal("lowerLetter19","-","-","Replacement","Default",first,token);}
      break;
    case 102:
      jj_consume_token(102);
              {if (true) return productionEndTerminal("lowerLetter20","-","-","Replacement","Default",first,token);}
      break;
    case 103:
      jj_consume_token(103);
              {if (true) return productionEndTerminal("lowerLetter21","-","-","Replacement","Default",first,token);}
      break;
    case 104:
      jj_consume_token(104);
              {if (true) return productionEndTerminal("lowerLetter22","-","-","Replacement","Default",first,token);}
      break;
    case 105:
      jj_consume_token(105);
              {if (true) return productionEndTerminal("lowerLetter23","-","-","Replacement","Default",first,token);}
      break;
    case 106:
      jj_consume_token(106);
              {if (true) return productionEndTerminal("lowerLetter24","-","-","Replacement","Default",first,token);}
      break;
    case 107:
      jj_consume_token(107);
              {if (true) return productionEndTerminal("lowerLetter25","-","-","Replacement","Default",first,token);}
      break;
    case 108:
      jj_consume_token(108);
              {if (true) return productionEndTerminal("lowerLetter26","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo upperLetter(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 109:
      jj_consume_token(109);
              {if (true) return productionEndTerminal("upperLetter1","-","-","Replacement","Default",first,token);}
      break;
    case 110:
      jj_consume_token(110);
              {if (true) return productionEndTerminal("upperLetter2","-","-","Replacement","Default",first,token);}
      break;
    case 111:
      jj_consume_token(111);
              {if (true) return productionEndTerminal("upperLetter3","-","-","Replacement","Default",first,token);}
      break;
    case 112:
      jj_consume_token(112);
              {if (true) return productionEndTerminal("upperLetter4","-","-","Replacement","Default",first,token);}
      break;
    case 113:
      jj_consume_token(113);
              {if (true) return productionEndTerminal("upperLetter5","-","-","Replacement","Default",first,token);}
      break;
    case 114:
      jj_consume_token(114);
              {if (true) return productionEndTerminal("upperLetter6","-","-","Replacement","Default",first,token);}
      break;
    case 115:
      jj_consume_token(115);
              {if (true) return productionEndTerminal("upperLetter7","-","-","Replacement","Default",first,token);}
      break;
    case 116:
      jj_consume_token(116);
              {if (true) return productionEndTerminal("upperLetter8","-","-","Replacement","Default",first,token);}
      break;
    case 117:
      jj_consume_token(117);
              {if (true) return productionEndTerminal("upperLetter9","-","-","Replacement","Default",first,token);}
      break;
    case 118:
      jj_consume_token(118);
              {if (true) return productionEndTerminal("upperLetter10","-","-","Replacement","Default",first,token);}
      break;
    case 119:
      jj_consume_token(119);
              {if (true) return productionEndTerminal("upperLetter11","-","-","Replacement","Default",first,token);}
      break;
    case 120:
      jj_consume_token(120);
              {if (true) return productionEndTerminal("upperLetter12","-","-","Replacement","Default",first,token);}
      break;
    case 121:
      jj_consume_token(121);
              {if (true) return productionEndTerminal("upperLetter13","-","-","Replacement","Default",first,token);}
      break;
    case 122:
      jj_consume_token(122);
              {if (true) return productionEndTerminal("upperLetter14","-","-","Replacement","Default",first,token);}
      break;
    case 123:
      jj_consume_token(123);
              {if (true) return productionEndTerminal("upperLetter15","-","-","Replacement","Default",first,token);}
      break;
    case 124:
      jj_consume_token(124);
              {if (true) return productionEndTerminal("upperLetter16","-","-","Replacement","Default",first,token);}
      break;
    case 125:
      jj_consume_token(125);
              {if (true) return productionEndTerminal("upperLetter17","-","-","Replacement","Default",first,token);}
      break;
    case 126:
      jj_consume_token(126);
              {if (true) return productionEndTerminal("upperLetter18","-","-","Replacement","Default",first,token);}
      break;
    case 127:
      jj_consume_token(127);
              {if (true) return productionEndTerminal("upperLetter19","-","-","Replacement","Default",first,token);}
      break;
    case 128:
      jj_consume_token(128);
              {if (true) return productionEndTerminal("upperLetter20","-","-","Replacement","Default",first,token);}
      break;
    case 129:
      jj_consume_token(129);
              {if (true) return productionEndTerminal("upperLetter21","-","-","Replacement","Default",first,token);}
      break;
    case 130:
      jj_consume_token(130);
              {if (true) return productionEndTerminal("upperLetter22","-","-","Replacement","Default",first,token);}
      break;
    case 131:
      jj_consume_token(131);
              {if (true) return productionEndTerminal("upperLetter23","-","-","Replacement","Default",first,token);}
      break;
    case 132:
      jj_consume_token(132);
              {if (true) return productionEndTerminal("upperLetter24","-","-","Replacement","Default",first,token);}
      break;
    case 133:
      jj_consume_token(133);
              {if (true) return productionEndTerminal("upperLetter25","-","-","Replacement","Default",first,token);}
      break;
    case 134:
      jj_consume_token(134);
              {if (true) return productionEndTerminal("upperLetter26","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CharClass1(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
      n = lowerLetter(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("CharClass11","-","-","Replacement","Default",first,token);}
      break;
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
      n = upperLetter(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("CharClass12","-","-","Replacement","Default",first,token);}
      break;
    case DOT:
      jj_consume_token(DOT);
              {if (true) return productionEndTerminal("CharClass13","-","-","Replacement","Default",first,token);}
      break;
    case 135:
      jj_consume_token(135);
              {if (true) return productionEndTerminal("CharClass14","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CharClass2(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
      n = lowerLetter(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("CharClass21","-","-","Replacement","Default",first,token);}
      break;
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
      n = upperLetter(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("CharClass22","-","-","Replacement","Default",first,token);}
      break;
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
      n = Digit(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("CharClass23","-","-","Replacement","Default",first,token);}
      break;
    case 136:
      jj_consume_token(136);
              {if (true) return productionEndTerminal("CharClass24","-","-","Replacement","Default",first,token);}
      break;
    case DOT:
      jj_consume_token(DOT);
              {if (true) return productionEndTerminal("CharClass25","-","-","Replacement","Default",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("CharClass26","-","-","Replacement","Default",first,token);}
      break;
    case 135:
      jj_consume_token(135);
              {if (true) return productionEndTerminal("CharClass27","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CharClass3(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
      n = lowerLetter(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("CharClass31","-","-","Replacement","Default",first,token);}
      break;
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
      n = upperLetter(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("CharClass32","-","-","Replacement","Default",first,token);}
      break;
    case 135:
      jj_consume_token(135);
              {if (true) return productionEndTerminal("CharClass33","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CharClass4(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
      n = lowerLetter(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("CharClass41","-","-","Replacement","Default",first,token);}
      break;
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
      n = upperLetter(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("CharClass42","-","-","Replacement","Default",first,token);}
      break;
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
      n = Digit(true);
                       replaceName(n);
                                         {if (true) return productionEndTerminal("CharClass43","-","-","Replacement","Default",first,token);}
      break;
    case 136:
      jj_consume_token(136);
              {if (true) return productionEndTerminal("CharClass44","-","-","Replacement","Default",first,token);}
      break;
    case MINUS:
      jj_consume_token(MINUS);
              {if (true) return productionEndTerminal("CharClass45","-","-","Replacement","Default",first,token);}
      break;
    case 135:
      jj_consume_token(135);
              {if (true) return productionEndTerminal("CharClass46","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ModNamePart(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = CharClass1(true);
                            replaceName(n);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case MINUS:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_1;
      }
      n = CharClass2(true);
                                                                  replaceName(n);
    }
                                                                                      {if (true) return productionEndTerminal("ModNamePart","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ModName(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_2:
    while (true) {
      n = ModNamePart(true);
                              replaceName(n);
      jj_consume_token(SLASH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
    }
                                                      {if (true) return productionEndTerminal("ModName","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Id(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
      n = CharClass3(true);
                            replaceName(n);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_3;
        }
        n = CharClass4(true);
                                                                  replaceName(n);
      }
                                                                                      {if (true) return productionEndTerminal("Id1","-","-","Replacement","Default",first,token);}
      break;
    case 136:
      jj_consume_token(136);
      label_4:
      while (true) {
        n = lowerLetter(true);
                                  replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
      }
                                                      {if (true) return productionEndTerminal("Id2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo LId(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = CharClass3(true);
                            replaceName(n);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      n = CharClass4(true);
                                                                  replaceName(n);
    }
    jj_consume_token(STAR);
                                                                                          {if (true) return productionEndTerminal("LId","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo LCID(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = lowerLetter(true);
                             replaceName(n);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      n = CharClass4(true);
                                                                   replaceName(n);
    }
                                                                                       {if (true) return productionEndTerminal("LCID","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo UCID(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = upperLetter(true);
                             replaceName(n);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      n = CharClass4(true);
                                                                   replaceName(n);
    }
                                                                                       {if (true) return productionEndTerminal("UCID","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Var(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("Var1","-","-","Replacement","Default",first,token);}
      break;
      n = LID(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("Var2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ID(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("ID1","-","-","Replacement","Default",first,token);}
      break;
      n = LID(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("ID2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Wld(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(135);
              {if (true) return productionEndTerminal("Wld","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Term(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Var(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("Term1","-","-","Replacement","Default",first,token);}
      break;
      n = Wld(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("Term2","-","-","Replacement","Default",first,token);}
      break;
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case LBRACKET:
    case MINUS:
    case 156:
      n = PreTerm(true);
                         replaceName(n);
      jj_consume_token(137);
      n = PreTerm(true);
                                                                replaceName(n);
      jj_consume_token(RBRACE);
                                                                                      {if (true) return productionEndTerminal("Term3","-","-","Replacement","Default",first,token);}
      break;
      n = Var(true);
                     replaceName(n);
      jj_consume_token(138);
      n = Term(true);
                                                        replaceName(n);
                                                                          {if (true) return productionEndTerminal("Term4","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(135);
      n = Term(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("Term5","-","-","Replacement","Default",first,token);}
      break;
      n = PreTerm(true);
                         replaceName(n);
      jj_consume_token(LBRACE);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        n = Term(true);
                                                             replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RBRACE);
                                                                                         {if (true) return productionEndTerminal("Term6","-","-","Replacement","Default",first,token);}
      break;
      n = PreTerm(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("Term7","-","-","Replacement","Default",first,token);}
      break;
      n = StrategyAngle(true);
                               replaceName(n);
      n = Term(true);
                                                              replaceName(n);
                                                                                {if (true) return productionEndTerminal("Term8","-","-","Replacement","Default",first,token);}
      break;
      n = StrategyAngle(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("Term9","-","-","Replacement","Default",first,token);}
      break;
      n = Var(true);
                     replaceName(n);
      jj_consume_token(138);
      n = Term(true);
                                                        replaceName(n);
                                                                          {if (true) return productionEndTerminal("Term10","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo PreTerm(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Var(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("PreTerm1","-","-","Replacement","Default",first,token);}
      break;
      n = Wld(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("PreTerm2","-","-","Replacement","Default",first,token);}
      break;
    case INTEGER_LITERAL:
    case MINUS:
      n = Int(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("PreTerm3","-","-","Replacement","Default",first,token);}
      break;
      n = Real(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("PreTerm4","-","-","Replacement","Default",first,token);}
      break;
    case STRING_LITERAL:
      n = String(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("PreTerm5","-","-","Replacement","Default",first,token);}
      break;
      n = Var(true);
                     replaceName(n);
      jj_consume_token(138);
      n = PreTerm(true);
                                                           replaceName(n);
                                                                             {if (true) return productionEndTerminal("PreTerm6","-","-","Replacement","Default",first,token);}
      break;
      n = Id(true);
                    replaceName(n);
      jj_consume_token(LPAREN);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_9;
        }
        n = Term(true);
                                                        replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                    {if (true) return productionEndTerminal("PreTerm7","-","-","Replacement","Default",first,token);}
      break;
      n = String(true);
                        replaceName(n);
      jj_consume_token(LPAREN);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        n = Term(true);
                                                            replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                        {if (true) return productionEndTerminal("PreTerm8","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(135);
      n = PreTerm(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("PreTerm9","-","-","Replacement","Default",first,token);}
      break;
    case 156:
      n = StrategyAngle(true);
                               replaceName(n);
      n = Term(true);
                                                              replaceName(n);
                                                                                {if (true) return productionEndTerminal("PreTerm10","-","-","Replacement","Default",first,token);}
      break;
      n = StrategyAngle(true);
                               replaceName(n);
                                                 {if (true) return productionEndTerminal("PreTerm11","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_11;
        }
        n = Term(true);
                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                       {if (true) return productionEndTerminal("PreTerm12","-","-","Replacement","Default",first,token);}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_12;
        }
        n = Term(true);
                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RBRACKET);
                                                       {if (true) return productionEndTerminal("PreTerm13","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(LBRACKET);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_13;
        }
        n = Term(true);
                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      n = Term(true);
                                                                    replaceName(n);
      jj_consume_token(RBRACKET);
                                                                                          {if (true) return productionEndTerminal("PreTerm14","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Sort(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
      n = LCID(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("Sort1","-","-","Replacement","Default",first,token);}
      break;
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
      n = UCID(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("Sort2","-","-","Replacement","Default",first,token);}
      break;
    case 135:
    case 136:
      n = Id(true);
                    replaceName(n);
      jj_consume_token(LPAREN);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACKET:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_14;
        }
        n = Sort(true);
                                                        replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                    {if (true) return productionEndTerminal("Sort3","-","-","Replacement","Default",first,token);}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACKET:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_15;
        }
        n = Sort(true);
                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RBRACKET);
                                                       {if (true) return productionEndTerminal("Sort4","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(LBRACKET);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACKET:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_16;
        }
        n = Sort(true);
                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      n = Sort(true);
                                                                    replaceName(n);
      jj_consume_token(RBRACKET);
                                                                                          {if (true) return productionEndTerminal("Sort5","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACKET:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_17;
        }
        n = Sort(true);
                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                       {if (true) return productionEndTerminal("Sort6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Opdecl(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Id(true);
                    replaceName(n);
      jj_consume_token(140);
      n = Type(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("Opdecl1","-","-","Replacement","Default",first,token);}
      break;
    case STRING_LITERAL:
      n = String(true);
                        replaceName(n);
      jj_consume_token(140);
      n = Type(true);
                                                           replaceName(n);
                                                                             {if (true) return productionEndTerminal("Opdecl2","-","-","Replacement","Default",first,token);}
      break;
    case 140:
      jj_consume_token(140);
      n = Type(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("Opdecl3","-","-","Replacement","Default",first,token);}
      break;
    case EXTERNAL:
      jj_consume_token(EXTERNAL);
      n = Id(true);
                               replaceName(n);
      jj_consume_token(140);
      n = Type(true);
                                                                  replaceName(n);
                                                                                    {if (true) return productionEndTerminal("Opdecl4","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(EXTERNAL);
      n = String(true);
                                   replaceName(n);
      jj_consume_token(140);
      n = Type(true);
                                                                      replaceName(n);
                                                                                        {if (true) return productionEndTerminal("Opdecl5","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(EXTERNAL);
      jj_consume_token(140);
      n = Type(true);
                                     replaceName(n);
                                                       {if (true) return productionEndTerminal("Opdecl6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Sdecl(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SORTS:
      jj_consume_token(SORTS);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
        case LBRACKET:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_18;
        }
        n = Sort(true);
                               replaceName(n);
      }
                                                   {if (true) return productionEndTerminal("Sdecl1","-","-","Replacement","Default",first,token);}
      break;
    case CONSTRUCTORS:
      jj_consume_token(CONSTRUCTORS);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case STRING_LITERAL:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 140:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_19;
        }
        n = Opdecl(true);
                                        replaceName(n);
      }
                                                            {if (true) return productionEndTerminal("Sdecl2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Type(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LBRACKET:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = FunType(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("Type1","-","-","Replacement","Default",first,token);}
      break;
      n = ConstType(true);
                           replaceName(n);
                                             {if (true) return productionEndTerminal("Type2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ConstType(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Sort(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("ConstType","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ArgType(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      n = Type(true);
                          replaceName(n);
      jj_consume_token(RPAREN);
                                                {if (true) return productionEndTerminal("ArgType1","-","-","Replacement","Default",first,token);}
      break;
    case LBRACKET:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = ConstType(true);
                           replaceName(n);
                                             {if (true) return productionEndTerminal("ArgType2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RetType(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Type(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("RetType","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo FunType(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_20:
    while (true) {
      n = ArgType(true);
                          replaceName(n);
      jj_consume_token(STAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_20;
      }
    }
    jj_consume_token(141);
    n = RetType(true);
                                                                       replaceName(n);
                                                                                         {if (true) return productionEndTerminal("FunType","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Module(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MODULE:
      jj_consume_token(MODULE);
      n = ModName(true);
                                  replaceName(n);
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OVERLAYS:
        case RULES:
        case STRATEGIES:
        case IMPORTS:
        case 143:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_21;
        }
        n = Decl(true);
                                                                  replaceName(n);
      }
                                                                                      {if (true) return productionEndTerminal("Module1","-","-","Replacement","Default",first,token);}
      break;
    case 142:
      jj_consume_token(142);
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OVERLAYS:
        case RULES:
        case STRATEGIES:
        case IMPORTS:
        case 143:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_22;
        }
        n = Decl(true);
                                       replaceName(n);
      }
                                                           {if (true) return productionEndTerminal("Module2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ImportModName(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ModName(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("ImportModName","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Decl(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORTS:
      jj_consume_token(IMPORTS);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_23;
        }
        n = ImportModName(true);
                                          replaceName(n);
      }
                                                              {if (true) return productionEndTerminal("Decl1","-","-","Replacement","Default",first,token);}
      break;
    case STRATEGIES:
      jj_consume_token(STRATEGIES);
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case EXTEND:
        case OVERRIDE:
        case INTERNAL:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_24;
        }
        n = Def(true);
                                   replaceName(n);
      }
                                                       {if (true) return productionEndTerminal("Decl2","-","-","Replacement","Default",first,token);}
      break;
    case 143:
      jj_consume_token(143);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTORS:
        case SORTS:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_25;
        }
        n = Sdecl(true);
                                     replaceName(n);
      }
                                                         {if (true) return productionEndTerminal("Decl3","-","-","Replacement","Default",first,token);}
      break;
    case RULES:
      jj_consume_token(RULES);
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case EXTEND:
        case OVERRIDE:
        case INTERNAL:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_26;
        }
        n = Def(true);
                              replaceName(n);
      }
                                                  {if (true) return productionEndTerminal("Decl4","-","-","Replacement","Default",first,token);}
      break;
    case OVERLAYS:
      jj_consume_token(OVERLAYS);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_27;
        }
        n = Overlay(true);
                                     replaceName(n);
      }
                                                         {if (true) return productionEndTerminal("Decl5","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Def(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTERNAL:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = StrategyDef(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("Def1","-","-","Replacement","Default",first,token);}
      break;
    case EXTEND:
    case OVERRIDE:
    case INTERNAL:
      label_28:
      while (true) {
        n = Anno(true);
                       replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTEND:
        case OVERRIDE:
        case INTERNAL:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_28;
        }
      }
      n = StrategyDef(true);
                                                               replaceName(n);
                                                                                 {if (true) return productionEndTerminal("Def2","-","-","Replacement","Default",first,token);}
      break;
      n = RuleDef(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("Def3","-","-","Replacement","Default",first,token);}
      break;
      label_29:
      while (true) {
        n = Anno(true);
                       replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTEND:
        case OVERRIDE:
        case INTERNAL:
          ;
          break;
        default:
          jj_la1[49] = jj_gen;
          break label_29;
        }
      }
      n = RuleDef(true);
                                                           replaceName(n);
                                                                             {if (true) return productionEndTerminal("Def4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SVar(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("SVar","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Strategy(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LET:
      jj_consume_token(LET);
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case EXTEND:
        case OVERRIDE:
        case INTERNAL:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_30;
        }
        n = Def(true);
                            replaceName(n);
      }
      jj_consume_token(IN);
      n = Strategy(true);
                                                                      replaceName(n);
      jj_consume_token(END);
                                                                                              {if (true) return productionEndTerminal("Strategy1","-","-","Replacement","Default",first,token);}
      break;
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = SVar(true);
                      replaceName(n);
      jj_consume_token(LPAREN);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case FAIL:
        case ID:
        case LET:
        case NOT:
        case ONE:
        case PRIM:
        case RULES:
        case SOME:
        case TEST:
        case WHERE:
        case IMPORTTERM:
        case IF:
        case REC:
        case SWITCH:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 151:
        case 156:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_31;
        }
        n = Strategy(true);
                                                              replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_32;
        }
        n = Term(true);
                                                                                                        replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                                                                    {if (true) return productionEndTerminal("Strategy2","-","-","Replacement","Default",first,token);}
      break;
    case 144:
      jj_consume_token(144);
      jj_consume_token(LPAREN);
      n = Term(true);
                                 replaceName(n);
      jj_consume_token(139);
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case FAIL:
        case ID:
        case LET:
        case NOT:
        case ONE:
        case PRIM:
        case RULES:
        case SOME:
        case TEST:
        case WHERE:
        case IMPORTTERM:
        case IF:
        case REC:
        case SWITCH:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 151:
        case 156:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_33;
        }
        n = Strategy(true);
                                                                         replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[55] = jj_gen;
          break label_34;
        }
        n = Term(true);
                                                                                                                   replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                                                                               {if (true) return productionEndTerminal("Strategy3","-","-","Replacement","Default",first,token);}
      break;
    case FAIL:
      jj_consume_token(FAIL);
                 {if (true) return productionEndTerminal("Strategy4","-","-","Replacement","Default",first,token);}
      break;
    case ID:
      jj_consume_token(ID);
               {if (true) return productionEndTerminal("Strategy5","-","-","Replacement","Default",first,token);}
      break;
    case 145:
      jj_consume_token(145);
      jj_consume_token(LPAREN);
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case FAIL:
        case ID:
        case LET:
        case NOT:
        case ONE:
        case PRIM:
        case RULES:
        case SOME:
        case TEST:
        case WHERE:
        case IMPORTTERM:
        case IF:
        case REC:
        case SWITCH:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 151:
        case 156:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_35;
        }
        n = Strategy(true);
                                         replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[57] = jj_gen;
          break label_36;
        }
        n = Term(true);
                                                                                   replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                                               {if (true) return productionEndTerminal("Strategy6","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(145);
                    {if (true) return productionEndTerminal("Strategy7","-","-","Replacement","Default",first,token);}
      break;
    case 146:
      jj_consume_token(146);
      n = Term(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("Strategy8","-","-","Replacement","Default",first,token);}
      break;
    case 147:
      jj_consume_token(147);
      n = Term(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("Strategy9","-","-","Replacement","Default",first,token);}
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[58] = jj_gen;
          break label_37;
        }
        n = ID(true);
                         replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(140);
      n = Strategy(true);
                                                                      replaceName(n);
      jj_consume_token(RBRACE);
                                                                                            {if (true) return productionEndTerminal("Strategy10","-","-","Replacement","Default",first,token);}
      break;
    case PRIM:
      jj_consume_token(PRIM);
      jj_consume_token(LPAREN);
      n = String(true);
                                   replaceName(n);
      jj_consume_token(COMMA);
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case FAIL:
        case ID:
        case LET:
        case NOT:
        case ONE:
        case PRIM:
        case RULES:
        case SOME:
        case TEST:
        case WHERE:
        case IMPORTTERM:
        case IF:
        case REC:
        case SWITCH:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 151:
        case 156:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_38;
        }
        n = Strategy(true);
                                                                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[60] = jj_gen;
          break label_39;
        }
        n = Term(true);
                                                                                                                     replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                                                                                 {if (true) return productionEndTerminal("Strategy11","-","-","Replacement","Default",first,token);}
      break;
    case SOME:
      jj_consume_token(SOME);
      jj_consume_token(LPAREN);
      n = Strategy(true);
                                     replaceName(n);
      jj_consume_token(RPAREN);
                                                           {if (true) return productionEndTerminal("Strategy12","-","-","Replacement","Default",first,token);}
      break;
    case ONE:
      jj_consume_token(ONE);
      jj_consume_token(LPAREN);
      n = Strategy(true);
                                    replaceName(n);
      jj_consume_token(RPAREN);
                                                          {if (true) return productionEndTerminal("Strategy13","-","-","Replacement","Default",first,token);}
      break;
    case ALL:
      jj_consume_token(ALL);
      jj_consume_token(LPAREN);
      n = Strategy(true);
                                    replaceName(n);
      jj_consume_token(RPAREN);
                                                          {if (true) return productionEndTerminal("Strategy14","-","-","Replacement","Default",first,token);}
      break;
    case IMPORTTERM:
      jj_consume_token(IMPORTTERM);
      jj_consume_token(LPAREN);
      n = ModName(true);
                                           replaceName(n);
      jj_consume_token(RPAREN);
                                                                 {if (true) return productionEndTerminal("Strategy15","-","-","Replacement","Default",first,token);}
      break;
      n = SVar(true);
                      replaceName(n);
      jj_consume_token(LPAREN);
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case FAIL:
        case ID:
        case LET:
        case NOT:
        case ONE:
        case PRIM:
        case RULES:
        case SOME:
        case TEST:
        case WHERE:
        case IMPORTTERM:
        case IF:
        case REC:
        case SWITCH:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 151:
        case 156:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_40;
        }
        n = Strategy(true);
                                                              replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                          {if (true) return productionEndTerminal("Strategy16","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(LBRACE);
      n = Strategy(true);
                              replaceName(n);
      jj_consume_token(RBRACE);
                                                    {if (true) return productionEndTerminal("Strategy17","-","-","Replacement","Default",first,token);}
      break;
    case 156:
      n = StrategyAngle(true);
                               replaceName(n);
      n = Term(true);
                                                              replaceName(n);
                                                                                {if (true) return productionEndTerminal("Strategy18","-","-","Replacement","Default",first,token);}
      break;
    case REC:
      jj_consume_token(REC);
      n = Id(true);
                          replaceName(n);
      jj_consume_token(LPAREN);
      n = Strategy(true);
                                                                 replaceName(n);
      jj_consume_token(RPAREN);
                                                                                       {if (true) return productionEndTerminal("Strategy19","-","-","Replacement","Default",first,token);}
      break;
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(LPAREN);
      n = Strategy(true);
                                    replaceName(n);
      jj_consume_token(RPAREN);
                                                          {if (true) return productionEndTerminal("Strategy20","-","-","Replacement","Default",first,token);}
      break;
    case WHERE:
      jj_consume_token(WHERE);
      jj_consume_token(LPAREN);
      n = Strategy(true);
                                      replaceName(n);
      jj_consume_token(RPAREN);
                                                            {if (true) return productionEndTerminal("Strategy21","-","-","Replacement","Default",first,token);}
      break;
    case 148:
      jj_consume_token(148);
      jj_consume_token(LPAREN);
      n = Strategy(true);
                                     replaceName(n);
      jj_consume_token(RPAREN);
                                                           {if (true) return productionEndTerminal("Strategy22","-","-","Replacement","Default",first,token);}
      break;
    case TEST:
      jj_consume_token(TEST);
      jj_consume_token(LPAREN);
      n = Strategy(true);
                                     replaceName(n);
      jj_consume_token(RPAREN);
                                                           {if (true) return productionEndTerminal("Strategy23","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(PRIM);
      jj_consume_token(LPAREN);
      n = String(true);
                                   replaceName(n);
      jj_consume_token(RPAREN);
                                                         {if (true) return productionEndTerminal("Strategy24","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(PRIM);
      jj_consume_token(LPAREN);
      n = String(true);
                                   replaceName(n);
      jj_consume_token(COMMA);
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 156:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_41;
        }
        n = Term(true);
                                                                       replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                                   {if (true) return productionEndTerminal("Strategy25","-","-","Replacement","Default",first,token);}
      break;
    case STRING_LITERAL:
      n = String(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("Strategy26","-","-","Replacement","Default",first,token);}
      break;
    case INTEGER_LITERAL:
    case MINUS:
      n = Int(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("Strategy27","-","-","Replacement","Default",first,token);}
      break;
      n = Real(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("Strategy28","-","-","Replacement","Default",first,token);}
      break;
      n = String(true);
                        replaceName(n);
      jj_consume_token(LPAREN);
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case FAIL:
        case ID:
        case LET:
        case NOT:
        case ONE:
        case PRIM:
        case RULES:
        case SOME:
        case TEST:
        case WHERE:
        case IMPORTTERM:
        case IF:
        case REC:
        case SWITCH:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 151:
        case 156:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_42;
        }
        n = Strategy(true);
                                                                replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                            {if (true) return productionEndTerminal("Strategy29","-","-","Replacement","Default",first,token);}
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      n = Strategy(true);
                              replaceName(n);
      jj_consume_token(RPAREN);
                                                    {if (true) return productionEndTerminal("Strategy30","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(LPAREN);
      n = Strategy(true);
                              replaceName(n);
      jj_consume_token(COMMA);
      label_43:
      while (true) {
        n = Strategy(true);
                                                                      replaceName(n);
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case FAIL:
        case ID:
        case LET:
        case NOT:
        case ONE:
        case PRIM:
        case RULES:
        case SOME:
        case TEST:
        case WHERE:
        case IMPORTTERM:
        case IF:
        case REC:
        case SWITCH:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 151:
        case 156:
          ;
          break;
        default:
          jj_la1[64] = jj_gen;
          break label_43;
        }
      }
      jj_consume_token(RPAREN);
                                                                                                  {if (true) return productionEndTerminal("Strategy31","-","-","Replacement","Default",first,token);}
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case FAIL:
        case ID:
        case LET:
        case NOT:
        case ONE:
        case PRIM:
        case RULES:
        case SOME:
        case TEST:
        case WHERE:
        case IMPORTTERM:
        case IF:
        case REC:
        case SWITCH:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 151:
        case 156:
          ;
          break;
        default:
          jj_la1[65] = jj_gen;
          break label_44;
        }
        n = Strategy(true);
                               replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RBRACKET);
                                                           {if (true) return productionEndTerminal("Strategy32","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(LBRACKET);
      label_45:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case FAIL:
        case ID:
        case LET:
        case NOT:
        case ONE:
        case PRIM:
        case RULES:
        case SOME:
        case TEST:
        case WHERE:
        case IMPORTTERM:
        case IF:
        case REC:
        case SWITCH:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 151:
        case 156:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_45;
        }
        n = Strategy(true);
                               replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      n = Strategy(true);
                                                                            replaceName(n);
      jj_consume_token(RBRACKET);
                                                                                                  {if (true) return productionEndTerminal("Strategy33","-","-","Replacement","Default",first,token);}
      break;
      n = SVar(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("Strategy34","-","-","Replacement","Default",first,token);}
      break;
    case 149:
      jj_consume_token(149);
      n = Rule(true);
                           replaceName(n);
      jj_consume_token(149);
                                                  {if (true) return productionEndTerminal("Strategy35","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(LPAREN);
      n = Rule(true);
                          replaceName(n);
      jj_consume_token(RPAREN);
                                                {if (true) return productionEndTerminal("Strategy36","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(145);
      jj_consume_token(LPAREN);
      label_46:
      while (true) {
        n = Strategy(true);
                                         replaceName(n);
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
        case FAIL:
        case ID:
        case LET:
        case NOT:
        case ONE:
        case PRIM:
        case RULES:
        case SOME:
        case TEST:
        case WHERE:
        case IMPORTTERM:
        case IF:
        case REC:
        case SWITCH:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case MINUS:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
        case 144:
        case 145:
        case 146:
        case 147:
        case 148:
        case 149:
        case 151:
        case 156:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_46;
        }
      }
      jj_consume_token(RPAREN);
                                                                     {if (true) return productionEndTerminal("Strategy37","-","-","Replacement","Default",first,token);}
      break;
    case IF:
      jj_consume_token(IF);
      n = Strategy(true);
                               replaceName(n);
      jj_consume_token(THEN);
      n = Strategy(true);
                                                                         replaceName(n);
      jj_consume_token(ELSE);
      n = Strategy(true);
                                                                                                                   replaceName(n);
      jj_consume_token(END);
                                                                                                                                           {if (true) return productionEndTerminal("Strategy38","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(IF);
      n = Strategy(true);
                               replaceName(n);
      jj_consume_token(THEN);
      n = Strategy(true);
                                                                         replaceName(n);
      jj_consume_token(END);
                                                                                                 {if (true) return productionEndTerminal("Strategy39","-","-","Replacement","Default",first,token);}
      break;
    case SWITCH:
      jj_consume_token(SWITCH);
      n = Strategy(true);
                                   replaceName(n);
      label_47:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[68] = jj_gen;
          break label_47;
        }
        n = SwitchCase(true);
                                                                         replaceName(n);
      }
      jj_consume_token(END);
                                                                                                   {if (true) return productionEndTerminal("Strategy40","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(SWITCH);
      n = Strategy(true);
                                   replaceName(n);
      label_48:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_48;
        }
        n = SwitchCase(true);
                                                                         replaceName(n);
      }
      jj_consume_token(OTHERWISE);
      jj_consume_token(140);
      n = Strategy(true);
                                                                                                                              replaceName(n);
      jj_consume_token(END);
                                                                                                                                                      {if (true) return productionEndTerminal("Strategy41","-","-","Replacement","Default",first,token);}
      break;
      n = Term(true);
                      replaceName(n);
      jj_consume_token(150);
      n = Term(true);
                                                          replaceName(n);
                                                                            {if (true) return productionEndTerminal("Strategy42","-","-","Replacement","Default",first,token);}
      break;
    case 151:
      jj_consume_token(151);
      n = ScopeLabels(true);
                                  replaceName(n);
      jj_consume_token(140);
      n = Strategy(true);
                                                                         replaceName(n);
      jj_consume_token(152);
                                                                                                {if (true) return productionEndTerminal("Strategy43","-","-","Replacement","Default",first,token);}
      break;
    case RULES:
      jj_consume_token(RULES);
      jj_consume_token(LPAREN);
      label_49:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[70] = jj_gen;
          break label_49;
        }
        n = DynRuleDef(true);
                                         replaceName(n);
      }
      jj_consume_token(RPAREN);
      jj_consume_token(SLASH);
      n = RuleNames(true);
                                                                                       replaceName(n);
      jj_consume_token(153);
      n = Strategy(true);
                                                                                                                                replaceName(n);
                                                                                                                                                  {if (true) return productionEndTerminal("Strategy44","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StrategyMid(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Strategy(true);
                          replaceName(n);
                                            {if (true) return productionEndTerminal("StrategyMid","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StrategyDef(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Id(true);
                    replaceName(n);
      jj_consume_token(LPAREN);
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_50;
        }
        n = Typedid(true);
                                                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      label_51:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[73] = jj_gen;
          break label_51;
        }
        n = Typedid(true);
                                                                                                        replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
      jj_consume_token(154);
      n = Strategy(true);
                                                                                                                                                         replaceName(n);
                                                                                                                                                                           {if (true) return productionEndTerminal("StrategyDef1","-","-","Replacement","Default",first,token);}
      break;
    case EXTERNAL:
      jj_consume_token(EXTERNAL);
      n = Id(true);
                               replaceName(n);
      jj_consume_token(LPAREN);
      label_52:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_52;
        }
        n = Typedid(true);
                                                                      replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      label_53:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[75] = jj_gen;
          break label_53;
        }
        n = Typedid(true);
                                                                                                                   replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
      jj_consume_token(154);
      n = Strategy(true);
                                                                                                                                                                    replaceName(n);
                                                                                                                                                                                      {if (true) return productionEndTerminal("StrategyDef2","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(EXTERNAL);
      n = Id(true);
                               replaceName(n);
      jj_consume_token(LPAREN);
      label_54:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[76] = jj_gen;
          break label_54;
        }
        n = Typedid(true);
                                                                      replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      label_55:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[77] = jj_gen;
          break label_55;
        }
        n = Typedid(true);
                                                                                                                   replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                                                                               {if (true) return productionEndTerminal("StrategyDef3","-","-","Replacement","Default",first,token);}
      break;
      jj_consume_token(EXTERNAL);
      n = EmptyId(true);
                                    replaceName(n);
      jj_consume_token(LPAREN);
      label_56:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[78] = jj_gen;
          break label_56;
        }
        n = Typedid(true);
                                                                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      label_57:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[79] = jj_gen;
          break label_57;
        }
        n = Typedid(true);
                                                                                                                        replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                                                                                    {if (true) return productionEndTerminal("StrategyDef4","-","-","Replacement","Default",first,token);}
      break;
      n = Id(true);
                    replaceName(n);
      jj_consume_token(154);
      n = Strategy(true);
                                                           replaceName(n);
                                                                             {if (true) return productionEndTerminal("StrategyDef5","-","-","Replacement","Default",first,token);}
      break;
      n = Id(true);
                    replaceName(n);
      jj_consume_token(LPAREN);
      label_58:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[80] = jj_gen;
          break label_58;
        }
        n = Typedid(true);
                                                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
      jj_consume_token(154);
      n = Strategy(true);
                                                                                                            replaceName(n);
                                                                                                                              {if (true) return productionEndTerminal("StrategyDef6","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo EmptyId(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
          {if (true) return productionEndTerminal("EmptyId","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Typedid(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = ID(true);
                    replaceName(n);
      jj_consume_token(140);
      n = Type(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("Typedid1","-","-","Replacement","Default",first,token);}
      break;
      n = ID(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("Typedid2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Anno(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTEND:
      jj_consume_token(EXTEND);
                   {if (true) return productionEndTerminal("Anno1","-","-","Replacement","Default",first,token);}
      break;
    case OVERRIDE:
      jj_consume_token(OVERRIDE);
                     {if (true) return productionEndTerminal("Anno2","-","-","Replacement","Default",first,token);}
      break;
    case INTERNAL:
      jj_consume_token(INTERNAL);
                     {if (true) return productionEndTerminal("Anno3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Strat(boolean inTerminal) throws ParseException {
                                      Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
    jj_consume_token(LPAREN);
    label_59:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_59;
      }
      n = Strat(true);
                                                         replaceName(n);
      jj_consume_token(COMMA);
    }
    jj_consume_token(RPAREN);
                                                                                     {if (true) return productionEndTerminal("Strat","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Overlay(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Id(true);
                    replaceName(n);
      jj_consume_token(154);
      n = Term(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("Overlay1","-","-","Replacement","Default",first,token);}
      break;
      n = Id(true);
                    replaceName(n);
      jj_consume_token(LPAREN);
      label_60:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[85] = jj_gen;
          break label_60;
        }
        n = Id(true);
                                                      replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
      jj_consume_token(154);
      n = Term(true);
                                                                                                   replaceName(n);
                                                                                                                     {if (true) return productionEndTerminal("Overlay2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleDef(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Id(true);
                    replaceName(n);
      jj_consume_token(140);
      n = Rule(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("RuleDef1","-","-","Replacement","Default",first,token);}
      break;
      n = Id(true);
                    replaceName(n);
      jj_consume_token(LPAREN);
      label_61:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[87] = jj_gen;
          break label_61;
        }
        n = Typedid(true);
                                                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
      jj_consume_token(140);
      n = Rule(true);
                                                                                                        replaceName(n);
                                                                                                                          {if (true) return productionEndTerminal("RuleDef2","-","-","Replacement","Default",first,token);}
      break;
      n = Id(true);
                    replaceName(n);
      jj_consume_token(LPAREN);
      label_62:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[88] = jj_gen;
          break label_62;
        }
        n = Typedid(true);
                                                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      label_63:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[89] = jj_gen;
          break label_63;
        }
        n = Typedid(true);
                                                                                                        replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
      jj_consume_token(140);
      n = Rule(true);
                                                                                                                                                     replaceName(n);
                                                                                                                                                                       {if (true) return productionEndTerminal("RuleDef3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Rule(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case LPAREN:
    case LBRACKET:
    case MINUS:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 156:
      n = Term(true);
                      replaceName(n);
      jj_consume_token(141);
      n = Term(true);
                                                          replaceName(n);
                                                                            {if (true) return productionEndTerminal("Rule1","-","-","Replacement","Default",first,token);}
      break;
      n = Term(true);
                      replaceName(n);
      jj_consume_token(141);
      n = Term(true);
                                                          replaceName(n);
      jj_consume_token(WHERE);
      n = Strategy(true);
                                                                                                     replaceName(n);
                                                                                                                       {if (true) return productionEndTerminal("Rule2","-","-","Replacement","Default",first,token);}
      break;
      n = Term(true);
                      replaceName(n);
      jj_consume_token(141);
      n = Term(true);
                                                          replaceName(n);
      label_64:
      while (true) {
        n = RuleCond(true);
                                                                                              replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHERE:
        case 148:
          ;
          break;
        default:
          jj_la1[91] = jj_gen;
          break label_64;
        }
      }
                                                                                                                  {if (true) return productionEndTerminal("Rule3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleCond(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      n = Strategy(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("RuleCond1","-","-","Replacement","Default",first,token);}
      break;
    case 148:
      jj_consume_token(148);
      n = Strategy(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("RuleCond2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Kind(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
              {if (true) return productionEndTerminal("Kind1","-","-","Replacement","Default",first,token);}
      break;
    case 155:
      jj_consume_token(155);
               {if (true) return productionEndTerminal("Kind2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo LID(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = LId(true);
                     replaceName(n);
                                       {if (true) return productionEndTerminal("LID","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StrategyAngle(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(156);
    n = Strategy(true);
                              replaceName(n);
    jj_consume_token(157);
                                                    {if (true) return productionEndTerminal("StrategyAngle","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo StrategyCurly(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    n = Strategy(true);
                              replaceName(n);
    jj_consume_token(RBRACE);
                                                    {if (true) return productionEndTerminal("StrategyCurly","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SwitchCase(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CASE);
    n = Strategy(true);
                                 replaceName(n);
    jj_consume_token(140);
    n = Strategy(true);
                                                                        replaceName(n);
                                                                                          {if (true) return productionEndTerminal("SwitchCase","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ScopeLabels(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_65:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
        ;
        break;
      default:
        jj_la1[95] = jj_gen;
        break label_65;
      }
      n = DynRuleScopeId(true);
                                 replaceName(n);
      jj_consume_token(COMMA);
    }
                                                         {if (true) return productionEndTerminal("ScopeLabels1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DynRuleScopeId(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Id(true);
                    replaceName(n);
      jj_consume_token(DOT);
      n = Term(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("DynRuleScopeId1","-","-","Replacement","Default",first,token);}
      break;
      n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("DynRuleScopeId2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[96] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleNames(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_66:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_66;
      }
      n = Id(true);
                     replaceName(n);
      jj_consume_token(COMMA);
    }
                                             {if (true) return productionEndTerminal("RuleNames1","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleDec(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("RuleDec1","-","-","Replacement","Default",first,token);}
      break;
      n = Id(true);
                    replaceName(n);
      jj_consume_token(LPAREN);
      label_67:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[98] = jj_gen;
          break label_67;
        }
        n = Typedid(true);
                                                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                       {if (true) return productionEndTerminal("RuleDec2","-","-","Replacement","Default",first,token);}
      break;
      n = Id(true);
                    replaceName(n);
      jj_consume_token(LPAREN);
      label_68:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[99] = jj_gen;
          break label_68;
        }
        n = Typedid(true);
                                                           replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(139);
      label_69:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 135:
        case 136:
          ;
          break;
        default:
          jj_la1[100] = jj_gen;
          break label_69;
        }
        n = Typedid(true);
                                                                                                        replaceName(n);
        jj_consume_token(COMMA);
      }
      jj_consume_token(RPAREN);
                                                                                                                                    {if (true) return productionEndTerminal("RuleDec3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[101] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DynRuleId(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = RuleDec(true);
                         replaceName(n);
      jj_consume_token(DOT);
      n = Term(true);
                                                            replaceName(n);
                                                                              {if (true) return productionEndTerminal("DynRuleId1","-","-","Replacement","Default",first,token);}
      break;
      n = RuleDec(true);
                         replaceName(n);
      jj_consume_token(PLUS);
      n = Term(true);
                                                            replaceName(n);
                                                                              {if (true) return productionEndTerminal("DynRuleId2","-","-","Replacement","Default",first,token);}
      break;
      n = RuleDec(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("DynRuleId3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo DynRuleDef(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
      n = Id(true);
                    replaceName(n);
      jj_consume_token(PLUS);
      n = Term(true);
                                                       replaceName(n);
                                                                         {if (true) return productionEndTerminal("DynRuleDef1","-","-","Replacement","Default",first,token);}
      break;
      n = DynRuleId(true);
                           replaceName(n);
      jj_consume_token(159);
      n = Term(true);
                                                               replaceName(n);
                                                                                 {if (true) return productionEndTerminal("DynRuleDef2","-","-","Replacement","Default",first,token);}
      break;
      n = DynRuleId(true);
                           replaceName(n);
      jj_consume_token(140);
      n = Rule(true);
                                                              replaceName(n);
                                                                                {if (true) return productionEndTerminal("DynRuleDef3","-","-","Replacement","Default",first,token);}
      break;
      n = DynRuleId(true);
                           replaceName(n);
      jj_consume_token(160);
      n = Rule(true);
                                                               replaceName(n);
                                                                                 {if (true) return productionEndTerminal("DynRuleDef4","-","-","Replacement","Default",first,token);}
      break;
      n = DynRuleId(true);
                           replaceName(n);
      jj_consume_token(140);
      n = Term(true);
                                                              replaceName(n);
                                                                                {if (true) return productionEndTerminal("DynRuleDef5","-","-","Replacement","Default",first,token);}
      break;
      n = DynRuleId(true);
                           replaceName(n);
      jj_consume_token(150);
      n = Term(true);
                                                               replaceName(n);
                                                                                 {if (true) return productionEndTerminal("DynRuleDef6","-","-","Replacement","Default",first,token);}
      break;
      n = DynRuleId(true);
                           replaceName(n);
      jj_consume_token(161);
      n = Term(true);
                                                                replaceName(n);
                                                                                  {if (true) return productionEndTerminal("DynRuleDef7","-","-","Replacement","Default",first,token);}
      break;
      n = DynRuleId(true);
                           replaceName(n);
      jj_consume_token(140);
      n = Rule(true);
                                                              replaceName(n);
      jj_consume_token(162);
      jj_consume_token(163);
      n = Term(true);
                                                                                                             replaceName(n);
                                                                                                                               {if (true) return productionEndTerminal("DynRuleDef8","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  public StrategoParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[104];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10004000,0x0,0x0,0x0,0x21400000,0x21400000,0x80000,0x0,0x0,0x10004000,0x0,0x0,0x21400000,0x0,0x0,0x0,0x0,0x89b5a000,0x0,0x89b5a000,0x0,0x89b5a000,0x0,0x0,0x89b5a000,0x0,0x89b5a000,0x0,0x89b5a000,0x89b5a000,0x89b5a000,0x89b5a000,0x89b5a000,0x0,0x0,0x0,0x89b5a000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x22040000,0x22040000,0x22040000,0x22040000,0x22040000,0x22040000,0x22040000,0x22040000,0x20000000,0x20000000,0x20000000,0x20000000,0x20000000,0x2000040,0x20000000,0x2000040,0x0,0x20000000,0x20000000,0x20000000,0x4,0x4,0x0,0x0,0x7040,0x0,0x7040,0x0,0x4,0x7000,0x7000,0x7040,0x7040,0xa2040683,0x22040000,0xa2040683,0x22040000,0xa2040683,0x22040000,0x0,0xa2040683,0x22040000,0xa2040683,0x22040000,0xa2040683,0xa2040683,0xa2040683,0xa2040683,0xa2040683,0x8,0x8,0x0,0xa2040683,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x7000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x22040000,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x7fe00,0x40,0x40,0xfff80000,0x0,0xfff80010,0xfffffe50,0xfff80000,0xfffffe40,0xfffffe50,0xfff80010,0xfffffe40,0xfff80000,0xfff80000,0xfffffe40,0xfffffe40,0xfffffe40,0xfff80000,0xfff80000,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80002,0xfff80002,0xfff80002,0xfff80002,0xfff80002,0xfff80000,0xfff80002,0xfff80000,0x0,0xfff80002,0xfff80002,0xfff80002,0x0,0x0,0x0,0xfff80010,0xfff80000,0x0,0xfff80000,0xfff80000,0x0,0x0,0x0,0xfff80000,0xfff80000,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80000,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0xfff80042,0x0,0x0,0xfff80000,0xfff80042,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0x0,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0x0,0xfff80042,0x0,0x80,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,0xfff80000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x1fff,0xffffe000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x1fff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0x0,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0x0,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0xffffffff,0x0,0x0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x7f,0xff,0x1ff,0xff,0x1ff,0x1ff,0xff,0x1ff,0x0,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x100001ff,0x100001ff,0x100001ff,0x100001ff,0x100001ff,0x100001ff,0x100001ff,0x100001ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x11ff,0x1ff,0x11ff,0x0,0x1ff,0x1ff,0x1ff,0x8000,0x8000,0x4000,0xff,0x1ff,0x0,0x1ff,0x1ff,0x8000,0x0,0x0,0x1ff,0x1ff,0x10bf01ff,0x100001ff,0x10bf01ff,0x100001ff,0x10bf01ff,0x100001ff,0x1ff,0x10bf01ff,0x100001ff,0x10bf01ff,0x100001ff,0x10bf01ff,0x10bf01ff,0x10bf01ff,0x10bf01ff,0x10bf01ff,0x0,0x0,0x1ff,0x10bf01ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x0,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x100000,0x100001ff,0x100000,0x8000000,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,0x1ff,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  public StrategoParser(CharStream stream) {
    token_source = new StrategoParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
  }

  public StrategoParser(StrategoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
  }

  public void ReInit(StrategoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 104; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[164];
    for (int i = 0; i < 164; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 104; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 164; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
