/* Generated By:JavaCC: Do not edit this line. StrategoParser.java */
package tmp.generated_stratego;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;

public class StrategoParser extends AbstractFSTParser implements StrategoParserConstants {
        public StrategoParser(){}

  final public FSTInfo NatInteger(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(INTEGER_LITERAL);
                           {if (true) return productionEndTerminal("NatInteger","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RealDigit(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(INTEGER_LITERAL);
    jj_consume_token(DOT);
    jj_consume_token(INTEGER_LITERAL);
                                                 {if (true) return productionEndTerminal("RealDigit","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Int(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    n = NatInteger(true);
                                      replaceName(n);
                                                        {if (true) return productionEndTerminal("Int","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Real(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    n = RealDigit(true);
                                     replaceName(n);
                                                       {if (true) return productionEndTerminal("Real","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo String(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(STRING_LITERAL);
                          {if (true) return productionEndTerminal("String","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Char(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(CHARACTER_LITERAL);
                             {if (true) return productionEndTerminal("Char","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Id(boolean inTerminal) throws ParseException {
                                   Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    t = jj_consume_token(IDENTIFIER);
                        replaceName(new FSTInfo("<IDENTIFIER>",t.image));
                                                                            {if (true) return productionEndTerminal("Id","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Module(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ModuleDeclaration(true);
                                   replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORTS:
      n = ImportDeclaration(true);
                                                                                replaceName(n);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPORTS:
      n = ExportDeclaration(true);
                                                                                                                              replaceName(n);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HIDDENS:
      n = HiddenDeclaration(true);
                                                                                                                                                                            replaceName(n);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RULES:
      n = TrafoDeclaration(true);
                                                                                                                                                                                                                         replaceName(n);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(0);
                                                                                                                                                                                                                                                  {if (true) return productionEndTerminal("Module","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ModuleDeclaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(MODULE);
    n = ModName(true);
                                  replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      n = ModuleParameter(true);
                                                                             replaceName(n);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                                                                                                {if (true) return productionEndTerminal("ModuleDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ModuleParameter(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACKET);
    label_1:
    while (true) {
      n = ModuleSort(true);
                                 replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case DLBRACKET:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(RBRACKET);
                                                         {if (true) return productionEndTerminal("ModuleParameter","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ModuleSort(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("ModuleSort1","-","-","Replacement","Default",first,token);}
      break;
    case DLBRACKET:
      jj_consume_token(DLBRACKET);
      n = Id(true);
                         replaceName(n);
      jj_consume_token(DRBRACKET);
                                                {if (true) return productionEndTerminal("ModuleSort2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ModName(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ModNamePart(true);
                             replaceName(n);
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(SLASH);
      n = ModNamePart(true);
                                                                                     replaceName(n);
    }
                                                                                                         {if (true) return productionEndTerminal("ModName","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ModNamePart(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("ModNamePart","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ImportModName(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ModName(true);
                         replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      n = ModuleParameter(true);
                                                                    replaceName(n);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                                                                                       {if (true) return productionEndTerminal("ImportModName","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ImportDeclaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(IMPORTS);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      n = ImportModName(true);
                                          replaceName(n);
    }
                                                              {if (true) return productionEndTerminal("ImportDeclaration","{ModName}{ImportModule}","{ModName}{ImportModule}","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ExportDeclaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(EXPORTS);
    label_4:
    while (true) {
      n = Grammer(true);
                                    replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SORTS:
      case SYNTAX:
      case VARIABLES:
      case STARTSYMBOL:
      case LEXICALSYNTAX:
      case CFREESYNTAX:
      case LEXICALVARS:
      case CFREEPRIORITIES:
      case LEXICALRESTRICTIONS:
      case CFREERESTRICTIONS:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
    }
                                                        {if (true) return productionEndTerminal("ExportDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo HiddenDeclaration(boolean inTerminal) throws ParseException {
                                                  Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(HIDDENS);
    label_5:
    while (true) {
      n = Grammer(true);
                                    replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SORTS:
      case SYNTAX:
      case VARIABLES:
      case STARTSYMBOL:
      case LEXICALSYNTAX:
      case CFREESYNTAX:
      case LEXICALVARS:
      case CFREEPRIORITIES:
      case LEXICALRESTRICTIONS:
      case CFREERESTRICTIONS:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
    }
                                                        {if (true) return productionEndTerminal("HiddenDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Grammer(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SORTS:
      jj_consume_token(SORTS);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case DLBRACKET:
        case LT:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_6;
        }
        n = Sort(true);
                               replaceName(n);
      }
                                                   {if (true) return productionEndTerminal("Grammer1","-","-","Replacement","Default",first,token);}
      break;
    case STARTSYMBOL:
      jj_consume_token(STARTSYMBOL);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case DLBRACKET:
        case LT:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        n = Sort(true);
                                                    replaceName(n);
      }
                                                                        {if (true) return productionEndTerminal("Grammer2","-","-","Replacement","Default",first,token);}
      break;
    case SYNTAX:
    case VARIABLES:
    case LEXICALSYNTAX:
    case CFREESYNTAX:
    case LEXICALVARS:
      n = Productions(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("Grammer3","-","-","Replacement","Default",first,token);}
      break;
    case CFREEPRIORITIES:
    case LEXICALRESTRICTIONS:
    case CFREERESTRICTIONS:
      n = Disambiguations(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("Grammer4","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Productions(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = ProdPart(true);
                          replaceName(n);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case DLBRACKET:
      case ARROW:
      case LT:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      n = Production(true);
                                                                replaceName(n);
    }
                                                                                    {if (true) return productionEndTerminal("Productions","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo ProdPart(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYNTAX:
      jj_consume_token(SYNTAX);
                   {if (true) return productionEndTerminal("ProdPart1","-","-","Replacement","Default",first,token);}
      break;
    case LEXICALSYNTAX:
      jj_consume_token(LEXICALSYNTAX);
                           {if (true) return productionEndTerminal("ProdPart2","-","-","Replacement","Default",first,token);}
      break;
    case CFREESYNTAX:
      jj_consume_token(CFREESYNTAX);
                                {if (true) return productionEndTerminal("ProdPart3","-","-","Replacement","Default",first,token);}
      break;
    case VARIABLES:
      jj_consume_token(VARIABLES);
                      {if (true) return productionEndTerminal("ProdPart4","-","-","Replacement","Default",first,token);}
      break;
    case LEXICALVARS:
      jj_consume_token(LEXICALVARS);
                              {if (true) return productionEndTerminal("ProdPart5","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Disambiguations(boolean inTerminal) throws ParseException {
                                                Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CFREEPRIORITIES:
      jj_consume_token(CFREEPRIORITIES);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case DLBRACKET:
        case ARROW:
        case LT:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_9;
        }
        n = Priority(true);
                                                     replaceName(n);
      }
                                                                         {if (true) return productionEndTerminal("Disambiguations1","-","-","Replacement","Default",first,token);}
      break;
    case LEXICALRESTRICTIONS:
      jj_consume_token(LEXICALRESTRICTIONS);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case DLBRACKET:
        case LT:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_10;
        }
        n = Restriction(true);
                                                     replaceName(n);
      }
                                                                         {if (true) return productionEndTerminal("Disambiguations2","-","-","Replacement","Default",first,token);}
      break;
    case CFREERESTRICTIONS:
      jj_consume_token(CFREERESTRICTIONS);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case DLBRACKET:
        case LT:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_11;
        }
        n = Restriction(true);
                                                          replaceName(n);
      }
                                                                              {if (true) return productionEndTerminal("Disambiguations3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Production(boolean inTerminal) throws ParseException {
                                           Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case DLBRACKET:
      case LT:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      n = Symbol(true);
                         replaceName(n);
    }
    jj_consume_token(ARROW);
    n = Symbol(true);
                                                                 replaceName(n);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      n = OptAttributes(true);
                                                                                                          replaceName(n);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
                                                                                                                             {if (true) return productionEndTerminal("Production","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Symbol(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_2(3)) {
      n = Sort(true);
                                   replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERTICALLINE:
        n = NeuesSymbol(true);
                                                                          replaceName(n);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
                                                                                             {if (true) return productionEndTerminal("Symbol1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_3(2)) {
      jj_consume_token(LPAREN);
      n = Sort(true);
                                       replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERTICALLINE:
        n = NeuesSymbol(true);
                                                                              replaceName(n);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
                                                                                                     {if (true) return productionEndTerminal("Symbol2","-","-","Replacement","Default",first,token);}
    } else if (jj_2_4(2)) {
      n = CharacterClass(true);
                                             replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERTICALLINE:
        n = NeuesSymbol(true);
                                                                                    replaceName(n);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
                                                                                                       {if (true) return productionEndTerminal("Symbol3","-","-","Replacement","Default",first,token);}
    } else if (jj_2_5(2)) {
      jj_consume_token(LPAREN);
      n = CharacterClass(true);
                                                 replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERTICALLINE:
        n = NeuesSymbol(true);
                                                                                        replaceName(n);
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
                                                                                                               {if (true) return productionEndTerminal("Symbol4","-","-","Replacement","Default",first,token);}
    } else if (jj_2_6(2)) {
      n = String(true);
                                     replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTIONMARK:
      case PLUS:
      case STAR:
        n = SortOp(true);
                                                                       replaceName(n);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERTICALLINE:
        n = NeuesSymbol(true);
                                                                                                               replaceName(n);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
                                                                                                                                  {if (true) return productionEndTerminal("Symbol5","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        n = String(true);
                            replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUESTIONMARK:
        case PLUS:
        case STAR:
          n = SortOp(true);
                                                              replaceName(n);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VERTICALLINE:
          n = NeuesSymbol(true);
                                                                                                      replaceName(n);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
                                                                                                                             {if (true) return productionEndTerminal("Symbol6","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo NeuesSymbol(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(VERTICALLINE);
    n = Symbol(true);
                            replaceName(n);
                                              {if (true) return productionEndTerminal("NeuesSymbol","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Sort(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_7(2)) {
      n = Id(true);
                                 replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUESTIONMARK:
      case PLUS:
      case STAR:
        n = SortOp(true);
                                                                   replaceName(n);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
                                                                                      {if (true) return productionEndTerminal("Sort1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DLBRACKET:
        jj_consume_token(DLBRACKET);
        n = Id(true);
                         replaceName(n);
        jj_consume_token(DRBRACKET);
                                                {if (true) return productionEndTerminal("Sort2","-","-","Replacement","Default",first,token);}
        break;
      case LT:
        jj_consume_token(LT);
        n = Id(true);
                        replaceName(n);
        jj_consume_token(GT);
                                              {if (true) return productionEndTerminal("Sort3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[37] = jj_gen;
        if (jj_2_8(2)) {
          jj_consume_token(LBRACE);
          n = Id(true);
                                     replaceName(n);
          n = String(true);
                                                                      replaceName(n);
          jj_consume_token(RBRACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case QUESTIONMARK:
          case PLUS:
          case STAR:
            n = SortOp(true);
                                                                                                            replaceName(n);
            break;
          default:
            jj_la1[34] = jj_gen;
            ;
          }
                                                                                                                               {if (true) return productionEndTerminal("Sort4","-","-","Replacement","Default",first,token);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            jj_consume_token(LPAREN);
            label_13:
            while (true) {
              n = Sort(true);
                           replaceName(n);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IDENTIFIER:
              case LPAREN:
              case LBRACE:
              case DLBRACKET:
              case LT:
                ;
                break;
              default:
                jj_la1[35] = jj_gen;
                break label_13;
              }
            }
            jj_consume_token(RPAREN);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case QUESTIONMARK:
            case PLUS:
            case STAR:
              n = SortOp(true);
                                                                   replaceName(n);
              break;
            default:
              jj_la1[36] = jj_gen;
              ;
            }
                                                                                      {if (true) return productionEndTerminal("Sort5","-","-","Replacement","Default",first,token);}
            break;
          default:
            jj_la1[38] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo SortOp(boolean inTerminal) throws ParseException {
                                       Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
              {if (true) return productionEndTerminal("SortOp1","-","-","Replacement","Default",first,token);}
      break;
    case PLUS:
      jj_consume_token(PLUS);
              {if (true) return productionEndTerminal("SortOp2","-","-","Replacement","Default",first,token);}
      break;
    case QUESTIONMARK:
      jj_consume_token(QUESTIONMARK);
              {if (true) return productionEndTerminal("SortOp3","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo CharacterClass(boolean inTerminal) throws ParseException {
                                               Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = Id(true);
                     replaceName(n);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    jj_consume_token(LBRACKET);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_14;
      }
      n = Id(true);
                                                        replaceName(n);
    }
    jj_consume_token(RBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTIONMARK:
    case PLUS:
    case STAR:
      n = SortOp(true);
                                                                                                replaceName(n);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
                                                                                                                   {if (true) return productionEndTerminal("CharacterClass","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo OptAttributes(boolean inTerminal) throws ParseException {
                                              Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(LBRACE);
    n = Attribute(true);
                               replaceName(n);
    label_15:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_15;
      }
      jj_consume_token(COMMA);
      n = Attribute(true);
                                                                                     replaceName(n);
    }
    jj_consume_token(RBRACE);
                                                                                                             {if (true) return productionEndTerminal("OptAttributes","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Attribute(boolean inTerminal) throws ParseException {
                                          Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BRACKET:
      jj_consume_token(BRACKET);
                    {if (true) return productionEndTerminal("Attribute1","-","-","Replacement","Default",first,token);}
      break;
    case PREFER:
      jj_consume_token(PREFER);
                   {if (true) return productionEndTerminal("Attribute2","-","-","Replacement","Default",first,token);}
      break;
    case AVOID:
      jj_consume_token(AVOID);
                  {if (true) return productionEndTerminal("Attribute3","-","-","Replacement","Default",first,token);}
      break;
    case LEFT:
      jj_consume_token(LEFT);
                 {if (true) return productionEndTerminal("Attribute4","-","-","Replacement","Default",first,token);}
      break;
    case RIGHT:
      jj_consume_token(RIGHT);
                  {if (true) return productionEndTerminal("Attribute5","-","-","Replacement","Default",first,token);}
      break;
    case NONASSOC:
      jj_consume_token(NONASSOC);
                      {if (true) return productionEndTerminal("Attribute6","-","-","Replacement","Default",first,token);}
      break;
    case ASSOC:
      jj_consume_token(ASSOC);
                  {if (true) return productionEndTerminal("Attribute7","-","-","Replacement","Default",first,token);}
      break;
    case REJECT:
      jj_consume_token(REJECT);
                   {if (true) return productionEndTerminal("Attribute8","-","-","Replacement","Default",first,token);}
      break;
    case RECOVER:
      jj_consume_token(RECOVER);
                    {if (true) return productionEndTerminal("Attribute9","-","-","Replacement","Default",first,token);}
      break;
    case INDENTPADDING:
      jj_consume_token(INDENTPADDING);
                          {if (true) return productionEndTerminal("Attribute10","-","-","Replacement","Default",first,token);}
      break;
    case CONS:
    case DEPRECATED:
      n = Constructor(true);
                             replaceName(n);
                                               {if (true) return productionEndTerminal("Attribute11","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Constructor(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONS:
      jj_consume_token(CONS);
      jj_consume_token(LPAREN);
      n = String(true);
                                   replaceName(n);
      jj_consume_token(RPAREN);
                                                         {if (true) return productionEndTerminal("Constructor1","-","-","Replacement","Default",first,token);}
      break;
    case DEPRECATED:
      jj_consume_token(DEPRECATED);
      jj_consume_token(LPAREN);
      n = String(true);
                                         replaceName(n);
      jj_consume_token(RPAREN);
                                                               {if (true) return productionEndTerminal("Constructor2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Priority(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_11(3)) {
      n = Production(true);
                                         replaceName(n);
      label_16:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(GT);
        n = Production(true);
                                                                                                replaceName(n);
      }
                                                                                                                    {if (true) return productionEndTerminal("Priority1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_12(3)) {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT:
      case ASSOC:
      case AVOID:
      case RIGHT:
      case PREFER:
      case BRACKET:
      case REJECT:
      case NONASSOC:
      case RECOVER:
      case INDENTPADDING:
      case CONS:
      case DEPRECATED:
        n = Attribute(true);
                                             replaceName(n);
        jj_consume_token(DDOT);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      label_17:
      while (true) {
        n = Production(true);
                                                                                        replaceName(n);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case LBRACKET:
        case DLBRACKET:
        case ARROW:
        case LT:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_17;
        }
      }
      jj_consume_token(RBRACE);
      jj_consume_token(GT);
      n = Production(true);
                                                                                                                                       replaceName(n);
                                                                                                                                                         {if (true) return productionEndTerminal("Priority2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case DLBRACKET:
      case ARROW:
      case LT:
        n = Production(true);
                            replaceName(n);
        jj_consume_token(GT);
        jj_consume_token(LBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT:
        case ASSOC:
        case AVOID:
        case RIGHT:
        case PREFER:
        case BRACKET:
        case REJECT:
        case NONASSOC:
        case RECOVER:
        case INDENTPADDING:
        case CONS:
        case DEPRECATED:
          n = Attribute(true);
                                                                         replaceName(n);
          jj_consume_token(DDOT);
          break;
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        label_18:
        while (true) {
          n = Production(true);
                                                                                                                    replaceName(n);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case LBRACKET:
          case DLBRACKET:
          case ARROW:
          case LT:
            ;
            break;
          default:
            jj_la1[48] = jj_gen;
            break label_18;
          }
        }
        jj_consume_token(RBRACE);
                                                                                                                                            {if (true) return productionEndTerminal("Priority3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Restriction(boolean inTerminal) throws ParseException {
                                            Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_13(3)) {
      n = Symbol(true);
                                     replaceName(n);
      n = Id(true);
                                                                  replaceName(n);
      n = CharacterClass(true);
                                                                                                           replaceName(n);
                                                                                                                             {if (true) return productionEndTerminal("Restriction1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
      case DLBRACKET:
      case LT:
        n = Symbol(true);
                        replaceName(n);
        n = Id(true);
                                                     replaceName(n);
        n = CharacterClass(true);
                                                                                              replaceName(n);
        jj_consume_token(DOT);
        n = CharacterClass(true);
                                                                                                                                           replaceName(n);
                                                                                                                                                             {if (true) return productionEndTerminal("Restriction2","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo TrafoDeclaration(boolean inTerminal) throws ParseException {
                                                 Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    jj_consume_token(RULES);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[51] = jj_gen;
        break label_19;
      }
      n = Def(true);
                              replaceName(n);
    }
                                                  {if (true) return productionEndTerminal("TrafoDeclaration","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Def(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = RuleDef(true);
                         replaceName(n);
                                           {if (true) return productionEndTerminal("Def","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleDef(boolean inTerminal) throws ParseException {
                                        Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = RuleName(true);
                          replaceName(n);
    jj_consume_token(DDOT);
    n = Rule(true);
                                                             replaceName(n);
                                                                               {if (true) return productionEndTerminal("RuleDef","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleName(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    label_20:
    while (true) {
      n = Id(true);
                     replaceName(n);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_20;
      }
    }
                                         {if (true) return productionEndTerminal("RuleName","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Rule(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Term(true);
                      replaceName(n);
    jj_consume_token(ARROW);
    n = Term(true);
                                                          replaceName(n);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
      case WHERE:
        ;
        break;
      default:
        jj_la1[53] = jj_gen;
        break label_21;
      }
      n = RuleCond(true);
                                                                                              replaceName(n);
    }
                                                                                                                  {if (true) return productionEndTerminal("Rule","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo RuleCond(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
      n = Strategy(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("RuleCond1","-","-","Replacement","Default",first,token);}
      break;
    case WITH:
      jj_consume_token(WITH);
      n = Strategy(true);
                                 replaceName(n);
                                                   {if (true) return productionEndTerminal("RuleCond2","-","-","Replacement","Default",first,token);}
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Strategy(boolean inTerminal) throws ParseException {
                                         Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_14(2)) {
      n = Var(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("Strategy1","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(LPAREN);
        n = Strategy(true);
                                    replaceName(n);
        jj_consume_token(RPAREN);
                                                          {if (true) return productionEndTerminal("Strategy2","-","-","Replacement","Default",first,token);}
        break;
      case LT:
        jj_consume_token(LT);
        n = Strategy(true);
                              replaceName(n);
        jj_consume_token(GT);
        n = Term(true);
                                                                 replaceName(n);
                                                                                   {if (true) return productionEndTerminal("Strategy3","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Term(boolean inTerminal) throws ParseException {
                                     Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    if (jj_2_15(2)) {
      n = Var(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("Term1","-","-","Replacement","Default",first,token);}
    } else if (jj_2_16(3)) {
      n = Int(true);
                                  replaceName(n);
                                                    {if (true) return productionEndTerminal("Term2","-","-","Replacement","Default",first,token);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case MINUS:
        n = Real(true);
                      replaceName(n);
                                        {if (true) return productionEndTerminal("Term3","-","-","Replacement","Default",first,token);}
        break;
      case STRING_LITERAL:
        n = String(true);
                        replaceName(n);
                                          {if (true) return productionEndTerminal("Term4","-","-","Replacement","Default",first,token);}
        break;
      case IDENTIFIER:
        n = Id(true);
                    replaceName(n);
        jj_consume_token(LPAREN);
        label_22:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case MINUS:
            ;
            break;
          default:
            jj_la1[56] = jj_gen;
            break label_22;
          }
          n = Term(true);
                                                        replaceName(n);
          jj_consume_token(COMMA);
        }
        jj_consume_token(RPAREN);
                                                                                    {if (true) return productionEndTerminal("Term5","-","-","Replacement","Default",first,token);}
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FSTInfo Var(boolean inTerminal) throws ParseException {
                                    Token first=null,t;FSTInfo n;
     first=getToken(1); productionStart(inTerminal);
    n = Id(true);
                    replaceName(n);
                                      {if (true) return productionEndTerminal("Var","-","-","Replacement","Default",first,token);}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_3_4() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(DEPRECATED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(CONS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_36()) return true;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(INDENTPADDING)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(RECOVER)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(REJECT)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(ASSOC)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(NONASSOC)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(RIGHT)) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(LEFT)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(AVOID)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(PREFER)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(BRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACKET)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_44()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(QUESTIONMARK)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    if (jj_3R_61()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_30()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(DLBRACKET)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(DRBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(DDOT)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(VERTICALLINE)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_36()) return true;
    if (jj_3R_30()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  public StrategoParserTokenManager token_source;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[58];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x400000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x400,0x800,0x1000,0x1,0x0,0x0,0x0,0x0,0x0,0x18000010,0x18000010,0x0,0x0,0x18000010,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x4000000,0x0,0x4000000,0xfe00,0xfe00,0x84000000,0x84000000,0xfe00,0x86000000,0x1c00,0x86000000,0x86000000,0x86000000,0xe000,0x86000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x84000000,0x0,0x0,0x80000000,0x0,0x4000000,0x4000000,0x0,0x301ff,0x30000,0x301ff,0x86000000,0x301ff,0x86000000,0x86000000,0x86000000,0x4000000,0x4000000,0x0,0x0,0x0,0x6040000,0x6040000,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x8,0x10,0x10,0x8,0x0,0x0,0x0,0x212,0x212,0x0,0x31a,0x0,0x31a,0x21a,0x21a,0x0,0x21a,0x2,0x4000000,0x4000000,0x4000000,0x4000000,0x28004000,0x4000000,0x28004000,0x4000000,0x0,0x28004000,0x28004000,0x212,0x28004000,0x210,0x0,0x28004000,0x0,0x0,0x28004000,0x0,0x0,0x0,0x31a,0x0,0x31a,0x31a,0x21a,0x0,0x0,0x0,0x0,0x200,0x10000000,0x10000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[16];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public StrategoParser(CharStream stream) {
    token_source = new StrategoParserTokenManager(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public StrategoParser(StrategoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(StrategoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[127];
    for (int i = 0; i < 127; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 58; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 127; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
