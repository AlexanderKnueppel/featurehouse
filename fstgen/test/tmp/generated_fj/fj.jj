options {
  STATIC = false;
}

PARSER_BEGIN(FJParser)
package tmp.generated_fj;
import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;


public class FJParser extends AbstractFSTParser
{
}

PARSER_END(FJParser)

/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < THIS: "this" >
| < OBJECT: "Object" >
| < CLASS: "class" >| < EXTENDS: "extends" >| < INT: "int" >| < NEW: "new" >| < RETURN: "return" >| < SUPER: "super" >}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < PLUS: "+" >| < MINUS: "-" >| < STAR: "*" >| < SLASH: "/" >}
FSTInfo TypeDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"class" n=Name(inTerminal){ replaceName("Name",n);} "extends" ExtendedType(inTerminal) "{" (LOOKAHEAD(2) VarDeclaration(inTerminal))* ClassConstructor(inTerminal) (MethodDeclaration(inTerminal))* "}" <EOF> {return productionEndNonTerminal("TypeDeclaration","{Name}","{Name}");}

 )  }

FSTInfo Name(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName("<IDENTIFIER>",new FSTInfo(t.toString()));} {return productionEndTerminal("Name","-","{<IDENTIFIER>}","Replacement",first,token);}

 )  }

FSTInfo ExtendedType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> {return productionEndTerminal("ExtendedType1","-","-","Replacement",first,token);}
 |
	"Object"  {return productionEndTerminal("ExtendedType2","-","-","Replacement",first,token);}

 )  }

FSTInfo VarDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	Type(true) t=<IDENTIFIER>{ replaceName("<IDENTIFIER>",new FSTInfo(t.toString()));} ";" {return productionEndTerminal("VarDeclaration","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement",first,token);}

 )  }

FSTInfo ClassConstructor(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	Type(true) "(" [FormalParameterList(true)] ")" "{" "super" "(" [ExpressionList(true)] ")" ";" (FieldAssign(true))* "}" {return productionEndTerminal("ClassConstructor","-","-","Replacement",first,token);}

 )  }

FSTInfo FieldAssign(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"this" "." <IDENTIFIER> "=" <IDENTIFIER> ";" {return productionEndTerminal("FieldAssign","-","-","Replacement",first,token);}

 )  }

FSTInfo MethodDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	Type(true) t=<IDENTIFIER>{ replaceName("<IDENTIFIER>",new FSTInfo(t.toString()));} "(" [FormalParameterList(true)] ")" "{" "return" Expression(true) ";" "}" {return productionEndTerminal("MethodDeclaration","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement",first,token);}

 )  }

FSTInfo BinaryOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"+"  {return productionEndTerminal("BinaryOperator1","-","-","Replacement",first,token);}
 |
	"-"  {return productionEndTerminal("BinaryOperator2","-","-","Replacement",first,token);}
 |
	"*"  {return productionEndTerminal("BinaryOperator3","-","-","Replacement",first,token);}
 |
	"/"  {return productionEndTerminal("BinaryOperator4","-","-","Replacement",first,token);}

 )  }

FSTInfo FormalParameterList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	FormalParameter(true) (FormalParameterRest(true))* {return productionEndTerminal("FormalParameterList","-","-","Replacement",first,token);}

 )  }

FSTInfo FormalParameter(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	Type(true) <IDENTIFIER> {return productionEndTerminal("FormalParameter","-","-","Replacement",first,token);}

 )  }

FSTInfo FormalParameterRest(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"," FormalParameter(true) {return productionEndTerminal("FormalParameterRest","-","-","Replacement",first,token);}

 )  }

FSTInfo Type(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"int"  {return productionEndTerminal("Type1","-","-","Replacement",first,token);}
 |
	<IDENTIFIER> {return productionEndTerminal("Type2","-","-","Replacement",first,token);}
 |
	"Object"  {return productionEndTerminal("Type3","-","-","Replacement",first,token);}

 )  }

FSTInfo Expression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	Term(true) (PlusOrMinus(true))* {return productionEndTerminal("Expression","-","-","Replacement",first,token);}

 )  }

FSTInfo PlusOrMinus(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	PlusExpressionRest(true) {return productionEndTerminal("PlusOrMinus1","-","-","Replacement",first,token);}
 |
	MinusExpressionRest(true) {return productionEndTerminal("PlusOrMinus2","-","-","Replacement",first,token);}

 )  }

FSTInfo PlusExpressionRest(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"+" Term(true) {return productionEndTerminal("PlusExpressionRest","-","-","Replacement",first,token);}

 )  }

FSTInfo MinusExpressionRest(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"-" Term(true) {return productionEndTerminal("MinusExpressionRest","-","-","Replacement",first,token);}

 )  }

FSTInfo Term(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	PrimaryExpression(true) (TimesOrDivide(true))* {return productionEndTerminal("Term","-","-","Replacement",first,token);}

 )  }

FSTInfo TimesOrDivide(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	TimesExpressionRest(true) {return productionEndTerminal("TimesOrDivide1","-","-","Replacement",first,token);}
 |
	DivideExpressionRest(true) {return productionEndTerminal("TimesOrDivide2","-","-","Replacement",first,token);}

 )  }

FSTInfo TimesExpressionRest(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"*" PrimaryExpression(true) {return productionEndTerminal("TimesExpressionRest","-","-","Replacement",first,token);}

 )  }

FSTInfo DivideExpressionRest(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"/" PrimaryExpression(true) {return productionEndTerminal("DivideExpressionRest","-","-","Replacement",first,token);}

 )  }

FSTInfo PrimaryExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INTEGER_LITERAL> {return productionEndTerminal("PrimaryExpression1","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(2147483647) MethodInvoke(true) {return productionEndTerminal("PrimaryExpression2","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(2147483647) FieldInvoke(true) {return productionEndTerminal("PrimaryExpression3","-","-","Replacement",first,token);}
 |
	<IDENTIFIER> {return productionEndTerminal("PrimaryExpression4","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(2147483647) AllocationExpression(true) {return productionEndTerminal("PrimaryExpression5","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(2147483647) CastExpression(true) {return productionEndTerminal("PrimaryExpression6","-","-","Replacement",first,token);}
 |
	NestedExpression(true) {return productionEndTerminal("PrimaryExpression7","-","-","Replacement",first,token);}

 )  }

FSTInfo MethodInvoke(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	InvokeTarget(true) "." <IDENTIFIER> "(" [ExpressionList(true)] ")" {return productionEndTerminal("MethodInvoke","-","-","Replacement",first,token);}

 )  }

FSTInfo FieldInvoke(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	InvokeTarget(true) "." <IDENTIFIER> {return productionEndTerminal("FieldInvoke","-","-","Replacement",first,token);}

 )  }

FSTInfo InvokeTarget(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	AllocationExpression(true) {return productionEndTerminal("InvokeTarget1","-","-","Replacement",first,token);}
 |
	NestedExpression(true) {return productionEndTerminal("InvokeTarget2","-","-","Replacement",first,token);}
 |
	<IDENTIFIER> {return productionEndTerminal("InvokeTarget3","-","-","Replacement",first,token);}
 |
	"this"  {return productionEndTerminal("InvokeTarget4","-","-","Replacement",first,token);}

 )  }

FSTInfo AllocationExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"new" <IDENTIFIER> "(" [ExpressionList(true)] ")" {return productionEndTerminal("AllocationExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo CastExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" Type(true) ")" PrimaryExpression(true) {return productionEndTerminal("CastExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo NestedExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" Expression(true) ")" {return productionEndTerminal("NestedExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo ExpressionList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	Expression(true) ("," Expression(true))* {return productionEndTerminal("ExpressionList","-","-","Replacement",first,token);}

 )  }

