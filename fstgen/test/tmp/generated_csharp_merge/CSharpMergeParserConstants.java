/* Generated By:JavaCC: Do not edit this line. CSharpMergeParserConstants.java */
// adapted from csharp_fst.gcide

package tmp.generated_csharp_merge;

public interface CSharpMergeParserConstants {

  int EOF = 0;
  int ABSTRACT = 7;
  int LONG = 8;
  int AS = 9;
  int NAMESPACE = 10;
  int BASE = 11;
  int NEW = 12;
  int BOOL = 13;
  int NULL = 14;
  int BREAK = 15;
  int OBJECT = 16;
  int BYTE = 17;
  int OPERATOR = 18;
  int CASE = 19;
  int OUT = 20;
  int CATCH = 21;
  int OVERRIDE = 22;
  int CHAR = 23;
  int PARAMS = 24;
  int CHECKED = 25;
  int PRIVATE = 26;
  int CLASS = 27;
  int PROTECTED = 28;
  int CONST = 29;
  int PUBLIC = 30;
  int CONTINUE = 31;
  int READONLY = 32;
  int DECIMAL = 33;
  int REF = 34;
  int DEFAULTTOKEN = 35;
  int RETURN = 36;
  int DELEGATE = 37;
  int SBYTE = 38;
  int DO = 39;
  int SEALED = 40;
  int DOUBLE = 41;
  int SHORT = 42;
  int ELSE = 43;
  int SIZEOF = 44;
  int ENUM = 45;
  int STACKALLOC = 46;
  int EVENT = 47;
  int STATIC = 48;
  int EXPLICIT = 49;
  int STRING = 50;
  int EXTERN = 51;
  int STRUCT = 52;
  int FALSE = 53;
  int SWITCH = 54;
  int FINALLY = 55;
  int THIS = 56;
  int FIXED = 57;
  int THROW = 58;
  int FLOAT = 59;
  int TRUE = 60;
  int FOR = 61;
  int TRY = 62;
  int FOREACH = 63;
  int TYPEOF = 64;
  int GOTO = 65;
  int UINT = 66;
  int IF = 67;
  int ULONG = 68;
  int IMPLICIT = 69;
  int UNCHECKED = 70;
  int IN = 71;
  int UNSAFE = 72;
  int INT = 73;
  int USHORT = 74;
  int INTERFACE = 75;
  int USING = 76;
  int INTERNAL = 77;
  int VIRTUAL = 78;
  int IS = 79;
  int VOID = 80;
  int LOCK = 81;
  int WHILE = 82;
  int VOLATILE = 83;
  int WHERE = 84;
  int ASSEMBLY = 85;
  int MODULE = 86;
  int PARTIAL = 87;
  int YIELD = 88;
  int DOT = 89;
  int LBRACE = 90;
  int RBRACE = 91;
  int LBRACK = 92;
  int RBRACK = 93;
  int LPAREN = 94;
  int RPAREN = 95;
  int PLUS = 96;
  int PLUS_ASN = 97;
  int MINUS = 98;
  int MINUS_ASN = 99;
  int STAR = 100;
  int STAR_ASN = 101;
  int DIV = 102;
  int DIV_ASN = 103;
  int MOD = 104;
  int MOD_ASN = 105;
  int INC = 106;
  int DEC = 107;
  int SL = 108;
  int SL_ASN = 109;
  int SR = 110;
  int SR_ASN = 111;
  int BSR = 112;
  int BSR_ASN = 113;
  int AMPER = 114;
  int BAND_ASN = 115;
  int BOR = 116;
  int BOR_ASN = 117;
  int CARET = 118;
  int BXOR_ASN = 119;
  int TILDE = 120;
  int ASSIGN = 121;
  int EQUAL = 122;
  int LTHAN = 123;
  int LE = 124;
  int GTHAN = 125;
  int GE = 126;
  int BANG = 127;
  int NOT_EQUAL = 128;
  int LOR = 129;
  int LAND = 130;
  int COMMA = 131;
  int COLON = 132;
  int SEMI = 133;
  int HASH = 134;
  int QUOTE = 135;
  int QMARK = 136;
  int QMARKS = 137;
  int ARROW = 138;
  int ANONFUNC = 139;
  int UNICODE_ESCAPE_SEQUENCE = 140;
  int IDENTIFIER = 141;
  int IDENTIFIER_START_CHARACTER = 142;
  int IDENTIFIER_PART_CHARACTER = 143;
  int NUMERIC_LITERAL = 144;
  int HEXADECIMAL_INTEGER_LITERAL = 145;
  int CHARACTER_LITERAL = 146;
  int REGULAR_STRING_LITERAL = 147;
  int VERBATIM_STRING_LITERAL = 148;
  int DECIMAL_DIGIT = 149;
  int INTEGER_TYPE_SUFFIX = 150;
  int HEX_DIGIT = 151;
  int EXPONENT_PART = 152;
  int SIGN = 153;
  int REAL_TYPE_SUFFIX = 154;
  int CHARACTER = 155;
  int SINGLE_CHARACTER = 156;
  int SIMPLE_ESCAPE_SEQUENCE = 157;
  int HEXADECIMAL_ESCAPE_SEQUENCE = 158;
  int REGULAR_STRING_LITERAL_CHARACTER = 159;
  int SINGLE_REGULAR_STRING_LITERAL_CHARACTER = 160;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"abstract\"",
    "\"long\"",
    "\"as\"",
    "\"namespace\"",
    "\"base\"",
    "\"new\"",
    "\"bool\"",
    "\"null\"",
    "\"break\"",
    "\"object\"",
    "\"byte\"",
    "\"operator\"",
    "\"case\"",
    "\"out\"",
    "\"catch\"",
    "\"override\"",
    "\"char\"",
    "\"params\"",
    "\"checked\"",
    "\"private\"",
    "\"class\"",
    "\"protected\"",
    "\"const\"",
    "\"public\"",
    "\"continue\"",
    "\"readonly\"",
    "\"decimal\"",
    "\"ref\"",
    "\"default\"",
    "\"return\"",
    "\"delegate\"",
    "\"sbyte\"",
    "\"do\"",
    "\"sealed\"",
    "\"double\"",
    "\"short\"",
    "\"else\"",
    "\"sizeof\"",
    "\"enum\"",
    "\"stackalloc\"",
    "\"event\"",
    "\"static\"",
    "\"explicit\"",
    "\"string\"",
    "\"extern\"",
    "\"struct\"",
    "\"false\"",
    "\"switch\"",
    "\"finally\"",
    "\"this\"",
    "\"fixed\"",
    "\"throw\"",
    "\"float\"",
    "\"true\"",
    "\"for\"",
    "\"try\"",
    "\"foreach\"",
    "\"typeof\"",
    "\"goto\"",
    "\"uint\"",
    "\"if\"",
    "\"ulong\"",
    "\"implicit\"",
    "\"unchecked\"",
    "\"in\"",
    "\"unsafe\"",
    "\"int\"",
    "\"ushort\"",
    "\"interface\"",
    "\"using\"",
    "\"internal\"",
    "\"virtual\"",
    "\"is\"",
    "\"void\"",
    "\"lock\"",
    "\"while\"",
    "\"volatile\"",
    "\"where\"",
    "\"assembly\"",
    "\"module\"",
    "\"partial\"",
    "\"yield\"",
    "\".\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"+=\"",
    "\"-\"",
    "\"-=\"",
    "\"*\"",
    "\"*=\"",
    "\"/\"",
    "\"/=\"",
    "\"%\"",
    "\"%=\"",
    "\"++\"",
    "\"--\"",
    "\"<<\"",
    "\"<<=\"",
    "\">>\"",
    "\">>=\"",
    "\">>>\"",
    "\">>>=\"",
    "\"&\"",
    "\"&=\"",
    "\"|\"",
    "\"|=\"",
    "\"^\"",
    "\"^=\"",
    "\"~\"",
    "\"=\"",
    "\"==\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\",\"",
    "\":\"",
    "\";\"",
    "\"#\"",
    "\"\\\"\"",
    "\"?\"",
    "\"??\"",
    "\"->\"",
    "\"=>\"",
    "<UNICODE_ESCAPE_SEQUENCE>",
    "<IDENTIFIER>",
    "<IDENTIFIER_START_CHARACTER>",
    "<IDENTIFIER_PART_CHARACTER>",
    "<NUMERIC_LITERAL>",
    "<HEXADECIMAL_INTEGER_LITERAL>",
    "<CHARACTER_LITERAL>",
    "<REGULAR_STRING_LITERAL>",
    "<VERBATIM_STRING_LITERAL>",
    "<DECIMAL_DIGIT>",
    "<INTEGER_TYPE_SUFFIX>",
    "<HEX_DIGIT>",
    "<EXPONENT_PART>",
    "<SIGN>",
    "<REAL_TYPE_SUFFIX>",
    "<CHARACTER>",
    "<SINGLE_CHARACTER>",
    "<SIMPLE_ESCAPE_SEQUENCE>",
    "<HEXADECIMAL_ESCAPE_SEQUENCE>",
    "<REGULAR_STRING_LITERAL_CHARACTER>",
    "<SINGLE_REGULAR_STRING_LITERAL_CHARACTER>",
    "\"::\"",
  };

}
