/* Generated By:JavaCC: Do not edit this line. JMLParserConstants.java */
package de.ovgu.cide.fstgen.parsers.generated_jml_contract_composition;

public interface JMLParserConstants {

  int EOF = 0;
  int JML_MULTI_LINE_END = 7;
  int REG_MULTI_LINE_END = 8;
  int JML_AT = 9;
  int SINGLE_LINE_COMMENT = 10;
  int FORMAL_COMMENT = 15;
  int MULTI_LINE_COMMENT = 16;
  int ABSTRACT = 19;
  int ASSERT = 20;
  int BOOLEAN = 21;
  int BREAK = 22;
  int BYTE = 23;
  int CASE = 24;
  int CATCH = 25;
  int CHAR = 26;
  int CLASS = 27;
  int CONST = 28;
  int CONTINUE = 29;
  int _DEFAULT = 30;
  int DO = 31;
  int DOUBLE = 32;
  int ELSE = 33;
  int ENUM = 34;
  int EXTENDS = 35;
  int FALSE = 36;
  int FINAL = 37;
  int FINALLY = 38;
  int FLOAT = 39;
  int FOR = 40;
  int GOTO = 41;
  int IF = 42;
  int IMPLEMENTS = 43;
  int IMPORT = 44;
  int INSTANCEOF = 45;
  int INT = 46;
  int INTERFACE = 47;
  int LONG = 48;
  int NATIVE = 49;
  int NEW = 50;
  int NULL = 51;
  int PACKAGE = 52;
  int PRIVATE = 53;
  int PROTECTED = 54;
  int PUBLIC = 55;
  int RETURN = 56;
  int SHORT = 57;
  int STATIC = 58;
  int STRICTFP = 59;
  int SUPER = 60;
  int SWITCH = 61;
  int SYNCHRONIZED = 62;
  int THIS = 63;
  int THROW = 64;
  int THROWS = 65;
  int TRANSIENT = 66;
  int TRUE = 67;
  int TRY = 68;
  int VOID = 69;
  int VOLATILE = 70;
  int WHILE = 71;
  int ORIGINAL_SPEC = 72;
  int ORIGINAL_CASE = 73;
  int ORIGINAL_CLAUSE = 74;
  int ORIGINAL = 75;
  int FINAL_CONTRACT = 76;
  int FINAL_METHOD = 77;
  int CONSECUTIVE_CONTRACT = 78;
  int CONJUNCTIVE_CONTRACT = 79;
  int CUMULATIVE_CONTRACT = 80;
  int HENCE_BY = 81;
  int HENCE_BY_REDUNDANTLY = 82;
  int MODEL = 83;
  int SPEC_PROTECTED = 84;
  int GHOST = 85;
  int PURE = 86;
  int INSTANCE = 87;
  int HELPER = 88;
  int UNINITIALIZED = 89;
  int JAVA_MATH = 90;
  int SPEC_JAVA_MATH = 91;
  int SPEC_SAFE_MATH = 92;
  int CODE_JAVA_MATH = 93;
  int CODE_SAFE_MATH = 94;
  int ALSO = 95;
  int SPEC_PUBLIC = 96;
  int SPEC_BIGINT_MATH = 97;
  int CODE_BIGINT_MATH = 98;
  int NON_NULL = 99;
  int NULLABLE = 100;
  int NULLABLE_BY_DEFAULT = 101;
  int EXTRACT = 102;
  int METHOD = 103;
  int CONSTRUCTOR = 104;
  int TYPE = 105;
  int IN = 106;
  int IN_REDUNDANTLY = 107;
  int INTO = 108;
  int MAPS = 109;
  int MAPS_REDUNDANTLY = 110;
  int STATIC_INITIALIZER = 111;
  int MAINTAINING = 112;
  int MAINTAINING_REDUNDANTLY = 113;
  int LOOP_INVARIANT = 114;
  int LOOP_INVARIANT_REDUNDANTLY = 115;
  int DECREASING = 116;
  int DECREASING_REDUNDANTLY = 117;
  int DECREASES = 118;
  int DECREASES_REDUNDANTLY = 119;
  int ASSUME = 120;
  int ASSUME_REDUNDANTLY = 121;
  int SET = 122;
  int REFINING = 123;
  int UNREACHABLE = 124;
  int DEBUG = 125;
  int HENCEBY = 126;
  int HENCEBY_REDUNDANTLY = 127;
  int INVARIANT = 128;
  int INVARIANT_REDUNDANTLY = 129;
  int CONSTRAINT = 130;
  int CONSTRAINT_REDUNDANTLY = 131;
  int EVERYTHING = 132;
  int INV = 133;
  int DISJOINT = 134;
  int SUCH_THAT = 135;
  int REPRESENTS = 136;
  int REPRESENTS_REDUNDANTLY = 137;
  int INITIALLY = 138;
  int READABLE = 139;
  int WRITABLE = 140;
  int MONITORS_FOR = 141;
  int CHOOSE = 142;
  int OR = 143;
  int CHOOSE_IF = 144;
  int ABRUPT_BEHAVIOR = 145;
  int ABRUPT_BEHAVIOUR = 146;
  int CONTINUES = 147;
  int CONTINUES_REDUNDANTLY = 148;
  int BREAKS = 149;
  int BREAKS_REDUNDANTLY = 150;
  int RETURNS = 151;
  int RETURNS_REDUNDANTLY = 152;
  int RESULT = 153;
  int OLD = 154;
  int PRE = 155;
  int NOT_ASSIGNED = 156;
  int NOT_MODIFIED = 157;
  int ONLY_ACCESSED = 158;
  int ONLY_CAPTURED = 159;
  int ONLY_CALLED = 160;
  int FRESH = 161;
  int REACH = 162;
  int DURATION = 163;
  int SPACE = 164;
  int WORKING_SPACE = 165;
  int NONNULLELEMENTS = 166;
  int TYPEOF = 167;
  int ELEMTYPE = 168;
  int LOCKSET = 169;
  int MAX = 170;
  int IS_INITIALIZED = 171;
  int INVARIANT_FOR = 172;
  int LBLNEG = 173;
  int FORALL = 174;
  int EXISTS = 175;
  int MIN = 176;
  int NUM_OF = 177;
  int PRODUCT = 178;
  int SUM = 179;
  int NOTHING = 180;
  int NOT_SPECIFIED = 181;
  int LBLPOS = 182;
  int ONLY_ASSIGNED = 183;
  int BEHAVIOR = 184;
  int BEHAVIOUR = 185;
  int NORMAL_BEHAVIOR = 186;
  int NORMAL_BEHAVIOUR = 187;
  int EXCEPTIONAL_BEHAVIOR = 188;
  int EXCEPTIONAL_BEHAVIOUR = 189;
  int SAME = 190;
  int REQUIRES = 191;
  int REQUIRES_REDUNDANTLY = 192;
  int PRE_REDUNDANTLY = 193;
  int ENSURES = 194;
  int POST = 195;
  int ENSURES_REDUNDANTLY = 196;
  int POST_REDUNDANTLY = 197;
  int SIGNALS = 198;
  int SIGNALS_REDUNDANTLY = 199;
  int EXSURES = 200;
  int EXSURES_REDUNDANTLY = 201;
  int SIGNALS_ONLY = 202;
  int SIGNALS_ONLY_REDUNDANTLY = 203;
  int DIVERGES = 204;
  int DIVERGES_REDUNDANTLY = 205;
  int WHEN = 206;
  int WHEN_REDUNDANTLY = 207;
  int ASSIGNABLE = 208;
  int ASSIGNABLE_REDUNDANTLY = 209;
  int MODIFIABLE = 210;
  int MODIFIABLE_REDUNDANTLY = 211;
  int CALLABLE = 212;
  int CALLABLE_REDUNDANTLY = 213;
  int MEASURED_BY = 214;
  int MEASURED_BY_REDUNDANTLY = 215;
  int CAPTURES = 216;
  int CAPTURES_REDUNDANTLY = 217;
  int WORKING_SPACE_REDUNDANTLY = 218;
  int DURATION_REDUNDANTLY = 219;
  int MODIFIES = 220;
  int MODIFIES_REDUNDANTLY = 221;
  int CODE = 222;
  int ASSERT_REDUNDANTLY = 223;
  int AXIOM = 224;
  int ACCESSIBLE = 225;
  int ACCESSIBLE_REDUNDANTLY = 226;
  int IMPLIES_THAT = 227;
  int FOR_EXAMPLE = 228;
  int EXCEPTIONAL_EXAMPLE = 229;
  int NORMAL_EXAMPLE = 230;
  int MODEL_PROGRAM = 231;
  int INTEGER_LITERAL = 232;
  int DECIMAL_LITERAL = 233;
  int HEX_LITERAL = 234;
  int OCTAL_LITERAL = 235;
  int FLOATING_POINT_LITERAL = 236;
  int EXPONENT = 237;
  int CHARACTER_LITERAL = 238;
  int STRING_LITERAL = 239;
  int BOOLEAN_LITERAL = 240;
  int IDENTIFIER = 241;
  int LETTER = 242;
  int DIGIT = 243;
  int LPAREN = 244;
  int RPAREN = 245;
  int LBRACE = 246;
  int RBRACE = 247;
  int LBRACKET = 248;
  int RBRACKET = 249;
  int SEMICOLON = 250;
  int COMMA = 251;
  int DOT = 252;
  int AT = 253;
  int ASSIGN = 254;
  int LT = 255;
  int BANG = 256;
  int TILDE = 257;
  int HOOK = 258;
  int COLON = 259;
  int EQ = 260;
  int LE = 261;
  int GE = 262;
  int NE = 263;
  int SC_OR = 264;
  int SC_AND = 265;
  int INCR = 266;
  int DECR = 267;
  int PLUS = 268;
  int MINUS = 269;
  int STAR = 270;
  int SLASH = 271;
  int BIT_AND = 272;
  int BIT_OR = 273;
  int XOR = 274;
  int REM = 275;
  int LSHIFT = 276;
  int PLUSASSIGN = 277;
  int MINUSASSIGN = 278;
  int STARASSIGN = 279;
  int SLASHASSIGN = 280;
  int ANDASSIGN = 281;
  int ORASSIGN = 282;
  int XORASSIGN = 283;
  int REMASSIGN = 284;
  int LSHIFTASSIGN = 285;
  int RSIGNEDSHIFTASSIGN = 286;
  int RUNSIGNEDSHIFTASSIGN = 287;
  int ELLIPSIS = 288;
  int LARROW = 289;
  int BSLASH = 290;
  int RARROW = 291;
  int RLONGARROW = 292;
  int LLONGARROW = 293;
  int JMLEQUAL = 294;
  int JMLNOTEQUAL = 295;
  int LTCOLON = 296;
  int RUNSIGNEDSHIFT = 297;
  int RSIGNEDSHIFT = 298;
  int GT = 299;

  int DEFAULT = 0;
  int IN_JML_MULTI_LINE = 1;
  int IN_SINGLE_LINE_COMMENT = 2;
  int IN_JML_SINGLE_LINE_COMMENT = 3;
  int IN_FORMAL_COMMENT = 4;
  int IN_MULTI_LINE_COMMENT = 5;
  int IN_JML_SINGLE_LINE = 6;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"/*@\"",
    "\"@*/\"",
    "\"*/\"",
    "<JML_AT>",
    "<SINGLE_LINE_COMMENT>",
    "\"//@\"",
    "\"//\"",
    "<token of kind 13>",
    "\"/*\"",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 17>",
    "<token of kind 18>",
    "\"abstract\"",
    "\"assert\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"\\\\original_spec\"",
    "\"\\\\original_case\"",
    "\"\\\\original_clause\"",
    "\"\\\\original\"",
    "\"\\\\final_contract\"",
    "\"\\\\final_method\"",
    "\"\\\\consecutive_contract\"",
    "\"\\\\conjunctive_contract\"",
    "\"\\\\cumulative_contract\"",
    "\"hence_by\"",
    "\"hence_by_redundantly\"",
    "\"model\"",
    "\"spec_protected\"",
    "\"ghost\"",
    "\"pure\"",
    "\"instance\"",
    "\"helper\"",
    "\"uninitialized\"",
    "\"\\\\java_math\"",
    "\"spec_java_math\"",
    "\"spec_safe_math\"",
    "\"code_java_math\"",
    "\"code_safe_math\"",
    "\"also\"",
    "\"spec_public\"",
    "\"spec_bigint_math\"",
    "\"code_bigint_math\"",
    "\"non_null\"",
    "\"nullable\"",
    "\"nullable_by_default\"",
    "\"extract\"",
    "\"method\"",
    "\"constructor\"",
    "\"\\\\TYPE\"",
    "\"in\"",
    "\"in_redundantly\"",
    "\"\\\\into\"",
    "\"maps\"",
    "\"maps_redundantly\"",
    "\"static_initializer\"",
    "\"maintaining\"",
    "\"maintaining_redundantly\"",
    "\"loop_invariant\"",
    "\"loop_invariant_redundantly\"",
    "\"decreasing\"",
    "\"decreasing_redundantly\"",
    "\"decreases\"",
    "\"decreases_redundantly\"",
    "\"assume\"",
    "\"assume_redundantly\"",
    "\"set\"",
    "\"refining\"",
    "\"unreachable\"",
    "\"debug\"",
    "\"henceby\"",
    "\"henceby_redundantly\"",
    "\"invariant\"",
    "\"invariant_redundantly\"",
    "\"constraint\"",
    "\"constraint_redundantly\"",
    "\"\\\\everything\"",
    "\"\\\\inv\"",
    "\"\\\\disjoint\"",
    "\"\\\\such_that\"",
    "\"represents\"",
    "\"represents_redundantly\"",
    "\"initially\"",
    "\"readable\"",
    "\"writable\"",
    "\"monitors_for\"",
    "\"choose\"",
    "\"or\"",
    "\"choose_if\"",
    "\"abrupt_behavior\"",
    "\"abrupt_behaviour\"",
    "\"continues\"",
    "\"continues_redundantly\"",
    "\"breaks\"",
    "\"breaks_redundantly\"",
    "\"returns\"",
    "\"returns_redundantly\"",
    "\"\\\\result\"",
    "\"\\\\old\"",
    "\"\\\\pre\"",
    "\"\\\\not_assigned\"",
    "\"\\\\not_modified\"",
    "\"\\\\only_accessed\"",
    "\"\\\\only_captured\"",
    "\"\\\\only_called\"",
    "\"\\\\fresh\"",
    "\"\\\\reach\"",
    "\"\\\\duration\"",
    "\"space\"",
    "\"\\\\working_space\"",
    "\"\\\\nonnullelements\"",
    "\"\\\\typeof\"",
    "\"\\\\elemtype\"",
    "\"lockset\"",
    "\"\\\\max\"",
    "\"\\\\is_initialized\"",
    "\"\\\\invariant_for\"",
    "\"\\\\lblneg\"",
    "\"\\\\forall\"",
    "\"\\\\exists\"",
    "\"\\\\min\"",
    "\"\\\\num_of\"",
    "\"\\\\product\"",
    "\"\\\\sum\"",
    "\"\\\\nothing\"",
    "\"\\\\not_specified\"",
    "\"\\\\lblpos\"",
    "\"\\\\only_assigned\"",
    "\"behavior\"",
    "\"behaviour\"",
    "\"normal_behavior\"",
    "\"normal_behaviour\"",
    "\"exceptional_behavior\"",
    "\"exceptional_behaviour\"",
    "\"same\"",
    "\"requires\"",
    "\"requires_redundantly\"",
    "\"pre_redundantly\"",
    "\"ensures\"",
    "\"post\"",
    "\"ensures_redundantly\"",
    "\"post_redundantly\"",
    "\"signals\"",
    "\"signals_redundantly\"",
    "\"exsures\"",
    "\"exsures_redundantly\"",
    "\"signals_only\"",
    "\"signals_only_redundantly\"",
    "\"diverges\"",
    "\"diverges_redundantly\"",
    "\"when\"",
    "\"when_redundantly\"",
    "\"assignable\"",
    "\"assignable_redundantly\"",
    "\"modifiable\"",
    "\"modifiable_redundantly\"",
    "\"callable\"",
    "\"callable_redundantly\"",
    "\"measured_by\"",
    "\"measured_by_redundantly\"",
    "\"captures\"",
    "\"captures_redundantly\"",
    "\"working_space_redundantly\"",
    "\"duration_redundantly\"",
    "\"modifies\"",
    "\"modifies_redundantly\"",
    "\"code\"",
    "\"assert_redundantly\"",
    "\"axiom\"",
    "\"accessible\"",
    "\"accessible_redundantly\"",
    "\"implies_that\"",
    "\"for_example\"",
    "\"exceptional_example\"",
    "\"normal_example\"",
    "\"model_program\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<BOOLEAN_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>>=\"",
    "\"...\"",
    "\"<-\"",
    "\"\\\\\"",
    "\"->\"",
    "\"==>\"",
    "\"<==\"",
    "\"<==>\"",
    "\"<=!=>\"",
    "\"<:\"",
    "\">>>\"",
    "\">>\"",
    "\">\"",
  };

}
